var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

var require_queue_addconsumer_inflight = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/queue.addconsumer.inflight.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.QueueAddConsumerHandlerClient = void 0;
    var QueueAddConsumerHandlerClient = class {
      constructor({ handler }) {
        this.handler = handler;
      }
      async handle(event) {
        for (const record of event.Records ?? []) {
          await this.handler.handle(record.body);
        }
      }
    };
    exports2.QueueAddConsumerHandlerClient = QueueAddConsumerHandlerClient;
  }
});

var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.push(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.push(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
var extendStatics, __assign, __createBinding, __setModuleDefault;
var init_tslib_es6 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/tslib/tslib.es6.js"() {
    extendStatics = function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    };
    __assign = function() {
      __assign = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign.apply(this, arguments);
    };
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
  }
});

var require_s3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/s3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArnBucketName = exports2.isDnsCompatibleBucketName = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = exports2.resolveParamsForS3 = void 0;
    var resolveParamsForS3 = async (endpointParams) => {
      const bucket = (endpointParams === null || endpointParams === void 0 ? void 0 : endpointParams.Bucket) || "";
      if (typeof endpointParams.Bucket === "string") {
        endpointParams.Bucket = bucket.replace(/#/g, encodeURIComponent("#")).replace(/\?/g, encodeURIComponent("?"));
      }
      if ((0, exports2.isArnBucketName)(bucket)) {
        if (endpointParams.ForcePathStyle === true) {
          throw new Error("Path-style addressing cannot be used with ARN buckets");
        }
      } else if (!(0, exports2.isDnsCompatibleBucketName)(bucket) || bucket.indexOf(".") !== -1 && !String(endpointParams.Endpoint).startsWith("http:") || bucket.toLowerCase() !== bucket || bucket.length < 3) {
        endpointParams.ForcePathStyle = true;
      }
      if (endpointParams.DisableMultiRegionAccessPoints) {
        endpointParams.disableMultiRegionAccessPoints = true;
        endpointParams.DisableMRAP = true;
      }
      return endpointParams;
    };
    exports2.resolveParamsForS3 = resolveParamsForS3;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var isArnBucketName = (bucketName) => {
      const [arn, partition, service, region, account, typeOrId] = bucketName.split(":");
      const isArn = arn === "arn" && bucketName.split(":").length >= 6;
      const isValidArn = [arn, partition, service, account, typeOrId].filter(Boolean).length === 5;
      if (isArn && !isValidArn) {
        throw new Error(`Invalid ARN: ${bucketName} was an invalid ARN.`);
      }
      return arn === "arn" && !!partition && !!service && !!account && !!typeOrId;
    };
    exports2.isArnBucketName = isArnBucketName;
  }
});

var require_service_customizations = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/service-customizations/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_s3(), exports2);
  }
});

var require_createConfigValueProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/createConfigValueProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createConfigValueProvider = void 0;
    var createConfigValueProvider = (configKey, canonicalEndpointParamKey, config) => {
      const configProvider = async () => {
        var _a;
        const configValue = (_a = config[configKey]) !== null && _a !== void 0 ? _a : config[canonicalEndpointParamKey];
        if (typeof configValue === "function") {
          return configValue();
        }
        return configValue;
      };
      if (configKey === "endpoint" || canonicalEndpointParamKey === "endpoint") {
        return async () => {
          const endpoint = await configProvider();
          if (endpoint && typeof endpoint === "object") {
            if ("url" in endpoint) {
              return endpoint.url.href;
            }
            if ("hostname" in endpoint) {
              const { protocol, hostname, port, path } = endpoint;
              return `${protocol}//${hostname}${port ? ":" + port : ""}${path}`;
            }
          }
          return endpoint;
        };
      }
      return configProvider;
    };
    exports2.createConfigValueProvider = createConfigValueProvider;
  }
});

var require_getEndpointFromInstructions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/getEndpointFromInstructions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveParams = exports2.getEndpointFromInstructions = void 0;
    var service_customizations_1 = require_service_customizations();
    var createConfigValueProvider_1 = require_createConfigValueProvider();
    var getEndpointFromInstructions = async (commandInput, instructionsSupplier, clientConfig, context) => {
      const endpointParams = await (0, exports2.resolveParams)(commandInput, instructionsSupplier, clientConfig);
      if (typeof clientConfig.endpointProvider !== "function") {
        throw new Error("config.endpointProvider is not set.");
      }
      const endpoint = clientConfig.endpointProvider(endpointParams, context);
      return endpoint;
    };
    exports2.getEndpointFromInstructions = getEndpointFromInstructions;
    var resolveParams = async (commandInput, instructionsSupplier, clientConfig) => {
      var _a;
      const endpointParams = {};
      const instructions = ((_a = instructionsSupplier === null || instructionsSupplier === void 0 ? void 0 : instructionsSupplier.getEndpointParameterInstructions) === null || _a === void 0 ? void 0 : _a.call(instructionsSupplier)) || {};
      for (const [name, instruction] of Object.entries(instructions)) {
        switch (instruction.type) {
          case "staticContextParams":
            endpointParams[name] = instruction.value;
            break;
          case "contextParams":
            endpointParams[name] = commandInput[instruction.name];
            break;
          case "clientContextParams":
          case "builtInParams":
            endpointParams[name] = await (0, createConfigValueProvider_1.createConfigValueProvider)(instruction.name, name, clientConfig)();
            break;
          default:
            throw new Error("Unrecognized endpoint parameter instruction: " + JSON.stringify(instruction));
        }
      }
      if (Object.keys(instructions).length === 0) {
        Object.assign(endpointParams, clientConfig);
      }
      if (String(clientConfig.serviceId).toLowerCase() === "s3") {
        await (0, service_customizations_1.resolveParamsForS3)(endpointParams);
      }
      return endpointParams;
    };
    exports2.resolveParams = resolveParams;
  }
});

var require_dist_cjs = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/querystring-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseQueryString = void 0;
    function parseQueryString(querystring) {
      const query = {};
      querystring = querystring.replace(/^\?/, "");
      if (querystring) {
        for (const pair of querystring.split("&")) {
          let [key, value = null] = pair.split("=");
          key = decodeURIComponent(key);
          if (value) {
            value = decodeURIComponent(value);
          }
          if (!(key in query)) {
            query[key] = value;
          } else if (Array.isArray(query[key])) {
            query[key].push(value);
          } else {
            query[key] = [query[key], value];
          }
        }
      }
      return query;
    }
    exports2.parseQueryString = parseQueryString;
  }
});

var require_dist_cjs2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/url-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseUrl = void 0;
    var querystring_parser_1 = require_dist_cjs();
    var parseUrl = (url) => {
      if (typeof url === "string") {
        return (0, exports2.parseUrl)(new URL(url));
      }
      const { hostname, pathname, port, protocol, search } = url;
      let query;
      if (search) {
        query = (0, querystring_parser_1.parseQueryString)(search);
      }
      return {
        hostname,
        port: port ? parseInt(port) : void 0,
        protocol,
        path: pathname,
        query
      };
    };
    exports2.parseUrl = parseUrl;
  }
});

var require_toEndpointV1 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/toEndpointV1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toEndpointV1 = void 0;
    var url_parser_1 = require_dist_cjs2();
    var toEndpointV1 = (endpoint) => {
      if (typeof endpoint === "object") {
        if ("url" in endpoint) {
          return (0, url_parser_1.parseUrl)(endpoint.url);
        }
        return endpoint;
      }
      return (0, url_parser_1.parseUrl)(endpoint);
    };
    exports2.toEndpointV1 = toEndpointV1;
  }
});

var require_adaptors = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/adaptors/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getEndpointFromInstructions(), exports2);
    tslib_1.__exportStar(require_toEndpointV1(), exports2);
  }
});

var require_endpointMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/endpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.endpointMiddleware = void 0;
    var getEndpointFromInstructions_1 = require_getEndpointFromInstructions();
    var endpointMiddleware = ({ config, instructions }) => {
      return (next, context) => async (args) => {
        var _a, _b;
        const endpoint = await (0, getEndpointFromInstructions_1.getEndpointFromInstructions)(args.input, {
          getEndpointParameterInstructions() {
            return instructions;
          }
        }, { ...config }, context);
        context.endpointV2 = endpoint;
        context.authSchemes = (_a = endpoint.properties) === null || _a === void 0 ? void 0 : _a.authSchemes;
        const authScheme = (_b = context.authSchemes) === null || _b === void 0 ? void 0 : _b[0];
        if (authScheme) {
          context["signing_region"] = authScheme.signingRegion;
          context["signing_service"] = authScheme.signingName;
        }
        return next({
          ...args
        });
      };
    };
    exports2.endpointMiddleware = endpointMiddleware;
  }
});

var require_deserializerMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-serde/dist-cjs/deserializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializerMiddleware = void 0;
    var deserializerMiddleware = (options, deserializer) => (next, context) => async (args) => {
      const { response } = await next(args);
      try {
        const parsed = await deserializer(response, options);
        return {
          response,
          output: parsed
        };
      } catch (error) {
        Object.defineProperty(error, "$response", {
          value: response
        });
        throw error;
      }
    };
    exports2.deserializerMiddleware = deserializerMiddleware;
  }
});

var require_serializerMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-serde/dist-cjs/serializerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializerMiddleware = void 0;
    var serializerMiddleware = (options, serializer) => (next, context) => async (args) => {
      var _a;
      const endpoint = ((_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.url) && options.urlParser ? async () => options.urlParser(context.endpointV2.url) : options.endpoint;
      if (!endpoint) {
        throw new Error("No valid endpoint provider available.");
      }
      const request = await serializer(args.input, { ...options, endpoint });
      return next({
        ...args,
        request
      });
    };
    exports2.serializerMiddleware = serializerMiddleware;
  }
});

var require_serdePlugin = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-serde/dist-cjs/serdePlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSerdePlugin = exports2.serializerMiddlewareOption = exports2.deserializerMiddlewareOption = void 0;
    var deserializerMiddleware_1 = require_deserializerMiddleware();
    var serializerMiddleware_1 = require_serializerMiddleware();
    exports2.deserializerMiddlewareOption = {
      name: "deserializerMiddleware",
      step: "deserialize",
      tags: ["DESERIALIZER"],
      override: true
    };
    exports2.serializerMiddlewareOption = {
      name: "serializerMiddleware",
      step: "serialize",
      tags: ["SERIALIZER"],
      override: true
    };
    function getSerdePlugin(config, serializer, deserializer) {
      return {
        applyToStack: (commandStack) => {
          commandStack.add((0, deserializerMiddleware_1.deserializerMiddleware)(config, deserializer), exports2.deserializerMiddlewareOption);
          commandStack.add((0, serializerMiddleware_1.serializerMiddleware)(config, serializer), exports2.serializerMiddlewareOption);
        }
      };
    }
    exports2.getSerdePlugin = getSerdePlugin;
  }
});

var require_dist_cjs3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-serde/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_deserializerMiddleware(), exports2);
    tslib_1.__exportStar(require_serdePlugin(), exports2);
    tslib_1.__exportStar(require_serializerMiddleware(), exports2);
  }
});

var require_getEndpointPlugin = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/getEndpointPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointPlugin = exports2.endpointMiddlewareOptions = void 0;
    var middleware_serde_1 = require_dist_cjs3();
    var endpointMiddleware_1 = require_endpointMiddleware();
    exports2.endpointMiddlewareOptions = {
      step: "serialize",
      tags: ["ENDPOINT_PARAMETERS", "ENDPOINT_V2", "ENDPOINT"],
      name: "endpointV2Middleware",
      override: true,
      relation: "before",
      toMiddleware: middleware_serde_1.serializerMiddlewareOption.name
    };
    var getEndpointPlugin = (config, instructions) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, endpointMiddleware_1.endpointMiddleware)({
          config,
          instructions
        }), exports2.endpointMiddlewareOptions);
      }
    });
    exports2.getEndpointPlugin = getEndpointPlugin;
  }
});

var require_normalizeProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-middleware/dist-cjs/normalizeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.normalizeProvider = void 0;
    var normalizeProvider = (input) => {
      if (typeof input === "function")
        return input;
      const promisified = Promise.resolve(input);
      return () => promisified;
    };
    exports2.normalizeProvider = normalizeProvider;
  }
});

var require_dist_cjs4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-middleware/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_normalizeProvider(), exports2);
  }
});

var require_resolveEndpointConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/resolveEndpointConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var toEndpointV1_1 = require_toEndpointV1();
    var resolveEndpointConfig = (input) => {
      var _a, _b, _c;
      const tls = (_a = input.tls) !== null && _a !== void 0 ? _a : true;
      const { endpoint } = input;
      const customEndpointProvider = endpoint != null ? async () => (0, toEndpointV1_1.toEndpointV1)(await (0, util_middleware_1.normalizeProvider)(endpoint)()) : void 0;
      const isCustomEndpoint = !!endpoint;
      return {
        ...input,
        endpoint: customEndpointProvider,
        tls,
        isCustomEndpoint,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false),
        useFipsEndpoint: (0, util_middleware_1.normalizeProvider)((_c = input.useFipsEndpoint) !== null && _c !== void 0 ? _c : false)
      };
    };
    exports2.resolveEndpointConfig = resolveEndpointConfig;
  }
});

var require_types = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs5 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_adaptors(), exports2);
    tslib_1.__exportStar(require_endpointMiddleware(), exports2);
    tslib_1.__exportStar(require_getEndpointPlugin(), exports2);
    tslib_1.__exportStar(require_resolveEndpointConfig(), exports2);
    tslib_1.__exportStar(require_types(), exports2);
  }
});

var require_NoOpLogger = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/NoOpLogger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NoOpLogger = void 0;
    var NoOpLogger = class {
      trace() {
      }
      debug() {
      }
      info() {
      }
      warn() {
      }
      error() {
      }
    };
    exports2.NoOpLogger = NoOpLogger;
  }
});

var require_MiddlewareStack = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-stack/dist-cjs/MiddlewareStack.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.constructStack = void 0;
    var constructStack = () => {
      let absoluteEntries = [];
      let relativeEntries = [];
      const entriesNameSet = /* @__PURE__ */ new Set();
      const sort = (entries) => entries.sort((a, b) => stepWeights[b.step] - stepWeights[a.step] || priorityWeights[b.priority || "normal"] - priorityWeights[a.priority || "normal"]);
      const removeByName = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.name && entry.name === toRemove) {
            isRemoved = true;
            entriesNameSet.delete(toRemove);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const removeByReference = (toRemove) => {
        let isRemoved = false;
        const filterCb = (entry) => {
          if (entry.middleware === toRemove) {
            isRemoved = true;
            if (entry.name)
              entriesNameSet.delete(entry.name);
            return false;
          }
          return true;
        };
        absoluteEntries = absoluteEntries.filter(filterCb);
        relativeEntries = relativeEntries.filter(filterCb);
        return isRemoved;
      };
      const cloneTo = (toStack) => {
        absoluteEntries.forEach((entry) => {
          toStack.add(entry.middleware, { ...entry });
        });
        relativeEntries.forEach((entry) => {
          toStack.addRelativeTo(entry.middleware, { ...entry });
        });
        return toStack;
      };
      const expandRelativeMiddlewareList = (from) => {
        const expandedMiddlewareList = [];
        from.before.forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        expandedMiddlewareList.push(from);
        from.after.reverse().forEach((entry) => {
          if (entry.before.length === 0 && entry.after.length === 0) {
            expandedMiddlewareList.push(entry);
          } else {
            expandedMiddlewareList.push(...expandRelativeMiddlewareList(entry));
          }
        });
        return expandedMiddlewareList;
      };
      const getMiddlewareList = (debug = false) => {
        const normalizedAbsoluteEntries = [];
        const normalizedRelativeEntries = [];
        const normalizedEntriesNameMap = {};
        absoluteEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedAbsoluteEntries.push(normalizedEntry);
        });
        relativeEntries.forEach((entry) => {
          const normalizedEntry = {
            ...entry,
            before: [],
            after: []
          };
          if (normalizedEntry.name)
            normalizedEntriesNameMap[normalizedEntry.name] = normalizedEntry;
          normalizedRelativeEntries.push(normalizedEntry);
        });
        normalizedRelativeEntries.forEach((entry) => {
          if (entry.toMiddleware) {
            const toMiddleware = normalizedEntriesNameMap[entry.toMiddleware];
            if (toMiddleware === void 0) {
              if (debug) {
                return;
              }
              throw new Error(`${entry.toMiddleware} is not found when adding ${entry.name || "anonymous"} middleware ${entry.relation} ${entry.toMiddleware}`);
            }
            if (entry.relation === "after") {
              toMiddleware.after.push(entry);
            }
            if (entry.relation === "before") {
              toMiddleware.before.push(entry);
            }
          }
        });
        const mainChain = sort(normalizedAbsoluteEntries).map(expandRelativeMiddlewareList).reduce((wholeList, expendedMiddlewareList) => {
          wholeList.push(...expendedMiddlewareList);
          return wholeList;
        }, []);
        return mainChain;
      };
      const stack = {
        add: (middleware, options = {}) => {
          const { name, override } = options;
          const entry = {
            step: "initialize",
            priority: "normal",
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = absoluteEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = absoluteEntries[toOverrideIndex];
              if (toOverride.step !== entry.step || toOverride.priority !== entry.priority) {
                throw new Error(`"${name}" middleware with ${toOverride.priority} priority in ${toOverride.step} step cannot be overridden by same-name middleware with ${entry.priority} priority in ${entry.step} step.`);
              }
              absoluteEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          absoluteEntries.push(entry);
        },
        addRelativeTo: (middleware, options) => {
          const { name, override } = options;
          const entry = {
            middleware,
            ...options
          };
          if (name) {
            if (entriesNameSet.has(name)) {
              if (!override)
                throw new Error(`Duplicate middleware name '${name}'`);
              const toOverrideIndex = relativeEntries.findIndex((entry2) => entry2.name === name);
              const toOverride = relativeEntries[toOverrideIndex];
              if (toOverride.toMiddleware !== entry.toMiddleware || toOverride.relation !== entry.relation) {
                throw new Error(`"${name}" middleware ${toOverride.relation} "${toOverride.toMiddleware}" middleware cannot be overridden by same-name middleware ${entry.relation} "${entry.toMiddleware}" middleware.`);
              }
              relativeEntries.splice(toOverrideIndex, 1);
            }
            entriesNameSet.add(name);
          }
          relativeEntries.push(entry);
        },
        clone: () => cloneTo((0, exports2.constructStack)()),
        use: (plugin) => {
          plugin.applyToStack(stack);
        },
        remove: (toRemove) => {
          if (typeof toRemove === "string")
            return removeByName(toRemove);
          else
            return removeByReference(toRemove);
        },
        removeByTag: (toRemove) => {
          let isRemoved = false;
          const filterCb = (entry) => {
            const { tags, name } = entry;
            if (tags && tags.includes(toRemove)) {
              if (name)
                entriesNameSet.delete(name);
              isRemoved = true;
              return false;
            }
            return true;
          };
          absoluteEntries = absoluteEntries.filter(filterCb);
          relativeEntries = relativeEntries.filter(filterCb);
          return isRemoved;
        },
        concat: (from) => {
          const cloned = cloneTo((0, exports2.constructStack)());
          cloned.use(from);
          return cloned;
        },
        applyToStack: cloneTo,
        identify: () => {
          return getMiddlewareList(true).map((mw) => {
            return mw.name + ": " + (mw.tags || []).join(",");
          });
        },
        resolve: (handler, context) => {
          for (const middleware of getMiddlewareList().map((entry) => entry.middleware).reverse()) {
            handler = middleware(handler, context);
          }
          return handler;
        }
      };
      return stack;
    };
    exports2.constructStack = constructStack;
    var stepWeights = {
      initialize: 5,
      serialize: 4,
      build: 3,
      finalizeRequest: 2,
      deserialize: 1
    };
    var priorityWeights = {
      high: 3,
      normal: 2,
      low: 1
    };
  }
});

var require_dist_cjs6 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-stack/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_MiddlewareStack(), exports2);
  }
});

var require_client = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Client = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Client = class {
      constructor(config) {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
        this.config = config;
      }
      send(command, optionsOrCb, cb) {
        const options = typeof optionsOrCb !== "function" ? optionsOrCb : void 0;
        const callback = typeof optionsOrCb === "function" ? optionsOrCb : cb;
        const handler = command.resolveMiddleware(this.middlewareStack, this.config, options);
        if (callback) {
          handler(command).then((result) => callback(null, result.output), (err) => callback(err)).catch(() => {
          });
        } else {
          return handler(command).then((result) => result.output);
        }
      }
      destroy() {
        if (this.config.requestHandler.destroy)
          this.config.requestHandler.destroy();
      }
    };
    exports2.Client = Client;
  }
});

var require_command = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Command = void 0;
    var middleware_stack_1 = require_dist_cjs6();
    var Command = class {
      constructor() {
        this.middlewareStack = (0, middleware_stack_1.constructStack)();
      }
    };
    exports2.Command = Command;
  }
});

var require_constants = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SENSITIVE_STRING = void 0;
    exports2.SENSITIVE_STRING = "***SensitiveInformation***";
  }
});

var require_parse_utils = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/parse-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.logger = exports2.strictParseByte = exports2.strictParseShort = exports2.strictParseInt32 = exports2.strictParseInt = exports2.strictParseLong = exports2.limitedParseFloat32 = exports2.limitedParseFloat = exports2.handleFloat = exports2.limitedParseDouble = exports2.strictParseFloat32 = exports2.strictParseFloat = exports2.strictParseDouble = exports2.expectUnion = exports2.expectString = exports2.expectObject = exports2.expectNonNull = exports2.expectByte = exports2.expectShort = exports2.expectInt32 = exports2.expectInt = exports2.expectLong = exports2.expectFloat32 = exports2.expectNumber = exports2.expectBoolean = exports2.parseBoolean = void 0;
    var parseBoolean = (value) => {
      switch (value) {
        case "true":
          return true;
        case "false":
          return false;
        default:
          throw new Error(`Unable to parse boolean value "${value}"`);
      }
    };
    exports2.parseBoolean = parseBoolean;
    var expectBoolean = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "number") {
        if (value === 0 || value === 1) {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (value === 0) {
          return false;
        }
        if (value === 1) {
          return true;
        }
      }
      if (typeof value === "string") {
        const lower = value.toLowerCase();
        if (lower === "false" || lower === "true") {
          exports2.logger.warn(stackTraceWarning(`Expected boolean, got ${typeof value}: ${value}`));
        }
        if (lower === "false") {
          return false;
        }
        if (lower === "true") {
          return true;
        }
      }
      if (typeof value === "boolean") {
        return value;
      }
      throw new TypeError(`Expected boolean, got ${typeof value}: ${value}`);
    };
    exports2.expectBoolean = expectBoolean;
    var expectNumber = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        const parsed = parseFloat(value);
        if (!Number.isNaN(parsed)) {
          if (String(parsed) !== String(value)) {
            exports2.logger.warn(stackTraceWarning(`Expected number but observed string: ${value}`));
          }
          return parsed;
        }
      }
      if (typeof value === "number") {
        return value;
      }
      throw new TypeError(`Expected number, got ${typeof value}: ${value}`);
    };
    exports2.expectNumber = expectNumber;
    var MAX_FLOAT = Math.ceil(2 ** 127 * (2 - 2 ** -23));
    var expectFloat32 = (value) => {
      const expected = (0, exports2.expectNumber)(value);
      if (expected !== void 0 && !Number.isNaN(expected) && expected !== Infinity && expected !== -Infinity) {
        if (Math.abs(expected) > MAX_FLOAT) {
          throw new TypeError(`Expected 32-bit float, got ${value}`);
        }
      }
      return expected;
    };
    exports2.expectFloat32 = expectFloat32;
    var expectLong = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (Number.isInteger(value) && !Number.isNaN(value)) {
        return value;
      }
      throw new TypeError(`Expected integer, got ${typeof value}: ${value}`);
    };
    exports2.expectLong = expectLong;
    exports2.expectInt = exports2.expectLong;
    var expectInt32 = (value) => expectSizedInt(value, 32);
    exports2.expectInt32 = expectInt32;
    var expectShort = (value) => expectSizedInt(value, 16);
    exports2.expectShort = expectShort;
    var expectByte = (value) => expectSizedInt(value, 8);
    exports2.expectByte = expectByte;
    var expectSizedInt = (value, size) => {
      const expected = (0, exports2.expectLong)(value);
      if (expected !== void 0 && castInt(expected, size) !== expected) {
        throw new TypeError(`Expected ${size}-bit integer, got ${value}`);
      }
      return expected;
    };
    var castInt = (value, size) => {
      switch (size) {
        case 32:
          return Int32Array.of(value)[0];
        case 16:
          return Int16Array.of(value)[0];
        case 8:
          return Int8Array.of(value)[0];
      }
    };
    var expectNonNull = (value, location) => {
      if (value === null || value === void 0) {
        if (location) {
          throw new TypeError(`Expected a non-null value for ${location}`);
        }
        throw new TypeError("Expected a non-null value");
      }
      return value;
    };
    exports2.expectNonNull = expectNonNull;
    var expectObject = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "object" && !Array.isArray(value)) {
        return value;
      }
      const receivedType = Array.isArray(value) ? "array" : typeof value;
      throw new TypeError(`Expected object, got ${receivedType}: ${value}`);
    };
    exports2.expectObject = expectObject;
    var expectString = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value === "string") {
        return value;
      }
      if (["boolean", "number", "bigint"].includes(typeof value)) {
        exports2.logger.warn(stackTraceWarning(`Expected string, got ${typeof value}: ${value}`));
        return String(value);
      }
      throw new TypeError(`Expected string, got ${typeof value}: ${value}`);
    };
    exports2.expectString = expectString;
    var expectUnion = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      const asObject = (0, exports2.expectObject)(value);
      const setKeys = Object.entries(asObject).filter(([, v]) => v != null).map(([k]) => k);
      if (setKeys.length === 0) {
        throw new TypeError(`Unions must have exactly one non-null member. None were found.`);
      }
      if (setKeys.length > 1) {
        throw new TypeError(`Unions must have exactly one non-null member. Keys ${setKeys} were not null.`);
      }
      return asObject;
    };
    exports2.expectUnion = expectUnion;
    var strictParseDouble = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectNumber)(parseNumber(value));
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.strictParseDouble = strictParseDouble;
    exports2.strictParseFloat = exports2.strictParseDouble;
    var strictParseFloat32 = (value) => {
      if (typeof value == "string") {
        return (0, exports2.expectFloat32)(parseNumber(value));
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.strictParseFloat32 = strictParseFloat32;
    var NUMBER_REGEX = /(-?(?:0|[1-9]\d*)(?:\.\d+)?(?:[eE][+-]?\d+)?)|(-?Infinity)|(NaN)/g;
    var parseNumber = (value) => {
      const matches = value.match(NUMBER_REGEX);
      if (matches === null || matches[0].length !== value.length) {
        throw new TypeError(`Expected real number, got implicit NaN`);
      }
      return parseFloat(value);
    };
    var limitedParseDouble = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectNumber)(value);
    };
    exports2.limitedParseDouble = limitedParseDouble;
    exports2.handleFloat = exports2.limitedParseDouble;
    exports2.limitedParseFloat = exports2.limitedParseDouble;
    var limitedParseFloat32 = (value) => {
      if (typeof value == "string") {
        return parseFloatString(value);
      }
      return (0, exports2.expectFloat32)(value);
    };
    exports2.limitedParseFloat32 = limitedParseFloat32;
    var parseFloatString = (value) => {
      switch (value) {
        case "NaN":
          return NaN;
        case "Infinity":
          return Infinity;
        case "-Infinity":
          return -Infinity;
        default:
          throw new Error(`Unable to parse float value: ${value}`);
      }
    };
    var strictParseLong = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectLong)(parseNumber(value));
      }
      return (0, exports2.expectLong)(value);
    };
    exports2.strictParseLong = strictParseLong;
    exports2.strictParseInt = exports2.strictParseLong;
    var strictParseInt32 = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectInt32)(parseNumber(value));
      }
      return (0, exports2.expectInt32)(value);
    };
    exports2.strictParseInt32 = strictParseInt32;
    var strictParseShort = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectShort)(parseNumber(value));
      }
      return (0, exports2.expectShort)(value);
    };
    exports2.strictParseShort = strictParseShort;
    var strictParseByte = (value) => {
      if (typeof value === "string") {
        return (0, exports2.expectByte)(parseNumber(value));
      }
      return (0, exports2.expectByte)(value);
    };
    exports2.strictParseByte = strictParseByte;
    var stackTraceWarning = (message) => {
      return String(new TypeError(message).stack || message).split("\n").slice(0, 5).filter((s) => !s.includes("stackTraceWarning")).join("\n");
    };
    exports2.logger = {
      warn: console.warn
    };
  }
});

var require_date_utils = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/date-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseEpochTimestamp = exports2.parseRfc7231DateTime = exports2.parseRfc3339DateTime = exports2.dateToUtcString = void 0;
    var parse_utils_1 = require_parse_utils();
    var DAYS = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"];
    var MONTHS = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"];
    function dateToUtcString(date) {
      const year = date.getUTCFullYear();
      const month = date.getUTCMonth();
      const dayOfWeek = date.getUTCDay();
      const dayOfMonthInt = date.getUTCDate();
      const hoursInt = date.getUTCHours();
      const minutesInt = date.getUTCMinutes();
      const secondsInt = date.getUTCSeconds();
      const dayOfMonthString = dayOfMonthInt < 10 ? `0${dayOfMonthInt}` : `${dayOfMonthInt}`;
      const hoursString = hoursInt < 10 ? `0${hoursInt}` : `${hoursInt}`;
      const minutesString = minutesInt < 10 ? `0${minutesInt}` : `${minutesInt}`;
      const secondsString = secondsInt < 10 ? `0${secondsInt}` : `${secondsInt}`;
      return `${DAYS[dayOfWeek]}, ${dayOfMonthString} ${MONTHS[month]} ${year} ${hoursString}:${minutesString}:${secondsString} GMT`;
    }
    exports2.dateToUtcString = dateToUtcString;
    var RFC3339 = new RegExp(/^(\d{4})-(\d{2})-(\d{2})[tT](\d{2}):(\d{2}):(\d{2})(?:\.(\d+))?[zZ]$/);
    var parseRfc3339DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-3339 date-times must be expressed as strings");
      }
      const match = RFC3339.exec(value);
      if (!match) {
        throw new TypeError("Invalid RFC-3339 date-time value");
      }
      const [_, yearStr, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds] = match;
      const year = (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr));
      const month = parseDateValue(monthStr, "month", 1, 12);
      const day = parseDateValue(dayStr, "day", 1, 31);
      return buildDate(year, month, day, { hours, minutes, seconds, fractionalMilliseconds });
    };
    exports2.parseRfc3339DateTime = parseRfc3339DateTime;
    var IMF_FIXDATE = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\d{2}) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\d{4}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var RFC_850_DATE = new RegExp(/^(?:Monday|Tuesday|Wednesday|Thursday|Friday|Saturday|Sunday), (\d{2})-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? GMT$/);
    var ASC_TIME = new RegExp(/^(?:Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( [1-9]|\d{2}) (\d{1,2}):(\d{2}):(\d{2})(?:\.(\d+))? (\d{4})$/);
    var parseRfc7231DateTime = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      if (typeof value !== "string") {
        throw new TypeError("RFC-7231 date-times must be expressed as strings");
      }
      let match = IMF_FIXDATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      match = RFC_850_DATE.exec(value);
      if (match) {
        const [_, dayStr, monthStr, yearStr, hours, minutes, seconds, fractionalMilliseconds] = match;
        return adjustRfc850Year(buildDate(parseTwoDigitYear(yearStr), parseMonthByShortName(monthStr), parseDateValue(dayStr, "day", 1, 31), {
          hours,
          minutes,
          seconds,
          fractionalMilliseconds
        }));
      }
      match = ASC_TIME.exec(value);
      if (match) {
        const [_, monthStr, dayStr, hours, minutes, seconds, fractionalMilliseconds, yearStr] = match;
        return buildDate((0, parse_utils_1.strictParseShort)(stripLeadingZeroes(yearStr)), parseMonthByShortName(monthStr), parseDateValue(dayStr.trimLeft(), "day", 1, 31), { hours, minutes, seconds, fractionalMilliseconds });
      }
      throw new TypeError("Invalid RFC-7231 date-time value");
    };
    exports2.parseRfc7231DateTime = parseRfc7231DateTime;
    var parseEpochTimestamp = (value) => {
      if (value === null || value === void 0) {
        return void 0;
      }
      let valueAsDouble;
      if (typeof value === "number") {
        valueAsDouble = value;
      } else if (typeof value === "string") {
        valueAsDouble = (0, parse_utils_1.strictParseDouble)(value);
      } else {
        throw new TypeError("Epoch timestamps must be expressed as floating point numbers or their string representation");
      }
      if (Number.isNaN(valueAsDouble) || valueAsDouble === Infinity || valueAsDouble === -Infinity) {
        throw new TypeError("Epoch timestamps must be valid, non-Infinite, non-NaN numerics");
      }
      return new Date(Math.round(valueAsDouble * 1e3));
    };
    exports2.parseEpochTimestamp = parseEpochTimestamp;
    var buildDate = (year, month, day, time) => {
      const adjustedMonth = month - 1;
      validateDayOfMonth(year, adjustedMonth, day);
      return new Date(Date.UTC(year, adjustedMonth, day, parseDateValue(time.hours, "hour", 0, 23), parseDateValue(time.minutes, "minute", 0, 59), parseDateValue(time.seconds, "seconds", 0, 60), parseMilliseconds(time.fractionalMilliseconds)));
    };
    var parseTwoDigitYear = (value) => {
      const thisYear = (/* @__PURE__ */ new Date()).getUTCFullYear();
      const valueInThisCentury = Math.floor(thisYear / 100) * 100 + (0, parse_utils_1.strictParseShort)(stripLeadingZeroes(value));
      if (valueInThisCentury < thisYear) {
        return valueInThisCentury + 100;
      }
      return valueInThisCentury;
    };
    var FIFTY_YEARS_IN_MILLIS = 50 * 365 * 24 * 60 * 60 * 1e3;
    var adjustRfc850Year = (input) => {
      if (input.getTime() - (/* @__PURE__ */ new Date()).getTime() > FIFTY_YEARS_IN_MILLIS) {
        return new Date(Date.UTC(input.getUTCFullYear() - 100, input.getUTCMonth(), input.getUTCDate(), input.getUTCHours(), input.getUTCMinutes(), input.getUTCSeconds(), input.getUTCMilliseconds()));
      }
      return input;
    };
    var parseMonthByShortName = (value) => {
      const monthIdx = MONTHS.indexOf(value);
      if (monthIdx < 0) {
        throw new TypeError(`Invalid month: ${value}`);
      }
      return monthIdx + 1;
    };
    var DAYS_IN_MONTH = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
    var validateDayOfMonth = (year, month, day) => {
      let maxDays = DAYS_IN_MONTH[month];
      if (month === 1 && isLeapYear(year)) {
        maxDays = 29;
      }
      if (day > maxDays) {
        throw new TypeError(`Invalid day for ${MONTHS[month]} in ${year}: ${day}`);
      }
    };
    var isLeapYear = (year) => {
      return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);
    };
    var parseDateValue = (value, type, lower, upper) => {
      const dateVal = (0, parse_utils_1.strictParseByte)(stripLeadingZeroes(value));
      if (dateVal < lower || dateVal > upper) {
        throw new TypeError(`${type} must be between ${lower} and ${upper}, inclusive`);
      }
      return dateVal;
    };
    var parseMilliseconds = (value) => {
      if (value === null || value === void 0) {
        return 0;
      }
      return (0, parse_utils_1.strictParseFloat32)("0." + value) * 1e3;
    };
    var stripLeadingZeroes = (value) => {
      let idx = 0;
      while (idx < value.length - 1 && value.charAt(idx) === "0") {
        idx++;
      }
      if (idx === 0) {
        return value;
      }
      return value.slice(idx);
    };
  }
});

var require_exceptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateServiceException = exports2.ServiceException = void 0;
    var ServiceException = class extends Error {
      constructor(options) {
        super(options.message);
        Object.setPrototypeOf(this, ServiceException.prototype);
        this.name = options.name;
        this.$fault = options.$fault;
        this.$metadata = options.$metadata;
      }
    };
    exports2.ServiceException = ServiceException;
    var decorateServiceException = (exception, additions = {}) => {
      Object.entries(additions).filter(([, v]) => v !== void 0).forEach(([k, v]) => {
        if (exception[k] == void 0 || exception[k] === "") {
          exception[k] = v;
        }
      });
      const message = exception.message || exception.Message || "UnknownError";
      exception.message = message;
      delete exception.Message;
      return exception;
    };
    exports2.decorateServiceException = decorateServiceException;
  }
});

var require_default_error_handler = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/default-error-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.throwDefaultError = void 0;
    var exceptions_1 = require_exceptions();
    var throwDefaultError = ({ output, parsedBody, exceptionCtor, errorCode }) => {
      const $metadata = deserializeMetadata(output);
      const statusCode = $metadata.httpStatusCode ? $metadata.httpStatusCode + "" : void 0;
      const response = new exceptionCtor({
        name: parsedBody.code || parsedBody.Code || errorCode || statusCode || "UnknownError",
        $fault: "client",
        $metadata
      });
      throw (0, exceptions_1.decorateServiceException)(response, parsedBody);
    };
    exports2.throwDefaultError = throwDefaultError;
    var deserializeMetadata = (output) => {
      var _a, _b;
      return {
        httpStatusCode: output.statusCode,
        requestId: (_b = (_a = output.headers["x-amzn-requestid"]) !== null && _a !== void 0 ? _a : output.headers["x-amzn-request-id"]) !== null && _b !== void 0 ? _b : output.headers["x-amz-request-id"],
        extendedRequestId: output.headers["x-amz-id-2"],
        cfId: output.headers["x-amz-cf-id"]
      };
    };
  }
});

var require_defaults_mode = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/defaults-mode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfigsForDefaultMode = void 0;
    var loadConfigsForDefaultMode = (mode) => {
      switch (mode) {
        case "standard":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "in-region":
          return {
            retryMode: "standard",
            connectionTimeout: 1100
          };
        case "cross-region":
          return {
            retryMode: "standard",
            connectionTimeout: 3100
          };
        case "mobile":
          return {
            retryMode: "standard",
            connectionTimeout: 3e4
          };
        default:
          return {};
      }
    };
    exports2.loadConfigsForDefaultMode = loadConfigsForDefaultMode;
  }
});

var require_emitWarningIfUnsupportedVersion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/emitWarningIfUnsupportedVersion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.emitWarningIfUnsupportedVersion = void 0;
    var warningEmitted = false;
    var emitWarningIfUnsupportedVersion = (version2) => {
      if (version2 && !warningEmitted && parseInt(version2.substring(1, version2.indexOf("."))) < 14) {
        warningEmitted = true;
      }
    };
    exports2.emitWarningIfUnsupportedVersion = emitWarningIfUnsupportedVersion;
  }
});

var require_extended_encode_uri_component = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/extended-encode-uri-component.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.extendedEncodeURIComponent = void 0;
    function extendedEncodeURIComponent(str) {
      return encodeURIComponent(str).replace(/[!'()*]/g, function(c) {
        return "%" + c.charCodeAt(0).toString(16).toUpperCase();
      });
    }
    exports2.extendedEncodeURIComponent = extendedEncodeURIComponent;
  }
});

var require_get_array_if_single_item = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/get-array-if-single-item.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getArrayIfSingleItem = void 0;
    var getArrayIfSingleItem = (mayBeArray) => Array.isArray(mayBeArray) ? mayBeArray : [mayBeArray];
    exports2.getArrayIfSingleItem = getArrayIfSingleItem;
  }
});

var require_get_value_from_text_node = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/get-value-from-text-node.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValueFromTextNode = void 0;
    var getValueFromTextNode = (obj) => {
      const textNodeName = "#text";
      for (const key in obj) {
        if (obj.hasOwnProperty(key) && obj[key][textNodeName] !== void 0) {
          obj[key] = obj[key][textNodeName];
        } else if (typeof obj[key] === "object" && obj[key] !== null) {
          obj[key] = (0, exports2.getValueFromTextNode)(obj[key]);
        }
      }
      return obj;
    };
    exports2.getValueFromTextNode = getValueFromTextNode;
  }
});

var require_lazy_json = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/lazy-json.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LazyJsonString = exports2.StringWrapper = void 0;
    var StringWrapper = function() {
      const Class = Object.getPrototypeOf(this).constructor;
      const Constructor = Function.bind.apply(String, [null, ...arguments]);
      const instance = new Constructor();
      Object.setPrototypeOf(instance, Class.prototype);
      return instance;
    };
    exports2.StringWrapper = StringWrapper;
    exports2.StringWrapper.prototype = Object.create(String.prototype, {
      constructor: {
        value: exports2.StringWrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    Object.setPrototypeOf(exports2.StringWrapper, String);
    var LazyJsonString = class extends exports2.StringWrapper {
      deserializeJSON() {
        return JSON.parse(super.toString());
      }
      toJSON() {
        return super.toString();
      }
      static fromObject(object) {
        if (object instanceof LazyJsonString) {
          return object;
        } else if (object instanceof String || typeof object === "string") {
          return new LazyJsonString(object);
        }
        return new LazyJsonString(JSON.stringify(object));
      }
    };
    exports2.LazyJsonString = LazyJsonString;
  }
});

var require_object_mapping = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/object-mapping.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertMap = exports2.map = void 0;
    function map(arg0, arg1, arg2) {
      let target;
      let filter;
      let instructions;
      if (typeof arg1 === "undefined" && typeof arg2 === "undefined") {
        target = {};
        instructions = arg0;
      } else {
        target = arg0;
        if (typeof arg1 === "function") {
          filter = arg1;
          instructions = arg2;
          return mapWithFilter(target, filter, instructions);
        } else {
          instructions = arg1;
        }
      }
      for (const key of Object.keys(instructions)) {
        if (!Array.isArray(instructions[key])) {
          target[key] = instructions[key];
          continue;
        }
        let [filter2, value] = instructions[key];
        if (typeof value === "function") {
          let _value;
          const defaultFilterPassed = filter2 === void 0 && (_value = value()) != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(void 0) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed) {
            target[key] = _value;
          } else if (customFilterPassed) {
            target[key] = value();
          }
        } else {
          const defaultFilterPassed = filter2 === void 0 && value != null;
          const customFilterPassed = typeof filter2 === "function" && !!filter2(value) || typeof filter2 !== "function" && !!filter2;
          if (defaultFilterPassed || customFilterPassed) {
            target[key] = value;
          }
        }
      }
      return target;
    }
    exports2.map = map;
    var convertMap = (target) => {
      const output = {};
      for (const [k, v] of Object.entries(target || {})) {
        output[k] = [, v];
      }
      return output;
    };
    exports2.convertMap = convertMap;
    var mapWithFilter = (target, filter, instructions) => {
      return map(target, Object.entries(instructions).reduce((_instructions, [key, value]) => {
        if (Array.isArray(value)) {
          _instructions[key] = value;
        } else {
          if (typeof value === "function") {
            _instructions[key] = [filter, value()];
          } else {
            _instructions[key] = [filter, value];
          }
        }
        return _instructions;
      }, {}));
    };
  }
});

var require_resolve_path = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/resolve-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolvedPath = void 0;
    var extended_encode_uri_component_1 = require_extended_encode_uri_component();
    var resolvedPath = (resolvedPath2, input, memberName, labelValueProvider, uriLabel, isGreedyLabel) => {
      if (input != null && input[memberName] !== void 0) {
        const labelValue = labelValueProvider();
        if (labelValue.length <= 0) {
          throw new Error("Empty value provided for input HTTP label: " + memberName + ".");
        }
        resolvedPath2 = resolvedPath2.replace(uriLabel, isGreedyLabel ? labelValue.split("/").map((segment) => (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(segment)).join("/") : (0, extended_encode_uri_component_1.extendedEncodeURIComponent)(labelValue));
      } else {
        throw new Error("No value provided for input HTTP label: " + memberName + ".");
      }
      return resolvedPath2;
    };
    exports2.resolvedPath = resolvedPath;
  }
});

var require_ser_utils = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/ser-utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeFloat = void 0;
    var serializeFloat = (value) => {
      if (value !== value) {
        return "NaN";
      }
      switch (value) {
        case Infinity:
          return "Infinity";
        case -Infinity:
          return "-Infinity";
        default:
          return value;
      }
    };
    exports2.serializeFloat = serializeFloat;
  }
});

var require_split_every = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/split-every.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitEvery = void 0;
    function splitEvery(value, delimiter, numDelimiters) {
      if (numDelimiters <= 0 || !Number.isInteger(numDelimiters)) {
        throw new Error("Invalid number of delimiters (" + numDelimiters + ") for splitEvery.");
      }
      const segments = value.split(delimiter);
      if (numDelimiters === 1) {
        return segments;
      }
      const compoundSegments = [];
      let currentSegment = "";
      for (let i = 0; i < segments.length; i++) {
        if (currentSegment === "") {
          currentSegment = segments[i];
        } else {
          currentSegment += delimiter + segments[i];
        }
        if ((i + 1) % numDelimiters === 0) {
          compoundSegments.push(currentSegment);
          currentSegment = "";
        }
      }
      if (currentSegment !== "") {
        compoundSegments.push(currentSegment);
      }
      return compoundSegments;
    }
    exports2.splitEvery = splitEvery;
  }
});

var require_dist_cjs7 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/smithy-client/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NoOpLogger(), exports2);
    tslib_1.__exportStar(require_client(), exports2);
    tslib_1.__exportStar(require_command(), exports2);
    tslib_1.__exportStar(require_constants(), exports2);
    tslib_1.__exportStar(require_date_utils(), exports2);
    tslib_1.__exportStar(require_default_error_handler(), exports2);
    tslib_1.__exportStar(require_defaults_mode(), exports2);
    tslib_1.__exportStar(require_emitWarningIfUnsupportedVersion(), exports2);
    tslib_1.__exportStar(require_exceptions(), exports2);
    tslib_1.__exportStar(require_extended_encode_uri_component(), exports2);
    tslib_1.__exportStar(require_get_array_if_single_item(), exports2);
    tslib_1.__exportStar(require_get_value_from_text_node(), exports2);
    tslib_1.__exportStar(require_lazy_json(), exports2);
    tslib_1.__exportStar(require_object_mapping(), exports2);
    tslib_1.__exportStar(require_parse_utils(), exports2);
    tslib_1.__exportStar(require_resolve_path(), exports2);
    tslib_1.__exportStar(require_ser_utils(), exports2);
    tslib_1.__exportStar(require_split_every(), exports2);
  }
});

var require_S3ServiceException = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/S3ServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3ServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var S3ServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, S3ServiceException.prototype);
      }
    };
    exports2.S3ServiceException = S3ServiceException;
  }
});

var require_models_0 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChecksumMode = exports2.ReplicationStatus = exports2.Protocol = exports2.BucketVersioningStatus = exports2.MFADeleteStatus = exports2.Payer = exports2.ReplicationRuleStatus = exports2.SseKmsEncryptedObjectsStatus = exports2.ReplicaModificationsStatus = exports2.ReplicationRuleFilter = exports2.ExistingObjectReplicationStatus = exports2.ReplicationTimeStatus = exports2.MetricsStatus = exports2.DeleteMarkerReplicationStatus = exports2.FilterRuleName = exports2.MetricsFilter = exports2.BucketLogsPermission = exports2.ExpirationStatus = exports2.TransitionStorageClass = exports2.LifecycleRuleFilter = exports2.InventoryFrequency = exports2.InventoryOptionalField = exports2.InventoryIncludedObjectVersions = exports2.InventoryFormat = exports2.IntelligentTieringAccessTier = exports2.IntelligentTieringStatus = exports2.StorageClassAnalysisSchemaVersion = exports2.AnalyticsS3ExportFileFormat = exports2.AnalyticsFilter = exports2.ObjectOwnership = exports2.BucketLocationConstraint = exports2.BucketCannedACL = exports2.BucketAlreadyOwnedByYou = exports2.BucketAlreadyExists = exports2.ObjectNotInActiveTierError = exports2.TaggingDirective = exports2.StorageClass = exports2.ObjectLockMode = exports2.ObjectLockLegalHoldStatus = exports2.MetadataDirective = exports2.ChecksumAlgorithm = exports2.ObjectCannedACL = exports2.ServerSideEncryption = exports2.OwnerOverride = exports2.Permission = exports2.Type = exports2.BucketAccelerateStatus = exports2.NoSuchUpload = exports2.RequestPayer = exports2.RequestCharged = void 0;
    exports2._ErrorFilterSensitiveLog = exports2.DeletedObjectFilterSensitiveLog = exports2.DeleteObjectRequestFilterSensitiveLog = exports2.DeleteObjectOutputFilterSensitiveLog = exports2.DeleteBucketWebsiteRequestFilterSensitiveLog = exports2.DeleteBucketTaggingRequestFilterSensitiveLog = exports2.DeleteBucketReplicationRequestFilterSensitiveLog = exports2.DeleteBucketPolicyRequestFilterSensitiveLog = exports2.DeleteBucketOwnershipControlsRequestFilterSensitiveLog = exports2.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = exports2.DeleteBucketLifecycleRequestFilterSensitiveLog = exports2.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = exports2.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = exports2.DeleteBucketEncryptionRequestFilterSensitiveLog = exports2.DeleteBucketCorsRequestFilterSensitiveLog = exports2.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = exports2.DeleteBucketRequestFilterSensitiveLog = exports2.CreateMultipartUploadRequestFilterSensitiveLog = exports2.CreateMultipartUploadOutputFilterSensitiveLog = exports2.CreateBucketRequestFilterSensitiveLog = exports2.CreateBucketConfigurationFilterSensitiveLog = exports2.CreateBucketOutputFilterSensitiveLog = exports2.CopyObjectRequestFilterSensitiveLog = exports2.CopyObjectOutputFilterSensitiveLog = exports2.CopyObjectResultFilterSensitiveLog = exports2.CompleteMultipartUploadRequestFilterSensitiveLog = exports2.CompletedMultipartUploadFilterSensitiveLog = exports2.CompletedPartFilterSensitiveLog = exports2.CompleteMultipartUploadOutputFilterSensitiveLog = exports2.AccessControlTranslationFilterSensitiveLog = exports2.AccessControlPolicyFilterSensitiveLog = exports2.OwnerFilterSensitiveLog = exports2.GrantFilterSensitiveLog = exports2.GranteeFilterSensitiveLog = exports2.AccelerateConfigurationFilterSensitiveLog = exports2.AbortMultipartUploadRequestFilterSensitiveLog = exports2.AbortMultipartUploadOutputFilterSensitiveLog = exports2.AbortIncompleteMultipartUploadFilterSensitiveLog = exports2.MFADelete = exports2.ObjectVersionStorageClass = exports2.NoSuchBucket = exports2.ObjectStorageClass = exports2.EncodingType = exports2.ArchiveStatus = exports2.NotFound = exports2.ObjectLockRetentionMode = exports2.ObjectLockEnabled = exports2.ObjectAttributes = exports2.NoSuchKey = exports2.InvalidObjectState = void 0;
    exports2.NoncurrentVersionTransitionFilterSensitiveLog = exports2.NoncurrentVersionExpirationFilterSensitiveLog = exports2.LifecycleRuleFilterFilterSensitiveLog = exports2.LifecycleRuleAndOperatorFilterSensitiveLog = exports2.LifecycleExpirationFilterSensitiveLog = exports2.GetBucketInventoryConfigurationRequestFilterSensitiveLog = exports2.GetBucketInventoryConfigurationOutputFilterSensitiveLog = exports2.InventoryConfigurationFilterSensitiveLog = exports2.InventoryScheduleFilterSensitiveLog = exports2.InventoryFilterFilterSensitiveLog = exports2.InventoryDestinationFilterSensitiveLog = exports2.InventoryS3BucketDestinationFilterSensitiveLog = exports2.InventoryEncryptionFilterSensitiveLog = exports2.SSES3FilterSensitiveLog = exports2.SSEKMSFilterSensitiveLog = exports2.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = exports2.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = exports2.IntelligentTieringConfigurationFilterSensitiveLog = exports2.TieringFilterSensitiveLog = exports2.IntelligentTieringFilterFilterSensitiveLog = exports2.IntelligentTieringAndOperatorFilterSensitiveLog = exports2.GetBucketEncryptionRequestFilterSensitiveLog = exports2.GetBucketEncryptionOutputFilterSensitiveLog = exports2.ServerSideEncryptionConfigurationFilterSensitiveLog = exports2.ServerSideEncryptionRuleFilterSensitiveLog = exports2.ServerSideEncryptionByDefaultFilterSensitiveLog = exports2.GetBucketCorsRequestFilterSensitiveLog = exports2.GetBucketCorsOutputFilterSensitiveLog = exports2.CORSRuleFilterSensitiveLog = exports2.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = exports2.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = exports2.AnalyticsConfigurationFilterSensitiveLog = exports2.StorageClassAnalysisFilterSensitiveLog = exports2.StorageClassAnalysisDataExportFilterSensitiveLog = exports2.AnalyticsExportDestinationFilterSensitiveLog = exports2.AnalyticsS3BucketDestinationFilterSensitiveLog = exports2.AnalyticsFilterFilterSensitiveLog = exports2.AnalyticsAndOperatorFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.GetBucketAclRequestFilterSensitiveLog = exports2.GetBucketAclOutputFilterSensitiveLog = exports2.GetBucketAccelerateConfigurationRequestFilterSensitiveLog = exports2.GetBucketAccelerateConfigurationOutputFilterSensitiveLog = exports2.DeletePublicAccessBlockRequestFilterSensitiveLog = exports2.DeleteObjectTaggingRequestFilterSensitiveLog = exports2.DeleteObjectTaggingOutputFilterSensitiveLog = exports2.DeleteObjectsRequestFilterSensitiveLog = exports2.DeleteFilterSensitiveLog = exports2.ObjectIdentifierFilterSensitiveLog = exports2.DeleteObjectsOutputFilterSensitiveLog = void 0;
    exports2.GetBucketRequestPaymentOutputFilterSensitiveLog = exports2.GetBucketReplicationRequestFilterSensitiveLog = exports2.GetBucketReplicationOutputFilterSensitiveLog = exports2.ReplicationConfigurationFilterSensitiveLog = exports2.ReplicationRuleFilterSensitiveLog = exports2.SourceSelectionCriteriaFilterSensitiveLog = exports2.SseKmsEncryptedObjectsFilterSensitiveLog = exports2.ReplicaModificationsFilterSensitiveLog = exports2.ReplicationRuleFilterFilterSensitiveLog = exports2.ReplicationRuleAndOperatorFilterSensitiveLog = exports2.ExistingObjectReplicationFilterSensitiveLog = exports2.DestinationFilterSensitiveLog = exports2.ReplicationTimeFilterSensitiveLog = exports2.MetricsFilterSensitiveLog = exports2.ReplicationTimeValueFilterSensitiveLog = exports2.EncryptionConfigurationFilterSensitiveLog = exports2.DeleteMarkerReplicationFilterSensitiveLog = exports2.GetBucketPolicyStatusRequestFilterSensitiveLog = exports2.GetBucketPolicyStatusOutputFilterSensitiveLog = exports2.PolicyStatusFilterSensitiveLog = exports2.GetBucketPolicyRequestFilterSensitiveLog = exports2.GetBucketPolicyOutputFilterSensitiveLog = exports2.GetBucketOwnershipControlsRequestFilterSensitiveLog = exports2.GetBucketOwnershipControlsOutputFilterSensitiveLog = exports2.OwnershipControlsFilterSensitiveLog = exports2.OwnershipControlsRuleFilterSensitiveLog = exports2.NotificationConfigurationFilterSensitiveLog = exports2.TopicConfigurationFilterSensitiveLog = exports2.QueueConfigurationFilterSensitiveLog = exports2.LambdaFunctionConfigurationFilterSensitiveLog = exports2.NotificationConfigurationFilterFilterSensitiveLog = exports2.S3KeyFilterFilterSensitiveLog = exports2.FilterRuleFilterSensitiveLog = exports2.EventBridgeConfigurationFilterSensitiveLog = exports2.GetBucketNotificationConfigurationRequestFilterSensitiveLog = exports2.GetBucketMetricsConfigurationRequestFilterSensitiveLog = exports2.GetBucketMetricsConfigurationOutputFilterSensitiveLog = exports2.MetricsConfigurationFilterSensitiveLog = exports2.MetricsFilterFilterSensitiveLog = exports2.MetricsAndOperatorFilterSensitiveLog = exports2.GetBucketLoggingRequestFilterSensitiveLog = exports2.GetBucketLoggingOutputFilterSensitiveLog = exports2.LoggingEnabledFilterSensitiveLog = exports2.TargetGrantFilterSensitiveLog = exports2.GetBucketLocationRequestFilterSensitiveLog = exports2.GetBucketLocationOutputFilterSensitiveLog = exports2.GetBucketLifecycleConfigurationRequestFilterSensitiveLog = exports2.GetBucketLifecycleConfigurationOutputFilterSensitiveLog = exports2.LifecycleRuleFilterSensitiveLog = exports2.TransitionFilterSensitiveLog = void 0;
    exports2.ListBucketMetricsConfigurationsOutputFilterSensitiveLog = exports2.ListBucketInventoryConfigurationsRequestFilterSensitiveLog = exports2.ListBucketInventoryConfigurationsOutputFilterSensitiveLog = exports2.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = exports2.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = exports2.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = exports2.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = exports2.HeadObjectRequestFilterSensitiveLog = exports2.HeadObjectOutputFilterSensitiveLog = exports2.HeadBucketRequestFilterSensitiveLog = exports2.GetPublicAccessBlockRequestFilterSensitiveLog = exports2.GetPublicAccessBlockOutputFilterSensitiveLog = exports2.PublicAccessBlockConfigurationFilterSensitiveLog = exports2.GetObjectTorrentRequestFilterSensitiveLog = exports2.GetObjectTorrentOutputFilterSensitiveLog = exports2.GetObjectTaggingRequestFilterSensitiveLog = exports2.GetObjectTaggingOutputFilterSensitiveLog = exports2.GetObjectRetentionRequestFilterSensitiveLog = exports2.GetObjectRetentionOutputFilterSensitiveLog = exports2.ObjectLockRetentionFilterSensitiveLog = exports2.GetObjectLockConfigurationRequestFilterSensitiveLog = exports2.GetObjectLockConfigurationOutputFilterSensitiveLog = exports2.ObjectLockConfigurationFilterSensitiveLog = exports2.ObjectLockRuleFilterSensitiveLog = exports2.DefaultRetentionFilterSensitiveLog = exports2.GetObjectLegalHoldRequestFilterSensitiveLog = exports2.GetObjectLegalHoldOutputFilterSensitiveLog = exports2.ObjectLockLegalHoldFilterSensitiveLog = exports2.GetObjectAttributesRequestFilterSensitiveLog = exports2.GetObjectAttributesOutputFilterSensitiveLog = exports2.GetObjectAttributesPartsFilterSensitiveLog = exports2.ObjectPartFilterSensitiveLog = exports2.ChecksumFilterSensitiveLog = exports2.GetObjectAclRequestFilterSensitiveLog = exports2.GetObjectAclOutputFilterSensitiveLog = exports2.GetObjectRequestFilterSensitiveLog = exports2.GetObjectOutputFilterSensitiveLog = exports2.GetBucketWebsiteRequestFilterSensitiveLog = exports2.GetBucketWebsiteOutputFilterSensitiveLog = exports2.RoutingRuleFilterSensitiveLog = exports2.RedirectFilterSensitiveLog = exports2.ConditionFilterSensitiveLog = exports2.RedirectAllRequestsToFilterSensitiveLog = exports2.IndexDocumentFilterSensitiveLog = exports2.ErrorDocumentFilterSensitiveLog = exports2.GetBucketVersioningRequestFilterSensitiveLog = exports2.GetBucketVersioningOutputFilterSensitiveLog = exports2.GetBucketTaggingRequestFilterSensitiveLog = exports2.GetBucketTaggingOutputFilterSensitiveLog = exports2.GetBucketRequestPaymentRequestFilterSensitiveLog = void 0;
    exports2.PutObjectLegalHoldOutputFilterSensitiveLog = exports2.PutObjectAclRequestFilterSensitiveLog = exports2.PutObjectAclOutputFilterSensitiveLog = exports2.PutObjectRequestFilterSensitiveLog = exports2.PutObjectOutputFilterSensitiveLog = exports2.PutBucketWebsiteRequestFilterSensitiveLog = exports2.WebsiteConfigurationFilterSensitiveLog = exports2.PutBucketVersioningRequestFilterSensitiveLog = exports2.VersioningConfigurationFilterSensitiveLog = exports2.PutBucketTaggingRequestFilterSensitiveLog = exports2.TaggingFilterSensitiveLog = exports2.PutBucketRequestPaymentRequestFilterSensitiveLog = exports2.RequestPaymentConfigurationFilterSensitiveLog = exports2.PutBucketReplicationRequestFilterSensitiveLog = exports2.PutBucketPolicyRequestFilterSensitiveLog = exports2.PutBucketOwnershipControlsRequestFilterSensitiveLog = exports2.PutBucketNotificationConfigurationRequestFilterSensitiveLog = exports2.PutBucketMetricsConfigurationRequestFilterSensitiveLog = exports2.PutBucketLoggingRequestFilterSensitiveLog = exports2.BucketLoggingStatusFilterSensitiveLog = exports2.PutBucketLifecycleConfigurationRequestFilterSensitiveLog = exports2.BucketLifecycleConfigurationFilterSensitiveLog = exports2.PutBucketInventoryConfigurationRequestFilterSensitiveLog = exports2.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = exports2.PutBucketEncryptionRequestFilterSensitiveLog = exports2.PutBucketCorsRequestFilterSensitiveLog = exports2.CORSConfigurationFilterSensitiveLog = exports2.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = exports2.PutBucketAclRequestFilterSensitiveLog = exports2.PutBucketAccelerateConfigurationRequestFilterSensitiveLog = exports2.ListPartsRequestFilterSensitiveLog = exports2.ListPartsOutputFilterSensitiveLog = exports2.PartFilterSensitiveLog = exports2.ListObjectVersionsRequestFilterSensitiveLog = exports2.ListObjectVersionsOutputFilterSensitiveLog = exports2.ObjectVersionFilterSensitiveLog = exports2.DeleteMarkerEntryFilterSensitiveLog = exports2.ListObjectsV2RequestFilterSensitiveLog = exports2.ListObjectsV2OutputFilterSensitiveLog = exports2.ListObjectsRequestFilterSensitiveLog = exports2.ListObjectsOutputFilterSensitiveLog = exports2._ObjectFilterSensitiveLog = exports2.ListMultipartUploadsRequestFilterSensitiveLog = exports2.ListMultipartUploadsOutputFilterSensitiveLog = exports2.MultipartUploadFilterSensitiveLog = exports2.InitiatorFilterSensitiveLog = exports2.CommonPrefixFilterSensitiveLog = exports2.ListBucketsOutputFilterSensitiveLog = exports2.BucketFilterSensitiveLog = exports2.ListBucketMetricsConfigurationsRequestFilterSensitiveLog = void 0;
    exports2.PutObjectLockConfigurationRequestFilterSensitiveLog = exports2.PutObjectLockConfigurationOutputFilterSensitiveLog = exports2.PutObjectLegalHoldRequestFilterSensitiveLog = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var S3ServiceException_1 = require_S3ServiceException();
    var RequestCharged;
    (function(RequestCharged2) {
      RequestCharged2["requester"] = "requester";
    })(RequestCharged = exports2.RequestCharged || (exports2.RequestCharged = {}));
    var RequestPayer;
    (function(RequestPayer2) {
      RequestPayer2["requester"] = "requester";
    })(RequestPayer = exports2.RequestPayer || (exports2.RequestPayer = {}));
    var NoSuchUpload = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchUpload",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchUpload";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchUpload.prototype);
      }
    };
    exports2.NoSuchUpload = NoSuchUpload;
    var BucketAccelerateStatus;
    (function(BucketAccelerateStatus2) {
      BucketAccelerateStatus2["Enabled"] = "Enabled";
      BucketAccelerateStatus2["Suspended"] = "Suspended";
    })(BucketAccelerateStatus = exports2.BucketAccelerateStatus || (exports2.BucketAccelerateStatus = {}));
    var Type;
    (function(Type2) {
      Type2["AmazonCustomerByEmail"] = "AmazonCustomerByEmail";
      Type2["CanonicalUser"] = "CanonicalUser";
      Type2["Group"] = "Group";
    })(Type = exports2.Type || (exports2.Type = {}));
    var Permission;
    (function(Permission2) {
      Permission2["FULL_CONTROL"] = "FULL_CONTROL";
      Permission2["READ"] = "READ";
      Permission2["READ_ACP"] = "READ_ACP";
      Permission2["WRITE"] = "WRITE";
      Permission2["WRITE_ACP"] = "WRITE_ACP";
    })(Permission = exports2.Permission || (exports2.Permission = {}));
    var OwnerOverride;
    (function(OwnerOverride2) {
      OwnerOverride2["Destination"] = "Destination";
    })(OwnerOverride = exports2.OwnerOverride || (exports2.OwnerOverride = {}));
    var ServerSideEncryption;
    (function(ServerSideEncryption2) {
      ServerSideEncryption2["AES256"] = "AES256";
      ServerSideEncryption2["aws_kms"] = "aws:kms";
    })(ServerSideEncryption = exports2.ServerSideEncryption || (exports2.ServerSideEncryption = {}));
    var ObjectCannedACL;
    (function(ObjectCannedACL2) {
      ObjectCannedACL2["authenticated_read"] = "authenticated-read";
      ObjectCannedACL2["aws_exec_read"] = "aws-exec-read";
      ObjectCannedACL2["bucket_owner_full_control"] = "bucket-owner-full-control";
      ObjectCannedACL2["bucket_owner_read"] = "bucket-owner-read";
      ObjectCannedACL2["private"] = "private";
      ObjectCannedACL2["public_read"] = "public-read";
      ObjectCannedACL2["public_read_write"] = "public-read-write";
    })(ObjectCannedACL = exports2.ObjectCannedACL || (exports2.ObjectCannedACL = {}));
    var ChecksumAlgorithm;
    (function(ChecksumAlgorithm2) {
      ChecksumAlgorithm2["CRC32"] = "CRC32";
      ChecksumAlgorithm2["CRC32C"] = "CRC32C";
      ChecksumAlgorithm2["SHA1"] = "SHA1";
      ChecksumAlgorithm2["SHA256"] = "SHA256";
    })(ChecksumAlgorithm = exports2.ChecksumAlgorithm || (exports2.ChecksumAlgorithm = {}));
    var MetadataDirective;
    (function(MetadataDirective2) {
      MetadataDirective2["COPY"] = "COPY";
      MetadataDirective2["REPLACE"] = "REPLACE";
    })(MetadataDirective = exports2.MetadataDirective || (exports2.MetadataDirective = {}));
    var ObjectLockLegalHoldStatus;
    (function(ObjectLockLegalHoldStatus2) {
      ObjectLockLegalHoldStatus2["OFF"] = "OFF";
      ObjectLockLegalHoldStatus2["ON"] = "ON";
    })(ObjectLockLegalHoldStatus = exports2.ObjectLockLegalHoldStatus || (exports2.ObjectLockLegalHoldStatus = {}));
    var ObjectLockMode;
    (function(ObjectLockMode2) {
      ObjectLockMode2["COMPLIANCE"] = "COMPLIANCE";
      ObjectLockMode2["GOVERNANCE"] = "GOVERNANCE";
    })(ObjectLockMode = exports2.ObjectLockMode || (exports2.ObjectLockMode = {}));
    var StorageClass;
    (function(StorageClass2) {
      StorageClass2["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
      StorageClass2["GLACIER"] = "GLACIER";
      StorageClass2["GLACIER_IR"] = "GLACIER_IR";
      StorageClass2["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
      StorageClass2["ONEZONE_IA"] = "ONEZONE_IA";
      StorageClass2["OUTPOSTS"] = "OUTPOSTS";
      StorageClass2["REDUCED_REDUNDANCY"] = "REDUCED_REDUNDANCY";
      StorageClass2["STANDARD"] = "STANDARD";
      StorageClass2["STANDARD_IA"] = "STANDARD_IA";
    })(StorageClass = exports2.StorageClass || (exports2.StorageClass = {}));
    var TaggingDirective;
    (function(TaggingDirective2) {
      TaggingDirective2["COPY"] = "COPY";
      TaggingDirective2["REPLACE"] = "REPLACE";
    })(TaggingDirective = exports2.TaggingDirective || (exports2.TaggingDirective = {}));
    var ObjectNotInActiveTierError = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "ObjectNotInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectNotInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectNotInActiveTierError.prototype);
      }
    };
    exports2.ObjectNotInActiveTierError = ObjectNotInActiveTierError;
    var BucketAlreadyExists = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "BucketAlreadyExists",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyExists";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyExists.prototype);
      }
    };
    exports2.BucketAlreadyExists = BucketAlreadyExists;
    var BucketAlreadyOwnedByYou = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "BucketAlreadyOwnedByYou",
          $fault: "client",
          ...opts
        });
        this.name = "BucketAlreadyOwnedByYou";
        this.$fault = "client";
        Object.setPrototypeOf(this, BucketAlreadyOwnedByYou.prototype);
      }
    };
    exports2.BucketAlreadyOwnedByYou = BucketAlreadyOwnedByYou;
    var BucketCannedACL;
    (function(BucketCannedACL2) {
      BucketCannedACL2["authenticated_read"] = "authenticated-read";
      BucketCannedACL2["private"] = "private";
      BucketCannedACL2["public_read"] = "public-read";
      BucketCannedACL2["public_read_write"] = "public-read-write";
    })(BucketCannedACL = exports2.BucketCannedACL || (exports2.BucketCannedACL = {}));
    var BucketLocationConstraint;
    (function(BucketLocationConstraint2) {
      BucketLocationConstraint2["EU"] = "EU";
      BucketLocationConstraint2["af_south_1"] = "af-south-1";
      BucketLocationConstraint2["ap_east_1"] = "ap-east-1";
      BucketLocationConstraint2["ap_northeast_1"] = "ap-northeast-1";
      BucketLocationConstraint2["ap_northeast_2"] = "ap-northeast-2";
      BucketLocationConstraint2["ap_northeast_3"] = "ap-northeast-3";
      BucketLocationConstraint2["ap_south_1"] = "ap-south-1";
      BucketLocationConstraint2["ap_southeast_1"] = "ap-southeast-1";
      BucketLocationConstraint2["ap_southeast_2"] = "ap-southeast-2";
      BucketLocationConstraint2["ap_southeast_3"] = "ap-southeast-3";
      BucketLocationConstraint2["ca_central_1"] = "ca-central-1";
      BucketLocationConstraint2["cn_north_1"] = "cn-north-1";
      BucketLocationConstraint2["cn_northwest_1"] = "cn-northwest-1";
      BucketLocationConstraint2["eu_central_1"] = "eu-central-1";
      BucketLocationConstraint2["eu_north_1"] = "eu-north-1";
      BucketLocationConstraint2["eu_south_1"] = "eu-south-1";
      BucketLocationConstraint2["eu_west_1"] = "eu-west-1";
      BucketLocationConstraint2["eu_west_2"] = "eu-west-2";
      BucketLocationConstraint2["eu_west_3"] = "eu-west-3";
      BucketLocationConstraint2["me_south_1"] = "me-south-1";
      BucketLocationConstraint2["sa_east_1"] = "sa-east-1";
      BucketLocationConstraint2["us_east_2"] = "us-east-2";
      BucketLocationConstraint2["us_gov_east_1"] = "us-gov-east-1";
      BucketLocationConstraint2["us_gov_west_1"] = "us-gov-west-1";
      BucketLocationConstraint2["us_west_1"] = "us-west-1";
      BucketLocationConstraint2["us_west_2"] = "us-west-2";
    })(BucketLocationConstraint = exports2.BucketLocationConstraint || (exports2.BucketLocationConstraint = {}));
    var ObjectOwnership;
    (function(ObjectOwnership2) {
      ObjectOwnership2["BucketOwnerEnforced"] = "BucketOwnerEnforced";
      ObjectOwnership2["BucketOwnerPreferred"] = "BucketOwnerPreferred";
      ObjectOwnership2["ObjectWriter"] = "ObjectWriter";
    })(ObjectOwnership = exports2.ObjectOwnership || (exports2.ObjectOwnership = {}));
    var AnalyticsFilter;
    (function(AnalyticsFilter2) {
      AnalyticsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(AnalyticsFilter = exports2.AnalyticsFilter || (exports2.AnalyticsFilter = {}));
    var AnalyticsS3ExportFileFormat;
    (function(AnalyticsS3ExportFileFormat2) {
      AnalyticsS3ExportFileFormat2["CSV"] = "CSV";
    })(AnalyticsS3ExportFileFormat = exports2.AnalyticsS3ExportFileFormat || (exports2.AnalyticsS3ExportFileFormat = {}));
    var StorageClassAnalysisSchemaVersion;
    (function(StorageClassAnalysisSchemaVersion2) {
      StorageClassAnalysisSchemaVersion2["V_1"] = "V_1";
    })(StorageClassAnalysisSchemaVersion = exports2.StorageClassAnalysisSchemaVersion || (exports2.StorageClassAnalysisSchemaVersion = {}));
    var IntelligentTieringStatus;
    (function(IntelligentTieringStatus2) {
      IntelligentTieringStatus2["Disabled"] = "Disabled";
      IntelligentTieringStatus2["Enabled"] = "Enabled";
    })(IntelligentTieringStatus = exports2.IntelligentTieringStatus || (exports2.IntelligentTieringStatus = {}));
    var IntelligentTieringAccessTier;
    (function(IntelligentTieringAccessTier2) {
      IntelligentTieringAccessTier2["ARCHIVE_ACCESS"] = "ARCHIVE_ACCESS";
      IntelligentTieringAccessTier2["DEEP_ARCHIVE_ACCESS"] = "DEEP_ARCHIVE_ACCESS";
    })(IntelligentTieringAccessTier = exports2.IntelligentTieringAccessTier || (exports2.IntelligentTieringAccessTier = {}));
    var InventoryFormat;
    (function(InventoryFormat2) {
      InventoryFormat2["CSV"] = "CSV";
      InventoryFormat2["ORC"] = "ORC";
      InventoryFormat2["Parquet"] = "Parquet";
    })(InventoryFormat = exports2.InventoryFormat || (exports2.InventoryFormat = {}));
    var InventoryIncludedObjectVersions;
    (function(InventoryIncludedObjectVersions2) {
      InventoryIncludedObjectVersions2["All"] = "All";
      InventoryIncludedObjectVersions2["Current"] = "Current";
    })(InventoryIncludedObjectVersions = exports2.InventoryIncludedObjectVersions || (exports2.InventoryIncludedObjectVersions = {}));
    var InventoryOptionalField;
    (function(InventoryOptionalField2) {
      InventoryOptionalField2["BucketKeyStatus"] = "BucketKeyStatus";
      InventoryOptionalField2["ChecksumAlgorithm"] = "ChecksumAlgorithm";
      InventoryOptionalField2["ETag"] = "ETag";
      InventoryOptionalField2["EncryptionStatus"] = "EncryptionStatus";
      InventoryOptionalField2["IntelligentTieringAccessTier"] = "IntelligentTieringAccessTier";
      InventoryOptionalField2["IsMultipartUploaded"] = "IsMultipartUploaded";
      InventoryOptionalField2["LastModifiedDate"] = "LastModifiedDate";
      InventoryOptionalField2["ObjectLockLegalHoldStatus"] = "ObjectLockLegalHoldStatus";
      InventoryOptionalField2["ObjectLockMode"] = "ObjectLockMode";
      InventoryOptionalField2["ObjectLockRetainUntilDate"] = "ObjectLockRetainUntilDate";
      InventoryOptionalField2["ReplicationStatus"] = "ReplicationStatus";
      InventoryOptionalField2["Size"] = "Size";
      InventoryOptionalField2["StorageClass"] = "StorageClass";
    })(InventoryOptionalField = exports2.InventoryOptionalField || (exports2.InventoryOptionalField = {}));
    var InventoryFrequency;
    (function(InventoryFrequency2) {
      InventoryFrequency2["Daily"] = "Daily";
      InventoryFrequency2["Weekly"] = "Weekly";
    })(InventoryFrequency = exports2.InventoryFrequency || (exports2.InventoryFrequency = {}));
    var LifecycleRuleFilter;
    (function(LifecycleRuleFilter2) {
      LifecycleRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.ObjectSizeGreaterThan !== void 0)
          return visitor.ObjectSizeGreaterThan(value.ObjectSizeGreaterThan);
        if (value.ObjectSizeLessThan !== void 0)
          return visitor.ObjectSizeLessThan(value.ObjectSizeLessThan);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(LifecycleRuleFilter = exports2.LifecycleRuleFilter || (exports2.LifecycleRuleFilter = {}));
    var TransitionStorageClass;
    (function(TransitionStorageClass2) {
      TransitionStorageClass2["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
      TransitionStorageClass2["GLACIER"] = "GLACIER";
      TransitionStorageClass2["GLACIER_IR"] = "GLACIER_IR";
      TransitionStorageClass2["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
      TransitionStorageClass2["ONEZONE_IA"] = "ONEZONE_IA";
      TransitionStorageClass2["STANDARD_IA"] = "STANDARD_IA";
    })(TransitionStorageClass = exports2.TransitionStorageClass || (exports2.TransitionStorageClass = {}));
    var ExpirationStatus;
    (function(ExpirationStatus2) {
      ExpirationStatus2["Disabled"] = "Disabled";
      ExpirationStatus2["Enabled"] = "Enabled";
    })(ExpirationStatus = exports2.ExpirationStatus || (exports2.ExpirationStatus = {}));
    var BucketLogsPermission;
    (function(BucketLogsPermission2) {
      BucketLogsPermission2["FULL_CONTROL"] = "FULL_CONTROL";
      BucketLogsPermission2["READ"] = "READ";
      BucketLogsPermission2["WRITE"] = "WRITE";
    })(BucketLogsPermission = exports2.BucketLogsPermission || (exports2.BucketLogsPermission = {}));
    var MetricsFilter;
    (function(MetricsFilter2) {
      MetricsFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.AccessPointArn !== void 0)
          return visitor.AccessPointArn(value.AccessPointArn);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(MetricsFilter = exports2.MetricsFilter || (exports2.MetricsFilter = {}));
    var FilterRuleName;
    (function(FilterRuleName2) {
      FilterRuleName2["prefix"] = "prefix";
      FilterRuleName2["suffix"] = "suffix";
    })(FilterRuleName = exports2.FilterRuleName || (exports2.FilterRuleName = {}));
    var DeleteMarkerReplicationStatus;
    (function(DeleteMarkerReplicationStatus2) {
      DeleteMarkerReplicationStatus2["Disabled"] = "Disabled";
      DeleteMarkerReplicationStatus2["Enabled"] = "Enabled";
    })(DeleteMarkerReplicationStatus = exports2.DeleteMarkerReplicationStatus || (exports2.DeleteMarkerReplicationStatus = {}));
    var MetricsStatus;
    (function(MetricsStatus2) {
      MetricsStatus2["Disabled"] = "Disabled";
      MetricsStatus2["Enabled"] = "Enabled";
    })(MetricsStatus = exports2.MetricsStatus || (exports2.MetricsStatus = {}));
    var ReplicationTimeStatus;
    (function(ReplicationTimeStatus2) {
      ReplicationTimeStatus2["Disabled"] = "Disabled";
      ReplicationTimeStatus2["Enabled"] = "Enabled";
    })(ReplicationTimeStatus = exports2.ReplicationTimeStatus || (exports2.ReplicationTimeStatus = {}));
    var ExistingObjectReplicationStatus;
    (function(ExistingObjectReplicationStatus2) {
      ExistingObjectReplicationStatus2["Disabled"] = "Disabled";
      ExistingObjectReplicationStatus2["Enabled"] = "Enabled";
    })(ExistingObjectReplicationStatus = exports2.ExistingObjectReplicationStatus || (exports2.ExistingObjectReplicationStatus = {}));
    var ReplicationRuleFilter;
    (function(ReplicationRuleFilter2) {
      ReplicationRuleFilter2.visit = (value, visitor) => {
        if (value.Prefix !== void 0)
          return visitor.Prefix(value.Prefix);
        if (value.Tag !== void 0)
          return visitor.Tag(value.Tag);
        if (value.And !== void 0)
          return visitor.And(value.And);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(ReplicationRuleFilter = exports2.ReplicationRuleFilter || (exports2.ReplicationRuleFilter = {}));
    var ReplicaModificationsStatus;
    (function(ReplicaModificationsStatus2) {
      ReplicaModificationsStatus2["Disabled"] = "Disabled";
      ReplicaModificationsStatus2["Enabled"] = "Enabled";
    })(ReplicaModificationsStatus = exports2.ReplicaModificationsStatus || (exports2.ReplicaModificationsStatus = {}));
    var SseKmsEncryptedObjectsStatus;
    (function(SseKmsEncryptedObjectsStatus2) {
      SseKmsEncryptedObjectsStatus2["Disabled"] = "Disabled";
      SseKmsEncryptedObjectsStatus2["Enabled"] = "Enabled";
    })(SseKmsEncryptedObjectsStatus = exports2.SseKmsEncryptedObjectsStatus || (exports2.SseKmsEncryptedObjectsStatus = {}));
    var ReplicationRuleStatus;
    (function(ReplicationRuleStatus2) {
      ReplicationRuleStatus2["Disabled"] = "Disabled";
      ReplicationRuleStatus2["Enabled"] = "Enabled";
    })(ReplicationRuleStatus = exports2.ReplicationRuleStatus || (exports2.ReplicationRuleStatus = {}));
    var Payer;
    (function(Payer2) {
      Payer2["BucketOwner"] = "BucketOwner";
      Payer2["Requester"] = "Requester";
    })(Payer = exports2.Payer || (exports2.Payer = {}));
    var MFADeleteStatus;
    (function(MFADeleteStatus2) {
      MFADeleteStatus2["Disabled"] = "Disabled";
      MFADeleteStatus2["Enabled"] = "Enabled";
    })(MFADeleteStatus = exports2.MFADeleteStatus || (exports2.MFADeleteStatus = {}));
    var BucketVersioningStatus;
    (function(BucketVersioningStatus2) {
      BucketVersioningStatus2["Enabled"] = "Enabled";
      BucketVersioningStatus2["Suspended"] = "Suspended";
    })(BucketVersioningStatus = exports2.BucketVersioningStatus || (exports2.BucketVersioningStatus = {}));
    var Protocol;
    (function(Protocol2) {
      Protocol2["http"] = "http";
      Protocol2["https"] = "https";
    })(Protocol = exports2.Protocol || (exports2.Protocol = {}));
    var ReplicationStatus;
    (function(ReplicationStatus2) {
      ReplicationStatus2["COMPLETE"] = "COMPLETE";
      ReplicationStatus2["FAILED"] = "FAILED";
      ReplicationStatus2["PENDING"] = "PENDING";
      ReplicationStatus2["REPLICA"] = "REPLICA";
    })(ReplicationStatus = exports2.ReplicationStatus || (exports2.ReplicationStatus = {}));
    var ChecksumMode;
    (function(ChecksumMode2) {
      ChecksumMode2["ENABLED"] = "ENABLED";
    })(ChecksumMode = exports2.ChecksumMode || (exports2.ChecksumMode = {}));
    var InvalidObjectState = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "InvalidObjectState",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidObjectState";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidObjectState.prototype);
        this.StorageClass = opts.StorageClass;
        this.AccessTier = opts.AccessTier;
      }
    };
    exports2.InvalidObjectState = InvalidObjectState;
    var NoSuchKey = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchKey",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchKey";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchKey.prototype);
      }
    };
    exports2.NoSuchKey = NoSuchKey;
    var ObjectAttributes;
    (function(ObjectAttributes2) {
      ObjectAttributes2["CHECKSUM"] = "Checksum";
      ObjectAttributes2["ETAG"] = "ETag";
      ObjectAttributes2["OBJECT_PARTS"] = "ObjectParts";
      ObjectAttributes2["OBJECT_SIZE"] = "ObjectSize";
      ObjectAttributes2["STORAGE_CLASS"] = "StorageClass";
    })(ObjectAttributes = exports2.ObjectAttributes || (exports2.ObjectAttributes = {}));
    var ObjectLockEnabled;
    (function(ObjectLockEnabled2) {
      ObjectLockEnabled2["Enabled"] = "Enabled";
    })(ObjectLockEnabled = exports2.ObjectLockEnabled || (exports2.ObjectLockEnabled = {}));
    var ObjectLockRetentionMode;
    (function(ObjectLockRetentionMode2) {
      ObjectLockRetentionMode2["COMPLIANCE"] = "COMPLIANCE";
      ObjectLockRetentionMode2["GOVERNANCE"] = "GOVERNANCE";
    })(ObjectLockRetentionMode = exports2.ObjectLockRetentionMode || (exports2.ObjectLockRetentionMode = {}));
    var NotFound = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NotFound",
          $fault: "client",
          ...opts
        });
        this.name = "NotFound";
        this.$fault = "client";
        Object.setPrototypeOf(this, NotFound.prototype);
      }
    };
    exports2.NotFound = NotFound;
    var ArchiveStatus;
    (function(ArchiveStatus2) {
      ArchiveStatus2["ARCHIVE_ACCESS"] = "ARCHIVE_ACCESS";
      ArchiveStatus2["DEEP_ARCHIVE_ACCESS"] = "DEEP_ARCHIVE_ACCESS";
    })(ArchiveStatus = exports2.ArchiveStatus || (exports2.ArchiveStatus = {}));
    var EncodingType;
    (function(EncodingType2) {
      EncodingType2["url"] = "url";
    })(EncodingType = exports2.EncodingType || (exports2.EncodingType = {}));
    var ObjectStorageClass;
    (function(ObjectStorageClass2) {
      ObjectStorageClass2["DEEP_ARCHIVE"] = "DEEP_ARCHIVE";
      ObjectStorageClass2["GLACIER"] = "GLACIER";
      ObjectStorageClass2["GLACIER_IR"] = "GLACIER_IR";
      ObjectStorageClass2["INTELLIGENT_TIERING"] = "INTELLIGENT_TIERING";
      ObjectStorageClass2["ONEZONE_IA"] = "ONEZONE_IA";
      ObjectStorageClass2["OUTPOSTS"] = "OUTPOSTS";
      ObjectStorageClass2["REDUCED_REDUNDANCY"] = "REDUCED_REDUNDANCY";
      ObjectStorageClass2["STANDARD"] = "STANDARD";
      ObjectStorageClass2["STANDARD_IA"] = "STANDARD_IA";
    })(ObjectStorageClass = exports2.ObjectStorageClass || (exports2.ObjectStorageClass = {}));
    var NoSuchBucket = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "NoSuchBucket",
          $fault: "client",
          ...opts
        });
        this.name = "NoSuchBucket";
        this.$fault = "client";
        Object.setPrototypeOf(this, NoSuchBucket.prototype);
      }
    };
    exports2.NoSuchBucket = NoSuchBucket;
    var ObjectVersionStorageClass;
    (function(ObjectVersionStorageClass2) {
      ObjectVersionStorageClass2["STANDARD"] = "STANDARD";
    })(ObjectVersionStorageClass = exports2.ObjectVersionStorageClass || (exports2.ObjectVersionStorageClass = {}));
    var MFADelete;
    (function(MFADelete2) {
      MFADelete2["Disabled"] = "Disabled";
      MFADelete2["Enabled"] = "Enabled";
    })(MFADelete = exports2.MFADelete || (exports2.MFADelete = {}));
    var AbortIncompleteMultipartUploadFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AbortIncompleteMultipartUploadFilterSensitiveLog = AbortIncompleteMultipartUploadFilterSensitiveLog;
    var AbortMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AbortMultipartUploadOutputFilterSensitiveLog = AbortMultipartUploadOutputFilterSensitiveLog;
    var AbortMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AbortMultipartUploadRequestFilterSensitiveLog = AbortMultipartUploadRequestFilterSensitiveLog;
    var AccelerateConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccelerateConfigurationFilterSensitiveLog = AccelerateConfigurationFilterSensitiveLog;
    var GranteeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GranteeFilterSensitiveLog = GranteeFilterSensitiveLog;
    var GrantFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GrantFilterSensitiveLog = GrantFilterSensitiveLog;
    var OwnerFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OwnerFilterSensitiveLog = OwnerFilterSensitiveLog;
    var AccessControlPolicyFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccessControlPolicyFilterSensitiveLog = AccessControlPolicyFilterSensitiveLog;
    var AccessControlTranslationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccessControlTranslationFilterSensitiveLog = AccessControlTranslationFilterSensitiveLog;
    var CompleteMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CompleteMultipartUploadOutputFilterSensitiveLog = CompleteMultipartUploadOutputFilterSensitiveLog;
    var CompletedPartFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CompletedPartFilterSensitiveLog = CompletedPartFilterSensitiveLog;
    var CompletedMultipartUploadFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CompletedMultipartUploadFilterSensitiveLog = CompletedMultipartUploadFilterSensitiveLog;
    var CompleteMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CompleteMultipartUploadRequestFilterSensitiveLog = CompleteMultipartUploadRequestFilterSensitiveLog;
    var CopyObjectResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CopyObjectResultFilterSensitiveLog = CopyObjectResultFilterSensitiveLog;
    var CopyObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CopyObjectOutputFilterSensitiveLog = CopyObjectOutputFilterSensitiveLog;
    var CopyObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CopyObjectRequestFilterSensitiveLog = CopyObjectRequestFilterSensitiveLog;
    var CreateBucketOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateBucketOutputFilterSensitiveLog = CreateBucketOutputFilterSensitiveLog;
    var CreateBucketConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateBucketConfigurationFilterSensitiveLog = CreateBucketConfigurationFilterSensitiveLog;
    var CreateBucketRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateBucketRequestFilterSensitiveLog = CreateBucketRequestFilterSensitiveLog;
    var CreateMultipartUploadOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CreateMultipartUploadOutputFilterSensitiveLog = CreateMultipartUploadOutputFilterSensitiveLog;
    var CreateMultipartUploadRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.CreateMultipartUploadRequestFilterSensitiveLog = CreateMultipartUploadRequestFilterSensitiveLog;
    var DeleteBucketRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketRequestFilterSensitiveLog = DeleteBucketRequestFilterSensitiveLog;
    var DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog = DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog;
    var DeleteBucketCorsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketCorsRequestFilterSensitiveLog = DeleteBucketCorsRequestFilterSensitiveLog;
    var DeleteBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketEncryptionRequestFilterSensitiveLog = DeleteBucketEncryptionRequestFilterSensitiveLog;
    var DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog;
    var DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog = DeleteBucketInventoryConfigurationRequestFilterSensitiveLog;
    var DeleteBucketLifecycleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketLifecycleRequestFilterSensitiveLog = DeleteBucketLifecycleRequestFilterSensitiveLog;
    var DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog = DeleteBucketMetricsConfigurationRequestFilterSensitiveLog;
    var DeleteBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketOwnershipControlsRequestFilterSensitiveLog = DeleteBucketOwnershipControlsRequestFilterSensitiveLog;
    var DeleteBucketPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketPolicyRequestFilterSensitiveLog = DeleteBucketPolicyRequestFilterSensitiveLog;
    var DeleteBucketReplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketReplicationRequestFilterSensitiveLog = DeleteBucketReplicationRequestFilterSensitiveLog;
    var DeleteBucketTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketTaggingRequestFilterSensitiveLog = DeleteBucketTaggingRequestFilterSensitiveLog;
    var DeleteBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteBucketWebsiteRequestFilterSensitiveLog = DeleteBucketWebsiteRequestFilterSensitiveLog;
    var DeleteObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectOutputFilterSensitiveLog = DeleteObjectOutputFilterSensitiveLog;
    var DeleteObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectRequestFilterSensitiveLog = DeleteObjectRequestFilterSensitiveLog;
    var DeletedObjectFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeletedObjectFilterSensitiveLog = DeletedObjectFilterSensitiveLog;
    var _ErrorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2._ErrorFilterSensitiveLog = _ErrorFilterSensitiveLog;
    var DeleteObjectsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectsOutputFilterSensitiveLog = DeleteObjectsOutputFilterSensitiveLog;
    var ObjectIdentifierFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectIdentifierFilterSensitiveLog = ObjectIdentifierFilterSensitiveLog;
    var DeleteFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteFilterSensitiveLog = DeleteFilterSensitiveLog;
    var DeleteObjectsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectsRequestFilterSensitiveLog = DeleteObjectsRequestFilterSensitiveLog;
    var DeleteObjectTaggingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectTaggingOutputFilterSensitiveLog = DeleteObjectTaggingOutputFilterSensitiveLog;
    var DeleteObjectTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteObjectTaggingRequestFilterSensitiveLog = DeleteObjectTaggingRequestFilterSensitiveLog;
    var DeletePublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeletePublicAccessBlockRequestFilterSensitiveLog = DeletePublicAccessBlockRequestFilterSensitiveLog;
    var GetBucketAccelerateConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketAccelerateConfigurationOutputFilterSensitiveLog = GetBucketAccelerateConfigurationOutputFilterSensitiveLog;
    var GetBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketAccelerateConfigurationRequestFilterSensitiveLog = GetBucketAccelerateConfigurationRequestFilterSensitiveLog;
    var GetBucketAclOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketAclOutputFilterSensitiveLog = GetBucketAclOutputFilterSensitiveLog;
    var GetBucketAclRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketAclRequestFilterSensitiveLog = GetBucketAclRequestFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AnalyticsAndOperatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AnalyticsAndOperatorFilterSensitiveLog = AnalyticsAndOperatorFilterSensitiveLog;
    var AnalyticsFilterFilterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return { Prefix: obj.Prefix };
      if (obj.Tag !== void 0)
        return { Tag: (0, exports2.TagFilterSensitiveLog)(obj.Tag) };
      if (obj.And !== void 0)
        return { And: (0, exports2.AnalyticsAndOperatorFilterSensitiveLog)(obj.And) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.AnalyticsFilterFilterSensitiveLog = AnalyticsFilterFilterSensitiveLog;
    var AnalyticsS3BucketDestinationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AnalyticsS3BucketDestinationFilterSensitiveLog = AnalyticsS3BucketDestinationFilterSensitiveLog;
    var AnalyticsExportDestinationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AnalyticsExportDestinationFilterSensitiveLog = AnalyticsExportDestinationFilterSensitiveLog;
    var StorageClassAnalysisDataExportFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StorageClassAnalysisDataExportFilterSensitiveLog = StorageClassAnalysisDataExportFilterSensitiveLog;
    var StorageClassAnalysisFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StorageClassAnalysisFilterSensitiveLog = StorageClassAnalysisFilterSensitiveLog;
    var AnalyticsConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && { Filter: (0, exports2.AnalyticsFilterFilterSensitiveLog)(obj.Filter) }
    });
    exports2.AnalyticsConfigurationFilterSensitiveLog = AnalyticsConfigurationFilterSensitiveLog;
    var GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: (0, exports2.AnalyticsConfigurationFilterSensitiveLog)(obj.AnalyticsConfiguration)
      }
    });
    exports2.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog = GetBucketAnalyticsConfigurationOutputFilterSensitiveLog;
    var GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog = GetBucketAnalyticsConfigurationRequestFilterSensitiveLog;
    var CORSRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CORSRuleFilterSensitiveLog = CORSRuleFilterSensitiveLog;
    var GetBucketCorsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketCorsOutputFilterSensitiveLog = GetBucketCorsOutputFilterSensitiveLog;
    var GetBucketCorsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketCorsRequestFilterSensitiveLog = GetBucketCorsRequestFilterSensitiveLog;
    var ServerSideEncryptionByDefaultFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSMasterKeyID && { KMSMasterKeyID: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ServerSideEncryptionByDefaultFilterSensitiveLog = ServerSideEncryptionByDefaultFilterSensitiveLog;
    var ServerSideEncryptionRuleFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ApplyServerSideEncryptionByDefault && {
        ApplyServerSideEncryptionByDefault: (0, exports2.ServerSideEncryptionByDefaultFilterSensitiveLog)(obj.ApplyServerSideEncryptionByDefault)
      }
    });
    exports2.ServerSideEncryptionRuleFilterSensitiveLog = ServerSideEncryptionRuleFilterSensitiveLog;
    var ServerSideEncryptionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => (0, exports2.ServerSideEncryptionRuleFilterSensitiveLog)(item)) }
    });
    exports2.ServerSideEncryptionConfigurationFilterSensitiveLog = ServerSideEncryptionConfigurationFilterSensitiveLog;
    var GetBucketEncryptionOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: (0, exports2.ServerSideEncryptionConfigurationFilterSensitiveLog)(obj.ServerSideEncryptionConfiguration)
      }
    });
    exports2.GetBucketEncryptionOutputFilterSensitiveLog = GetBucketEncryptionOutputFilterSensitiveLog;
    var GetBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketEncryptionRequestFilterSensitiveLog = GetBucketEncryptionRequestFilterSensitiveLog;
    var IntelligentTieringAndOperatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.IntelligentTieringAndOperatorFilterSensitiveLog = IntelligentTieringAndOperatorFilterSensitiveLog;
    var IntelligentTieringFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.IntelligentTieringFilterFilterSensitiveLog = IntelligentTieringFilterFilterSensitiveLog;
    var TieringFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TieringFilterSensitiveLog = TieringFilterSensitiveLog;
    var IntelligentTieringConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.IntelligentTieringConfigurationFilterSensitiveLog = IntelligentTieringConfigurationFilterSensitiveLog;
    var GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog = GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog;
    var GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog;
    var SSEKMSFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KeyId && { KeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.SSEKMSFilterSensitiveLog = SSEKMSFilterSensitiveLog;
    var SSES3FilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SSES3FilterSensitiveLog = SSES3FilterSensitiveLog;
    var InventoryEncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMS && { SSEKMS: (0, exports2.SSEKMSFilterSensitiveLog)(obj.SSEKMS) }
    });
    exports2.InventoryEncryptionFilterSensitiveLog = InventoryEncryptionFilterSensitiveLog;
    var InventoryS3BucketDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: (0, exports2.InventoryEncryptionFilterSensitiveLog)(obj.Encryption) }
    });
    exports2.InventoryS3BucketDestinationFilterSensitiveLog = InventoryS3BucketDestinationFilterSensitiveLog;
    var InventoryDestinationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3BucketDestination && {
        S3BucketDestination: (0, exports2.InventoryS3BucketDestinationFilterSensitiveLog)(obj.S3BucketDestination)
      }
    });
    exports2.InventoryDestinationFilterSensitiveLog = InventoryDestinationFilterSensitiveLog;
    var InventoryFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InventoryFilterFilterSensitiveLog = InventoryFilterFilterSensitiveLog;
    var InventoryScheduleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InventoryScheduleFilterSensitiveLog = InventoryScheduleFilterSensitiveLog;
    var InventoryConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Destination && { Destination: (0, exports2.InventoryDestinationFilterSensitiveLog)(obj.Destination) }
    });
    exports2.InventoryConfigurationFilterSensitiveLog = InventoryConfigurationFilterSensitiveLog;
    var GetBucketInventoryConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: (0, exports2.InventoryConfigurationFilterSensitiveLog)(obj.InventoryConfiguration)
      }
    });
    exports2.GetBucketInventoryConfigurationOutputFilterSensitiveLog = GetBucketInventoryConfigurationOutputFilterSensitiveLog;
    var GetBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketInventoryConfigurationRequestFilterSensitiveLog = GetBucketInventoryConfigurationRequestFilterSensitiveLog;
    var LifecycleExpirationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LifecycleExpirationFilterSensitiveLog = LifecycleExpirationFilterSensitiveLog;
    var LifecycleRuleAndOperatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LifecycleRuleAndOperatorFilterSensitiveLog = LifecycleRuleAndOperatorFilterSensitiveLog;
    var LifecycleRuleFilterFilterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return { Prefix: obj.Prefix };
      if (obj.Tag !== void 0)
        return { Tag: (0, exports2.TagFilterSensitiveLog)(obj.Tag) };
      if (obj.ObjectSizeGreaterThan !== void 0)
        return { ObjectSizeGreaterThan: obj.ObjectSizeGreaterThan };
      if (obj.ObjectSizeLessThan !== void 0)
        return { ObjectSizeLessThan: obj.ObjectSizeLessThan };
      if (obj.And !== void 0)
        return { And: (0, exports2.LifecycleRuleAndOperatorFilterSensitiveLog)(obj.And) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.LifecycleRuleFilterFilterSensitiveLog = LifecycleRuleFilterFilterSensitiveLog;
    var NoncurrentVersionExpirationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.NoncurrentVersionExpirationFilterSensitiveLog = NoncurrentVersionExpirationFilterSensitiveLog;
    var NoncurrentVersionTransitionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.NoncurrentVersionTransitionFilterSensitiveLog = NoncurrentVersionTransitionFilterSensitiveLog;
    var TransitionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TransitionFilterSensitiveLog = TransitionFilterSensitiveLog;
    var LifecycleRuleFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && { Filter: (0, exports2.LifecycleRuleFilterFilterSensitiveLog)(obj.Filter) }
    });
    exports2.LifecycleRuleFilterSensitiveLog = LifecycleRuleFilterSensitiveLog;
    var GetBucketLifecycleConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => (0, exports2.LifecycleRuleFilterSensitiveLog)(item)) }
    });
    exports2.GetBucketLifecycleConfigurationOutputFilterSensitiveLog = GetBucketLifecycleConfigurationOutputFilterSensitiveLog;
    var GetBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketLifecycleConfigurationRequestFilterSensitiveLog = GetBucketLifecycleConfigurationRequestFilterSensitiveLog;
    var GetBucketLocationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketLocationOutputFilterSensitiveLog = GetBucketLocationOutputFilterSensitiveLog;
    var GetBucketLocationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketLocationRequestFilterSensitiveLog = GetBucketLocationRequestFilterSensitiveLog;
    var TargetGrantFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TargetGrantFilterSensitiveLog = TargetGrantFilterSensitiveLog;
    var LoggingEnabledFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LoggingEnabledFilterSensitiveLog = LoggingEnabledFilterSensitiveLog;
    var GetBucketLoggingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketLoggingOutputFilterSensitiveLog = GetBucketLoggingOutputFilterSensitiveLog;
    var GetBucketLoggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketLoggingRequestFilterSensitiveLog = GetBucketLoggingRequestFilterSensitiveLog;
    var MetricsAndOperatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.MetricsAndOperatorFilterSensitiveLog = MetricsAndOperatorFilterSensitiveLog;
    var MetricsFilterFilterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return { Prefix: obj.Prefix };
      if (obj.Tag !== void 0)
        return { Tag: (0, exports2.TagFilterSensitiveLog)(obj.Tag) };
      if (obj.AccessPointArn !== void 0)
        return { AccessPointArn: obj.AccessPointArn };
      if (obj.And !== void 0)
        return { And: (0, exports2.MetricsAndOperatorFilterSensitiveLog)(obj.And) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.MetricsFilterFilterSensitiveLog = MetricsFilterFilterSensitiveLog;
    var MetricsConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && { Filter: (0, exports2.MetricsFilterFilterSensitiveLog)(obj.Filter) }
    });
    exports2.MetricsConfigurationFilterSensitiveLog = MetricsConfigurationFilterSensitiveLog;
    var GetBucketMetricsConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfiguration && {
        MetricsConfiguration: (0, exports2.MetricsConfigurationFilterSensitiveLog)(obj.MetricsConfiguration)
      }
    });
    exports2.GetBucketMetricsConfigurationOutputFilterSensitiveLog = GetBucketMetricsConfigurationOutputFilterSensitiveLog;
    var GetBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketMetricsConfigurationRequestFilterSensitiveLog = GetBucketMetricsConfigurationRequestFilterSensitiveLog;
    var GetBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketNotificationConfigurationRequestFilterSensitiveLog = GetBucketNotificationConfigurationRequestFilterSensitiveLog;
    var EventBridgeConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EventBridgeConfigurationFilterSensitiveLog = EventBridgeConfigurationFilterSensitiveLog;
    var FilterRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FilterRuleFilterSensitiveLog = FilterRuleFilterSensitiveLog;
    var S3KeyFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.S3KeyFilterFilterSensitiveLog = S3KeyFilterFilterSensitiveLog;
    var NotificationConfigurationFilterFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.NotificationConfigurationFilterFilterSensitiveLog = NotificationConfigurationFilterFilterSensitiveLog;
    var LambdaFunctionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.LambdaFunctionConfigurationFilterSensitiveLog = LambdaFunctionConfigurationFilterSensitiveLog;
    var QueueConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.QueueConfigurationFilterSensitiveLog = QueueConfigurationFilterSensitiveLog;
    var TopicConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TopicConfigurationFilterSensitiveLog = TopicConfigurationFilterSensitiveLog;
    var NotificationConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.NotificationConfigurationFilterSensitiveLog = NotificationConfigurationFilterSensitiveLog;
    var OwnershipControlsRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OwnershipControlsRuleFilterSensitiveLog = OwnershipControlsRuleFilterSensitiveLog;
    var OwnershipControlsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OwnershipControlsFilterSensitiveLog = OwnershipControlsFilterSensitiveLog;
    var GetBucketOwnershipControlsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketOwnershipControlsOutputFilterSensitiveLog = GetBucketOwnershipControlsOutputFilterSensitiveLog;
    var GetBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketOwnershipControlsRequestFilterSensitiveLog = GetBucketOwnershipControlsRequestFilterSensitiveLog;
    var GetBucketPolicyOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketPolicyOutputFilterSensitiveLog = GetBucketPolicyOutputFilterSensitiveLog;
    var GetBucketPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketPolicyRequestFilterSensitiveLog = GetBucketPolicyRequestFilterSensitiveLog;
    var PolicyStatusFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PolicyStatusFilterSensitiveLog = PolicyStatusFilterSensitiveLog;
    var GetBucketPolicyStatusOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketPolicyStatusOutputFilterSensitiveLog = GetBucketPolicyStatusOutputFilterSensitiveLog;
    var GetBucketPolicyStatusRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketPolicyStatusRequestFilterSensitiveLog = GetBucketPolicyStatusRequestFilterSensitiveLog;
    var DeleteMarkerReplicationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteMarkerReplicationFilterSensitiveLog = DeleteMarkerReplicationFilterSensitiveLog;
    var EncryptionConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EncryptionConfigurationFilterSensitiveLog = EncryptionConfigurationFilterSensitiveLog;
    var ReplicationTimeValueFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicationTimeValueFilterSensitiveLog = ReplicationTimeValueFilterSensitiveLog;
    var MetricsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.MetricsFilterSensitiveLog = MetricsFilterSensitiveLog;
    var ReplicationTimeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicationTimeFilterSensitiveLog = ReplicationTimeFilterSensitiveLog;
    var DestinationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DestinationFilterSensitiveLog = DestinationFilterSensitiveLog;
    var ExistingObjectReplicationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ExistingObjectReplicationFilterSensitiveLog = ExistingObjectReplicationFilterSensitiveLog;
    var ReplicationRuleAndOperatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicationRuleAndOperatorFilterSensitiveLog = ReplicationRuleAndOperatorFilterSensitiveLog;
    var ReplicationRuleFilterFilterSensitiveLog = (obj) => {
      if (obj.Prefix !== void 0)
        return { Prefix: obj.Prefix };
      if (obj.Tag !== void 0)
        return { Tag: (0, exports2.TagFilterSensitiveLog)(obj.Tag) };
      if (obj.And !== void 0)
        return { And: (0, exports2.ReplicationRuleAndOperatorFilterSensitiveLog)(obj.And) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.ReplicationRuleFilterFilterSensitiveLog = ReplicationRuleFilterFilterSensitiveLog;
    var ReplicaModificationsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ReplicaModificationsFilterSensitiveLog = ReplicaModificationsFilterSensitiveLog;
    var SseKmsEncryptedObjectsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SseKmsEncryptedObjectsFilterSensitiveLog = SseKmsEncryptedObjectsFilterSensitiveLog;
    var SourceSelectionCriteriaFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SourceSelectionCriteriaFilterSensitiveLog = SourceSelectionCriteriaFilterSensitiveLog;
    var ReplicationRuleFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Filter && { Filter: (0, exports2.ReplicationRuleFilterFilterSensitiveLog)(obj.Filter) }
    });
    exports2.ReplicationRuleFilterSensitiveLog = ReplicationRuleFilterSensitiveLog;
    var ReplicationConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => (0, exports2.ReplicationRuleFilterSensitiveLog)(item)) }
    });
    exports2.ReplicationConfigurationFilterSensitiveLog = ReplicationConfigurationFilterSensitiveLog;
    var GetBucketReplicationOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ReplicationConfiguration && {
        ReplicationConfiguration: (0, exports2.ReplicationConfigurationFilterSensitiveLog)(obj.ReplicationConfiguration)
      }
    });
    exports2.GetBucketReplicationOutputFilterSensitiveLog = GetBucketReplicationOutputFilterSensitiveLog;
    var GetBucketReplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketReplicationRequestFilterSensitiveLog = GetBucketReplicationRequestFilterSensitiveLog;
    var GetBucketRequestPaymentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketRequestPaymentOutputFilterSensitiveLog = GetBucketRequestPaymentOutputFilterSensitiveLog;
    var GetBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketRequestPaymentRequestFilterSensitiveLog = GetBucketRequestPaymentRequestFilterSensitiveLog;
    var GetBucketTaggingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketTaggingOutputFilterSensitiveLog = GetBucketTaggingOutputFilterSensitiveLog;
    var GetBucketTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketTaggingRequestFilterSensitiveLog = GetBucketTaggingRequestFilterSensitiveLog;
    var GetBucketVersioningOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketVersioningOutputFilterSensitiveLog = GetBucketVersioningOutputFilterSensitiveLog;
    var GetBucketVersioningRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketVersioningRequestFilterSensitiveLog = GetBucketVersioningRequestFilterSensitiveLog;
    var ErrorDocumentFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ErrorDocumentFilterSensitiveLog = ErrorDocumentFilterSensitiveLog;
    var IndexDocumentFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.IndexDocumentFilterSensitiveLog = IndexDocumentFilterSensitiveLog;
    var RedirectAllRequestsToFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RedirectAllRequestsToFilterSensitiveLog = RedirectAllRequestsToFilterSensitiveLog;
    var ConditionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ConditionFilterSensitiveLog = ConditionFilterSensitiveLog;
    var RedirectFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RedirectFilterSensitiveLog = RedirectFilterSensitiveLog;
    var RoutingRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RoutingRuleFilterSensitiveLog = RoutingRuleFilterSensitiveLog;
    var GetBucketWebsiteOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketWebsiteOutputFilterSensitiveLog = GetBucketWebsiteOutputFilterSensitiveLog;
    var GetBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetBucketWebsiteRequestFilterSensitiveLog = GetBucketWebsiteRequestFilterSensitiveLog;
    var GetObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectOutputFilterSensitiveLog = GetObjectOutputFilterSensitiveLog;
    var GetObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectRequestFilterSensitiveLog = GetObjectRequestFilterSensitiveLog;
    var GetObjectAclOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectAclOutputFilterSensitiveLog = GetObjectAclOutputFilterSensitiveLog;
    var GetObjectAclRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectAclRequestFilterSensitiveLog = GetObjectAclRequestFilterSensitiveLog;
    var ChecksumFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ChecksumFilterSensitiveLog = ChecksumFilterSensitiveLog;
    var ObjectPartFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectPartFilterSensitiveLog = ObjectPartFilterSensitiveLog;
    var GetObjectAttributesPartsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectAttributesPartsFilterSensitiveLog = GetObjectAttributesPartsFilterSensitiveLog;
    var GetObjectAttributesOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectAttributesOutputFilterSensitiveLog = GetObjectAttributesOutputFilterSensitiveLog;
    var GetObjectAttributesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetObjectAttributesRequestFilterSensitiveLog = GetObjectAttributesRequestFilterSensitiveLog;
    var ObjectLockLegalHoldFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectLockLegalHoldFilterSensitiveLog = ObjectLockLegalHoldFilterSensitiveLog;
    var GetObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectLegalHoldOutputFilterSensitiveLog = GetObjectLegalHoldOutputFilterSensitiveLog;
    var GetObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectLegalHoldRequestFilterSensitiveLog = GetObjectLegalHoldRequestFilterSensitiveLog;
    var DefaultRetentionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DefaultRetentionFilterSensitiveLog = DefaultRetentionFilterSensitiveLog;
    var ObjectLockRuleFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectLockRuleFilterSensitiveLog = ObjectLockRuleFilterSensitiveLog;
    var ObjectLockConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectLockConfigurationFilterSensitiveLog = ObjectLockConfigurationFilterSensitiveLog;
    var GetObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectLockConfigurationOutputFilterSensitiveLog = GetObjectLockConfigurationOutputFilterSensitiveLog;
    var GetObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectLockConfigurationRequestFilterSensitiveLog = GetObjectLockConfigurationRequestFilterSensitiveLog;
    var ObjectLockRetentionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectLockRetentionFilterSensitiveLog = ObjectLockRetentionFilterSensitiveLog;
    var GetObjectRetentionOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectRetentionOutputFilterSensitiveLog = GetObjectRetentionOutputFilterSensitiveLog;
    var GetObjectRetentionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectRetentionRequestFilterSensitiveLog = GetObjectRetentionRequestFilterSensitiveLog;
    var GetObjectTaggingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectTaggingOutputFilterSensitiveLog = GetObjectTaggingOutputFilterSensitiveLog;
    var GetObjectTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectTaggingRequestFilterSensitiveLog = GetObjectTaggingRequestFilterSensitiveLog;
    var GetObjectTorrentOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectTorrentOutputFilterSensitiveLog = GetObjectTorrentOutputFilterSensitiveLog;
    var GetObjectTorrentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetObjectTorrentRequestFilterSensitiveLog = GetObjectTorrentRequestFilterSensitiveLog;
    var PublicAccessBlockConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PublicAccessBlockConfigurationFilterSensitiveLog = PublicAccessBlockConfigurationFilterSensitiveLog;
    var GetPublicAccessBlockOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetPublicAccessBlockOutputFilterSensitiveLog = GetPublicAccessBlockOutputFilterSensitiveLog;
    var GetPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetPublicAccessBlockRequestFilterSensitiveLog = GetPublicAccessBlockRequestFilterSensitiveLog;
    var HeadBucketRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.HeadBucketRequestFilterSensitiveLog = HeadBucketRequestFilterSensitiveLog;
    var HeadObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.HeadObjectOutputFilterSensitiveLog = HeadObjectOutputFilterSensitiveLog;
    var HeadObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.HeadObjectRequestFilterSensitiveLog = HeadObjectRequestFilterSensitiveLog;
    var ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfigurationList && {
        AnalyticsConfigurationList: obj.AnalyticsConfigurationList.map((item) => (0, exports2.AnalyticsConfigurationFilterSensitiveLog)(item))
      }
    });
    exports2.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog = ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog;
    var ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog = ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog;
    var ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog = ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog;
    var ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog = ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog;
    var ListBucketInventoryConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfigurationList && {
        InventoryConfigurationList: obj.InventoryConfigurationList.map((item) => (0, exports2.InventoryConfigurationFilterSensitiveLog)(item))
      }
    });
    exports2.ListBucketInventoryConfigurationsOutputFilterSensitiveLog = ListBucketInventoryConfigurationsOutputFilterSensitiveLog;
    var ListBucketInventoryConfigurationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketInventoryConfigurationsRequestFilterSensitiveLog = ListBucketInventoryConfigurationsRequestFilterSensitiveLog;
    var ListBucketMetricsConfigurationsOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfigurationList && {
        MetricsConfigurationList: obj.MetricsConfigurationList.map((item) => (0, exports2.MetricsConfigurationFilterSensitiveLog)(item))
      }
    });
    exports2.ListBucketMetricsConfigurationsOutputFilterSensitiveLog = ListBucketMetricsConfigurationsOutputFilterSensitiveLog;
    var ListBucketMetricsConfigurationsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketMetricsConfigurationsRequestFilterSensitiveLog = ListBucketMetricsConfigurationsRequestFilterSensitiveLog;
    var BucketFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BucketFilterSensitiveLog = BucketFilterSensitiveLog;
    var ListBucketsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListBucketsOutputFilterSensitiveLog = ListBucketsOutputFilterSensitiveLog;
    var CommonPrefixFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CommonPrefixFilterSensitiveLog = CommonPrefixFilterSensitiveLog;
    var InitiatorFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InitiatorFilterSensitiveLog = InitiatorFilterSensitiveLog;
    var MultipartUploadFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.MultipartUploadFilterSensitiveLog = MultipartUploadFilterSensitiveLog;
    var ListMultipartUploadsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListMultipartUploadsOutputFilterSensitiveLog = ListMultipartUploadsOutputFilterSensitiveLog;
    var ListMultipartUploadsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListMultipartUploadsRequestFilterSensitiveLog = ListMultipartUploadsRequestFilterSensitiveLog;
    var _ObjectFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2._ObjectFilterSensitiveLog = _ObjectFilterSensitiveLog;
    var ListObjectsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectsOutputFilterSensitiveLog = ListObjectsOutputFilterSensitiveLog;
    var ListObjectsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectsRequestFilterSensitiveLog = ListObjectsRequestFilterSensitiveLog;
    var ListObjectsV2OutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectsV2OutputFilterSensitiveLog = ListObjectsV2OutputFilterSensitiveLog;
    var ListObjectsV2RequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectsV2RequestFilterSensitiveLog = ListObjectsV2RequestFilterSensitiveLog;
    var DeleteMarkerEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DeleteMarkerEntryFilterSensitiveLog = DeleteMarkerEntryFilterSensitiveLog;
    var ObjectVersionFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ObjectVersionFilterSensitiveLog = ObjectVersionFilterSensitiveLog;
    var ListObjectVersionsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectVersionsOutputFilterSensitiveLog = ListObjectVersionsOutputFilterSensitiveLog;
    var ListObjectVersionsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListObjectVersionsRequestFilterSensitiveLog = ListObjectVersionsRequestFilterSensitiveLog;
    var PartFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PartFilterSensitiveLog = PartFilterSensitiveLog;
    var ListPartsOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListPartsOutputFilterSensitiveLog = ListPartsOutputFilterSensitiveLog;
    var ListPartsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListPartsRequestFilterSensitiveLog = ListPartsRequestFilterSensitiveLog;
    var PutBucketAccelerateConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketAccelerateConfigurationRequestFilterSensitiveLog = PutBucketAccelerateConfigurationRequestFilterSensitiveLog;
    var PutBucketAclRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketAclRequestFilterSensitiveLog = PutBucketAclRequestFilterSensitiveLog;
    var PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.AnalyticsConfiguration && {
        AnalyticsConfiguration: (0, exports2.AnalyticsConfigurationFilterSensitiveLog)(obj.AnalyticsConfiguration)
      }
    });
    exports2.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog = PutBucketAnalyticsConfigurationRequestFilterSensitiveLog;
    var CORSConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CORSConfigurationFilterSensitiveLog = CORSConfigurationFilterSensitiveLog;
    var PutBucketCorsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketCorsRequestFilterSensitiveLog = PutBucketCorsRequestFilterSensitiveLog;
    var PutBucketEncryptionRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ServerSideEncryptionConfiguration && {
        ServerSideEncryptionConfiguration: (0, exports2.ServerSideEncryptionConfigurationFilterSensitiveLog)(obj.ServerSideEncryptionConfiguration)
      }
    });
    exports2.PutBucketEncryptionRequestFilterSensitiveLog = PutBucketEncryptionRequestFilterSensitiveLog;
    var PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog = PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog;
    var PutBucketInventoryConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.InventoryConfiguration && {
        InventoryConfiguration: (0, exports2.InventoryConfigurationFilterSensitiveLog)(obj.InventoryConfiguration)
      }
    });
    exports2.PutBucketInventoryConfigurationRequestFilterSensitiveLog = PutBucketInventoryConfigurationRequestFilterSensitiveLog;
    var BucketLifecycleConfigurationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Rules && { Rules: obj.Rules.map((item) => (0, exports2.LifecycleRuleFilterSensitiveLog)(item)) }
    });
    exports2.BucketLifecycleConfigurationFilterSensitiveLog = BucketLifecycleConfigurationFilterSensitiveLog;
    var PutBucketLifecycleConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.LifecycleConfiguration && {
        LifecycleConfiguration: (0, exports2.BucketLifecycleConfigurationFilterSensitiveLog)(obj.LifecycleConfiguration)
      }
    });
    exports2.PutBucketLifecycleConfigurationRequestFilterSensitiveLog = PutBucketLifecycleConfigurationRequestFilterSensitiveLog;
    var BucketLoggingStatusFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.BucketLoggingStatusFilterSensitiveLog = BucketLoggingStatusFilterSensitiveLog;
    var PutBucketLoggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketLoggingRequestFilterSensitiveLog = PutBucketLoggingRequestFilterSensitiveLog;
    var PutBucketMetricsConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.MetricsConfiguration && {
        MetricsConfiguration: (0, exports2.MetricsConfigurationFilterSensitiveLog)(obj.MetricsConfiguration)
      }
    });
    exports2.PutBucketMetricsConfigurationRequestFilterSensitiveLog = PutBucketMetricsConfigurationRequestFilterSensitiveLog;
    var PutBucketNotificationConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketNotificationConfigurationRequestFilterSensitiveLog = PutBucketNotificationConfigurationRequestFilterSensitiveLog;
    var PutBucketOwnershipControlsRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketOwnershipControlsRequestFilterSensitiveLog = PutBucketOwnershipControlsRequestFilterSensitiveLog;
    var PutBucketPolicyRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketPolicyRequestFilterSensitiveLog = PutBucketPolicyRequestFilterSensitiveLog;
    var PutBucketReplicationRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.ReplicationConfiguration && {
        ReplicationConfiguration: (0, exports2.ReplicationConfigurationFilterSensitiveLog)(obj.ReplicationConfiguration)
      }
    });
    exports2.PutBucketReplicationRequestFilterSensitiveLog = PutBucketReplicationRequestFilterSensitiveLog;
    var RequestPaymentConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RequestPaymentConfigurationFilterSensitiveLog = RequestPaymentConfigurationFilterSensitiveLog;
    var PutBucketRequestPaymentRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketRequestPaymentRequestFilterSensitiveLog = PutBucketRequestPaymentRequestFilterSensitiveLog;
    var TaggingFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TaggingFilterSensitiveLog = TaggingFilterSensitiveLog;
    var PutBucketTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketTaggingRequestFilterSensitiveLog = PutBucketTaggingRequestFilterSensitiveLog;
    var VersioningConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.VersioningConfigurationFilterSensitiveLog = VersioningConfigurationFilterSensitiveLog;
    var PutBucketVersioningRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketVersioningRequestFilterSensitiveLog = PutBucketVersioningRequestFilterSensitiveLog;
    var WebsiteConfigurationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.WebsiteConfigurationFilterSensitiveLog = WebsiteConfigurationFilterSensitiveLog;
    var PutBucketWebsiteRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutBucketWebsiteRequestFilterSensitiveLog = PutBucketWebsiteRequestFilterSensitiveLog;
    var PutObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.PutObjectOutputFilterSensitiveLog = PutObjectOutputFilterSensitiveLog;
    var PutObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING },
      ...obj.SSEKMSEncryptionContext && { SSEKMSEncryptionContext: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.PutObjectRequestFilterSensitiveLog = PutObjectRequestFilterSensitiveLog;
    var PutObjectAclOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectAclOutputFilterSensitiveLog = PutObjectAclOutputFilterSensitiveLog;
    var PutObjectAclRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectAclRequestFilterSensitiveLog = PutObjectAclRequestFilterSensitiveLog;
    var PutObjectLegalHoldOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectLegalHoldOutputFilterSensitiveLog = PutObjectLegalHoldOutputFilterSensitiveLog;
    var PutObjectLegalHoldRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectLegalHoldRequestFilterSensitiveLog = PutObjectLegalHoldRequestFilterSensitiveLog;
    var PutObjectLockConfigurationOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectLockConfigurationOutputFilterSensitiveLog = PutObjectLockConfigurationOutputFilterSensitiveLog;
    var PutObjectLockConfigurationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectLockConfigurationRequestFilterSensitiveLog = PutObjectLockConfigurationRequestFilterSensitiveLog;
  }
});

var require_httpHandler = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/protocol-http/dist-cjs/httpHandler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_httpRequest = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/protocol-http/dist-cjs/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpRequest = void 0;
    var HttpRequest = class {
      constructor(options) {
        this.method = options.method || "GET";
        this.hostname = options.hostname || "localhost";
        this.port = options.port;
        this.query = options.query || {};
        this.headers = options.headers || {};
        this.body = options.body;
        this.protocol = options.protocol ? options.protocol.slice(-1) !== ":" ? `${options.protocol}:` : options.protocol : "https:";
        this.path = options.path ? options.path.charAt(0) !== "/" ? `/${options.path}` : options.path : "/";
      }
      static isInstance(request) {
        if (!request)
          return false;
        const req = request;
        return "method" in req && "protocol" in req && "hostname" in req && "path" in req && typeof req["query"] === "object" && typeof req["headers"] === "object";
      }
      clone() {
        const cloned = new HttpRequest({
          ...this,
          headers: { ...this.headers }
        });
        if (cloned.query)
          cloned.query = cloneQuery(cloned.query);
        return cloned;
      }
    };
    exports2.HttpRequest = HttpRequest;
    function cloneQuery(query) {
      return Object.keys(query).reduce((carry, paramName) => {
        const param = query[paramName];
        return {
          ...carry,
          [paramName]: Array.isArray(param) ? [...param] : param
        };
      }, {});
    }
  }
});

var require_httpResponse = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/protocol-http/dist-cjs/httpResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HttpResponse = void 0;
    var HttpResponse = class {
      constructor(options) {
        this.statusCode = options.statusCode;
        this.headers = options.headers || {};
        this.body = options.body;
      }
      static isInstance(response) {
        if (!response)
          return false;
        const resp = response;
        return typeof resp.statusCode === "number" && typeof resp.headers === "object";
      }
    };
    exports2.HttpResponse = HttpResponse;
  }
});

var require_isValidHostname = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/protocol-http/dist-cjs/isValidHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostname = void 0;
    function isValidHostname(hostname) {
      const hostPattern = /^[a-z0-9][a-z0-9\.\-]*[a-z0-9]$/;
      return hostPattern.test(hostname);
    }
    exports2.isValidHostname = isValidHostname;
  }
});

var require_dist_cjs8 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/protocol-http/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_httpHandler(), exports2);
    tslib_1.__exportStar(require_httpRequest(), exports2);
    tslib_1.__exportStar(require_httpResponse(), exports2);
    tslib_1.__exportStar(require_isValidHostname(), exports2);
  }
});

var require_escape_attribute = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/escape-attribute.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeAttribute = void 0;
    function escapeAttribute(value) {
      return value.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/"/g, "&quot;");
    }
    exports2.escapeAttribute = escapeAttribute;
  }
});

var require_escape_element = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/escape-element.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeElement = void 0;
    function escapeElement(value) {
      return value.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&apos;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#x0D;").replace(/\n/g, "&#x0A;").replace(/\u0085/g, "&#x85;").replace(/\u2028/, "&#x2028;");
    }
    exports2.escapeElement = escapeElement;
  }
});

var require_XmlText = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/XmlText.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.XmlText = void 0;
    var escape_element_1 = require_escape_element();
    var XmlText = class {
      constructor(value) {
        this.value = value;
      }
      toString() {
        return (0, escape_element_1.escapeElement)("" + this.value);
      }
    };
    exports2.XmlText = XmlText;
  }
});

var require_XmlNode = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/XmlNode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.XmlNode = void 0;
    var escape_attribute_1 = require_escape_attribute();
    var XmlText_1 = require_XmlText();
    var XmlNode = class {
      constructor(name, children = []) {
        this.name = name;
        this.children = children;
        this.attributes = {};
      }
      static of(name, childText, withName) {
        const node = new XmlNode(name);
        if (childText !== void 0) {
          node.addChildNode(new XmlText_1.XmlText(childText));
        }
        if (withName !== void 0) {
          node.withName(withName);
        }
        return node;
      }
      withName(name) {
        this.name = name;
        return this;
      }
      addAttribute(name, value) {
        this.attributes[name] = value;
        return this;
      }
      addChildNode(child) {
        this.children.push(child);
        return this;
      }
      removeAttribute(name) {
        delete this.attributes[name];
        return this;
      }
      toString() {
        const hasChildren = Boolean(this.children.length);
        let xmlText = `<${this.name}`;
        const attributes = this.attributes;
        for (const attributeName of Object.keys(attributes)) {
          const attribute = attributes[attributeName];
          if (typeof attribute !== "undefined" && attribute !== null) {
            xmlText += ` ${attributeName}="${(0, escape_attribute_1.escapeAttribute)("" + attribute)}"`;
          }
        }
        return xmlText += !hasChildren ? "/>" : `>${this.children.map((c) => c.toString()).join("")}</${this.name}>`;
      }
    };
    exports2.XmlNode = XmlNode;
  }
});

var require_dist_cjs9 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/xml-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_XmlNode(), exports2);
    tslib_1.__exportStar(require_XmlText(), exports2);
  }
});

var require_util = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/util.js"(exports2) {
    "use strict";
    var nameStartChar = ":A-Za-z_\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
    var nameChar = nameStartChar + "\\-.\\d\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
    var nameRegexp = "[" + nameStartChar + "][" + nameChar + "]*";
    var regexName = new RegExp("^" + nameRegexp + "$");
    var getAllMatches = function(string, regex) {
      const matches = [];
      let match = regex.exec(string);
      while (match) {
        const allmatches = [];
        allmatches.startIndex = regex.lastIndex - match[0].length;
        const len = match.length;
        for (let index = 0; index < len; index++) {
          allmatches.push(match[index]);
        }
        matches.push(allmatches);
        match = regex.exec(string);
      }
      return matches;
    };
    var isName = function(string) {
      const match = regexName.exec(string);
      return !(match === null || typeof match === "undefined");
    };
    exports2.isExist = function(v) {
      return typeof v !== "undefined";
    };
    exports2.isEmptyObject = function(obj) {
      return Object.keys(obj).length === 0;
    };
    exports2.merge = function(target, a, arrayMode) {
      if (a) {
        const keys = Object.keys(a);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          if (arrayMode === "strict") {
            target[keys[i]] = [a[keys[i]]];
          } else {
            target[keys[i]] = a[keys[i]];
          }
        }
      }
    };
    exports2.getValue = function(v) {
      if (exports2.isExist(v)) {
        return v;
      } else {
        return "";
      }
    };
    exports2.isName = isName;
    exports2.getAllMatches = getAllMatches;
    exports2.nameRegexp = nameRegexp;
  }
});

var require_validator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/validator.js"(exports2) {
    "use strict";
    var util = require_util();
    var defaultOptions = {
      allowBooleanAttributes: false,
      //A tag can have attributes without any value
      unpairedTags: []
    };
    exports2.validate = function(xmlData, options) {
      options = Object.assign({}, defaultOptions, options);
      const tags = [];
      let tagFound = false;
      let reachedRoot = false;
      if (xmlData[0] === "\uFEFF") {
        xmlData = xmlData.substr(1);
      }
      for (let i = 0; i < xmlData.length; i++) {
        if (xmlData[i] === "<" && xmlData[i + 1] === "?") {
          i += 2;
          i = readPI(xmlData, i);
          if (i.err)
            return i;
        } else if (xmlData[i] === "<") {
          let tagStartPos = i;
          i++;
          if (xmlData[i] === "!") {
            i = readCommentAndCDATA(xmlData, i);
            continue;
          } else {
            let closingTag = false;
            if (xmlData[i] === "/") {
              closingTag = true;
              i++;
            }
            let tagName = "";
            for (; i < xmlData.length && xmlData[i] !== ">" && xmlData[i] !== " " && xmlData[i] !== "	" && xmlData[i] !== "\n" && xmlData[i] !== "\r"; i++) {
              tagName += xmlData[i];
            }
            tagName = tagName.trim();
            if (tagName[tagName.length - 1] === "/") {
              tagName = tagName.substring(0, tagName.length - 1);
              i--;
            }
            if (!validateTagName(tagName)) {
              let msg;
              if (tagName.trim().length === 0) {
                msg = "Invalid space after '<'.";
              } else {
                msg = "Tag '" + tagName + "' is an invalid name.";
              }
              return getErrorObject("InvalidTag", msg, getLineNumberForPosition(xmlData, i));
            }
            const result = readAttributeStr(xmlData, i);
            if (result === false) {
              return getErrorObject("InvalidAttr", "Attributes for '" + tagName + "' have open quote.", getLineNumberForPosition(xmlData, i));
            }
            let attrStr = result.value;
            i = result.index;
            if (attrStr[attrStr.length - 1] === "/") {
              const attrStrStart = i - attrStr.length;
              attrStr = attrStr.substring(0, attrStr.length - 1);
              const isValid = validateAttributeString(attrStr, options);
              if (isValid === true) {
                tagFound = true;
              } else {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));
              }
            } else if (closingTag) {
              if (!result.tagClosed) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' doesn't have proper closing.", getLineNumberForPosition(xmlData, i));
              } else if (attrStr.trim().length > 0) {
                return getErrorObject("InvalidTag", "Closing tag '" + tagName + "' can't have attributes or invalid starting.", getLineNumberForPosition(xmlData, tagStartPos));
              } else {
                const otg = tags.pop();
                if (tagName !== otg.tagName) {
                  let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);
                  return getErrorObject(
                    "InvalidTag",
                    "Expected closing tag '" + otg.tagName + "' (opened in line " + openPos.line + ", col " + openPos.col + ") instead of closing tag '" + tagName + "'.",
                    getLineNumberForPosition(xmlData, tagStartPos)
                  );
                }
                if (tags.length == 0) {
                  reachedRoot = true;
                }
              }
            } else {
              const isValid = validateAttributeString(attrStr, options);
              if (isValid !== true) {
                return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));
              }
              if (reachedRoot === true) {
                return getErrorObject("InvalidXml", "Multiple possible root nodes found.", getLineNumberForPosition(xmlData, i));
              } else if (options.unpairedTags.indexOf(tagName) !== -1) {
              } else {
                tags.push({ tagName, tagStartPos });
              }
              tagFound = true;
            }
            for (i++; i < xmlData.length; i++) {
              if (xmlData[i] === "<") {
                if (xmlData[i + 1] === "!") {
                  i++;
                  i = readCommentAndCDATA(xmlData, i);
                  continue;
                } else if (xmlData[i + 1] === "?") {
                  i = readPI(xmlData, ++i);
                  if (i.err)
                    return i;
                } else {
                  break;
                }
              } else if (xmlData[i] === "&") {
                const afterAmp = validateAmpersand(xmlData, i);
                if (afterAmp == -1)
                  return getErrorObject("InvalidChar", "char '&' is not expected.", getLineNumberForPosition(xmlData, i));
                i = afterAmp;
              } else {
                if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {
                  return getErrorObject("InvalidXml", "Extra text at the end", getLineNumberForPosition(xmlData, i));
                }
              }
            }
            if (xmlData[i] === "<") {
              i--;
            }
          }
        } else {
          if (isWhiteSpace(xmlData[i])) {
            continue;
          }
          return getErrorObject("InvalidChar", "char '" + xmlData[i] + "' is not expected.", getLineNumberForPosition(xmlData, i));
        }
      }
      if (!tagFound) {
        return getErrorObject("InvalidXml", "Start tag expected.", 1);
      } else if (tags.length == 1) {
        return getErrorObject("InvalidTag", "Unclosed tag '" + tags[0].tagName + "'.", getLineNumberForPosition(xmlData, tags[0].tagStartPos));
      } else if (tags.length > 0) {
        return getErrorObject("InvalidXml", "Invalid '" + JSON.stringify(tags.map((t) => t.tagName), null, 4).replace(/\r?\n/g, "") + "' found.", { line: 1, col: 1 });
      }
      return true;
    };
    function isWhiteSpace(char) {
      return char === " " || char === "	" || char === "\n" || char === "\r";
    }
    function readPI(xmlData, i) {
      const start = i;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] == "?" || xmlData[i] == " ") {
          const tagname = xmlData.substr(start, i - start);
          if (i > 5 && tagname === "xml") {
            return getErrorObject("InvalidXml", "XML declaration allowed only at the start of the document.", getLineNumberForPosition(xmlData, i));
          } else if (xmlData[i] == "?" && xmlData[i + 1] == ">") {
            i++;
            break;
          } else {
            continue;
          }
        }
      }
      return i;
    }
    function readCommentAndCDATA(xmlData, i) {
      if (xmlData.length > i + 5 && xmlData[i + 1] === "-" && xmlData[i + 2] === "-") {
        for (i += 3; i < xmlData.length; i++) {
          if (xmlData[i] === "-" && xmlData[i + 1] === "-" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      } else if (xmlData.length > i + 8 && xmlData[i + 1] === "D" && xmlData[i + 2] === "O" && xmlData[i + 3] === "C" && xmlData[i + 4] === "T" && xmlData[i + 5] === "Y" && xmlData[i + 6] === "P" && xmlData[i + 7] === "E") {
        let angleBracketsCount = 1;
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            angleBracketsCount++;
          } else if (xmlData[i] === ">") {
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          }
        }
      } else if (xmlData.length > i + 9 && xmlData[i + 1] === "[" && xmlData[i + 2] === "C" && xmlData[i + 3] === "D" && xmlData[i + 4] === "A" && xmlData[i + 5] === "T" && xmlData[i + 6] === "A" && xmlData[i + 7] === "[") {
        for (i += 8; i < xmlData.length; i++) {
          if (xmlData[i] === "]" && xmlData[i + 1] === "]" && xmlData[i + 2] === ">") {
            i += 2;
            break;
          }
        }
      }
      return i;
    }
    var doubleQuote = '"';
    var singleQuote = "'";
    function readAttributeStr(xmlData, i) {
      let attrStr = "";
      let startChar = "";
      let tagClosed = false;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {
          if (startChar === "") {
            startChar = xmlData[i];
          } else if (startChar !== xmlData[i]) {
          } else {
            startChar = "";
          }
        } else if (xmlData[i] === ">") {
          if (startChar === "") {
            tagClosed = true;
            break;
          }
        }
        attrStr += xmlData[i];
      }
      if (startChar !== "") {
        return false;
      }
      return {
        value: attrStr,
        index: i,
        tagClosed
      };
    }
    var validAttrStrRegxp = new RegExp(`(\\s*)([^\\s=]+)(\\s*=)?(\\s*(['"])(([\\s\\S])*?)\\5)?`, "g");
    function validateAttributeString(attrStr, options) {
      const matches = util.getAllMatches(attrStr, validAttrStrRegxp);
      const attrNames = {};
      for (let i = 0; i < matches.length; i++) {
        if (matches[i][1].length === 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' has no space in starting.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] !== void 0 && matches[i][4] === void 0) {
          return getErrorObject("InvalidAttr", "Attribute '" + matches[i][2] + "' is without value.", getPositionFromMatch(matches[i]));
        } else if (matches[i][3] === void 0 && !options.allowBooleanAttributes) {
          return getErrorObject("InvalidAttr", "boolean attribute '" + matches[i][2] + "' is not allowed.", getPositionFromMatch(matches[i]));
        }
        const attrName = matches[i][2];
        if (!validateAttrName(attrName)) {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is an invalid name.", getPositionFromMatch(matches[i]));
        }
        if (!attrNames.hasOwnProperty(attrName)) {
          attrNames[attrName] = 1;
        } else {
          return getErrorObject("InvalidAttr", "Attribute '" + attrName + "' is repeated.", getPositionFromMatch(matches[i]));
        }
      }
      return true;
    }
    function validateNumberAmpersand(xmlData, i) {
      let re = /\d/;
      if (xmlData[i] === "x") {
        i++;
        re = /[\da-fA-F]/;
      }
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === ";")
          return i;
        if (!xmlData[i].match(re))
          break;
      }
      return -1;
    }
    function validateAmpersand(xmlData, i) {
      i++;
      if (xmlData[i] === ";")
        return -1;
      if (xmlData[i] === "#") {
        i++;
        return validateNumberAmpersand(xmlData, i);
      }
      let count = 0;
      for (; i < xmlData.length; i++, count++) {
        if (xmlData[i].match(/\w/) && count < 20)
          continue;
        if (xmlData[i] === ";")
          break;
        return -1;
      }
      return i;
    }
    function getErrorObject(code, message, lineNumber) {
      return {
        err: {
          code,
          msg: message,
          line: lineNumber.line || lineNumber,
          col: lineNumber.col
        }
      };
    }
    function validateAttrName(attrName) {
      return util.isName(attrName);
    }
    function validateTagName(tagname) {
      return util.isName(tagname);
    }
    function getLineNumberForPosition(xmlData, index) {
      const lines = xmlData.substring(0, index).split(/\r?\n/);
      return {
        line: lines.length,
        // column number is last line's length + 1, because column numbering starts at 1:
        col: lines[lines.length - 1].length + 1
      };
    }
    function getPositionFromMatch(match) {
      return match.startIndex + match[1].length;
    }
  }
});

var require_OptionsBuilder = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js"(exports2) {
    var defaultOptions = {
      preserveOrder: false,
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      removeNSPrefix: false,
      // remove NS from tag name or attribute name if true
      allowBooleanAttributes: false,
      //a tag can have attributes without any value
      //ignoreRootElement : false,
      parseTagValue: true,
      parseAttributeValue: false,
      trimValues: true,
      //Trim string values of tag and attributes
      cdataPropName: false,
      numberParseOptions: {
        hex: true,
        leadingZeros: true
      },
      tagValueProcessor: function(tagName, val) {
        return val;
      },
      attributeValueProcessor: function(attrName, val) {
        return val;
      },
      stopNodes: [],
      //nested tags will not be parsed even for errors
      alwaysCreateTextNode: false,
      isArray: () => false,
      commentPropName: false,
      unpairedTags: [],
      processEntities: true,
      htmlEntities: false,
      ignoreDeclaration: false,
      ignorePiTags: false,
      transformTagName: false
    };
    var buildOptions = function(options) {
      return Object.assign({}, defaultOptions, options);
    };
    exports2.buildOptions = buildOptions;
    exports2.defaultOptions = defaultOptions;
  }
});

var require_xmlNode = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/xmlNode.js"(exports2, module2) {
    "use strict";
    var XmlNode = class {
      constructor(tagname) {
        this.tagname = tagname;
        this.child = [];
        this[":@"] = {};
      }
      add(key, val) {
        this.child.push({ [key]: val });
      }
      addChild(node) {
        if (node[":@"] && Object.keys(node[":@"]).length > 0) {
          this.child.push({ [node.tagname]: node.child, [":@"]: node[":@"] });
        } else {
          this.child.push({ [node.tagname]: node.child });
        }
      }
    };
    module2.exports = XmlNode;
  }
});

var require_DocTypeReader = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js"(exports2, module2) {
    function readDocType(xmlData, i) {
      const entities = {};
      if (xmlData[i + 3] === "O" && xmlData[i + 4] === "C" && xmlData[i + 5] === "T" && xmlData[i + 6] === "Y" && xmlData[i + 7] === "P" && xmlData[i + 8] === "E") {
        i = i + 9;
        let angleBracketsCount = 1;
        let hasBody = false, entity = false, comment = false;
        let exp = "";
        for (; i < xmlData.length; i++) {
          if (xmlData[i] === "<") {
            if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "N" && xmlData[i + 4] === "T" && xmlData[i + 5] === "I" && xmlData[i + 6] === "T" && xmlData[i + 7] === "Y") {
              i += 7;
              entity = true;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "E" && xmlData[i + 3] === "L" && xmlData[i + 4] === "E" && xmlData[i + 5] === "M" && xmlData[i + 6] === "E" && xmlData[i + 7] === "N" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "A" && xmlData[i + 3] === "T" && xmlData[i + 4] === "T" && xmlData[i + 5] === "L" && xmlData[i + 6] === "I" && xmlData[i + 7] === "S" && xmlData[i + 8] === "T") {
              i += 8;
            } else if (hasBody && xmlData[i + 1] === "!" && xmlData[i + 2] === "N" && xmlData[i + 3] === "O" && xmlData[i + 4] === "T" && xmlData[i + 5] === "A" && xmlData[i + 6] === "T" && xmlData[i + 7] === "I" && xmlData[i + 8] === "O" && xmlData[i + 9] === "N") {
              i += 9;
            } else if (
              //comment
              xmlData[i + 1] === "!" && xmlData[i + 2] === "-" && xmlData[i + 3] === "-"
            ) {
              comment = true;
            } else {
              throw new Error("Invalid DOCTYPE");
            }
            angleBracketsCount++;
            exp = "";
          } else if (xmlData[i] === ">") {
            if (comment) {
              if (xmlData[i - 1] === "-" && xmlData[i - 2] === "-") {
                comment = false;
              } else {
                throw new Error(`Invalid XML comment in DOCTYPE`);
              }
            } else if (entity) {
              parseEntityExp(exp, entities);
              entity = false;
            }
            angleBracketsCount--;
            if (angleBracketsCount === 0) {
              break;
            }
          } else if (xmlData[i] === "[") {
            hasBody = true;
          } else {
            exp += xmlData[i];
          }
        }
        if (angleBracketsCount !== 0) {
          throw new Error(`Unclosed DOCTYPE`);
        }
      } else {
        throw new Error(`Invalid Tag instead of DOCTYPE`);
      }
      return { entities, i };
    }
    var entityRegex = RegExp(`^\\s([a-zA-z0-0]+)[ 	](['"])([^&]+)\\2`);
    function parseEntityExp(exp, entities) {
      const match = entityRegex.exec(exp);
      if (match) {
        entities[match[1]] = {
          regx: RegExp(`&${match[1]};`, "g"),
          val: match[3]
        };
      }
    }
    module2.exports = readDocType;
  }
});

var require_strnum = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/strnum/strnum.js"(exports2, module2) {
    var hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;
    var numRegex = /^([\-\+])?(0*)(\.[0-9]+([eE]\-?[0-9]+)?|[0-9]+(\.[0-9]+([eE]\-?[0-9]+)?)?)$/;
    if (!Number.parseInt && window.parseInt) {
      Number.parseInt = window.parseInt;
    }
    if (!Number.parseFloat && window.parseFloat) {
      Number.parseFloat = window.parseFloat;
    }
    var consider = {
      hex: true,
      leadingZeros: true,
      decimalPoint: ".",
      eNotation: true
      //skipLike: /regex/
    };
    function toNumber(str, options = {}) {
      options = Object.assign({}, consider, options);
      if (!str || typeof str !== "string")
        return str;
      let trimmedStr = str.trim();
      if (options.skipLike !== void 0 && options.skipLike.test(trimmedStr))
        return str;
      else if (options.hex && hexRegex.test(trimmedStr)) {
        return Number.parseInt(trimmedStr, 16);
      } else {
        const match = numRegex.exec(trimmedStr);
        if (match) {
          const sign = match[1];
          const leadingZeros = match[2];
          let numTrimmedByZeros = trimZeros(match[3]);
          const eNotation = match[4] || match[6];
          if (!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== ".")
            return str;
          else if (!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== ".")
            return str;
          else {
            const num = Number(trimmedStr);
            const numStr = "" + num;
            if (numStr.search(/[eE]/) !== -1) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (eNotation) {
              if (options.eNotation)
                return num;
              else
                return str;
            } else if (trimmedStr.indexOf(".") !== -1) {
              if (numStr === "0" && numTrimmedByZeros === "")
                return num;
              else if (numStr === numTrimmedByZeros)
                return num;
              else if (sign && numStr === "-" + numTrimmedByZeros)
                return num;
              else
                return str;
            }
            if (leadingZeros) {
              if (numTrimmedByZeros === numStr)
                return num;
              else if (sign + numTrimmedByZeros === numStr)
                return num;
              else
                return str;
            }
            if (trimmedStr === numStr)
              return num;
            else if (trimmedStr === sign + numStr)
              return num;
            return str;
          }
        } else {
          return str;
        }
      }
    }
    function trimZeros(numStr) {
      if (numStr && numStr.indexOf(".") !== -1) {
        numStr = numStr.replace(/0+$/, "");
        if (numStr === ".")
          numStr = "0";
        else if (numStr[0] === ".")
          numStr = "0" + numStr;
        else if (numStr[numStr.length - 1] === ".")
          numStr = numStr.substr(0, numStr.length - 1);
        return numStr;
      }
      return numStr;
    }
    module2.exports = toNumber;
  }
});

var require_OrderedObjParser = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js"(exports2, module2) {
    "use strict";
    var util = require_util();
    var xmlNode = require_xmlNode();
    var readDocType = require_DocTypeReader();
    var toNumber = require_strnum();
    var regx = "<((!\\[CDATA\\[([\\s\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\/)(NAME)\\s*>))([^<]*)".replace(/NAME/g, util.nameRegexp);
    var OrderedObjParser = class {
      constructor(options) {
        this.options = options;
        this.currentNode = null;
        this.tagsNodeStack = [];
        this.docTypeEntities = {};
        this.lastEntities = {
          "apos": { regex: /&(apos|#39|#x27);/g, val: "'" },
          "gt": { regex: /&(gt|#62|#x3E);/g, val: ">" },
          "lt": { regex: /&(lt|#60|#x3C);/g, val: "<" },
          "quot": { regex: /&(quot|#34|#x22);/g, val: '"' }
        };
        this.ampEntity = { regex: /&(amp|#38|#x26);/g, val: "&" };
        this.htmlEntities = {
          "space": { regex: /&(nbsp|#160);/g, val: " " },
          // "lt" : { regex: /&(lt|#60);/g, val: "<" },
          // "gt" : { regex: /&(gt|#62);/g, val: ">" },
          // "amp" : { regex: /&(amp|#38);/g, val: "&" },
          // "quot" : { regex: /&(quot|#34);/g, val: "\"" },
          // "apos" : { regex: /&(apos|#39);/g, val: "'" },
          "cent": { regex: /&(cent|#162);/g, val: "\xA2" },
          "pound": { regex: /&(pound|#163);/g, val: "\xA3" },
          "yen": { regex: /&(yen|#165);/g, val: "\xA5" },
          "euro": { regex: /&(euro|#8364);/g, val: "\u20AC" },
          "copyright": { regex: /&(copy|#169);/g, val: "\xA9" },
          "reg": { regex: /&(reg|#174);/g, val: "\xAE" },
          "inr": { regex: /&(inr|#8377);/g, val: "\u20B9" }
        };
        this.addExternalEntities = addExternalEntities;
        this.parseXml = parseXml;
        this.parseTextData = parseTextData;
        this.resolveNameSpace = resolveNameSpace;
        this.buildAttributesMap = buildAttributesMap;
        this.isItStopNode = isItStopNode;
        this.replaceEntitiesValue = replaceEntitiesValue;
        this.readStopNodeData = readStopNodeData;
        this.saveTextToParentTag = saveTextToParentTag;
      }
    };
    function addExternalEntities(externalEntities) {
      const entKeys = Object.keys(externalEntities);
      for (let i = 0; i < entKeys.length; i++) {
        const ent = entKeys[i];
        this.lastEntities[ent] = {
          regex: new RegExp("&" + ent + ";", "g"),
          val: externalEntities[ent]
        };
      }
    }
    function parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {
      if (val !== void 0) {
        if (this.options.trimValues && !dontTrim) {
          val = val.trim();
        }
        if (val.length > 0) {
          if (!escapeEntities)
            val = this.replaceEntitiesValue(val);
          const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);
          if (newval === null || newval === void 0) {
            return val;
          } else if (typeof newval !== typeof val || newval !== val) {
            return newval;
          } else if (this.options.trimValues) {
            return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
          } else {
            const trimmedVal = val.trim();
            if (trimmedVal === val) {
              return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);
            } else {
              return val;
            }
          }
        }
      }
    }
    function resolveNameSpace(tagname) {
      if (this.options.removeNSPrefix) {
        const tags = tagname.split(":");
        const prefix = tagname.charAt(0) === "/" ? "/" : "";
        if (tags[0] === "xmlns") {
          return "";
        }
        if (tags.length === 2) {
          tagname = prefix + tags[1];
        }
      }
      return tagname;
    }
    var attrsRegx = new RegExp(`([^\\s=]+)\\s*(=\\s*(['"])([\\s\\S]*?)\\3)?`, "gm");
    function buildAttributesMap(attrStr, jPath) {
      if (!this.options.ignoreAttributes && typeof attrStr === "string") {
        const matches = util.getAllMatches(attrStr, attrsRegx);
        const len = matches.length;
        const attrs = {};
        for (let i = 0; i < len; i++) {
          const attrName = this.resolveNameSpace(matches[i][1]);
          let oldVal = matches[i][4];
          const aName = this.options.attributeNamePrefix + attrName;
          if (attrName.length) {
            if (oldVal !== void 0) {
              if (this.options.trimValues) {
                oldVal = oldVal.trim();
              }
              oldVal = this.replaceEntitiesValue(oldVal);
              const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);
              if (newVal === null || newVal === void 0) {
                attrs[aName] = oldVal;
              } else if (typeof newVal !== typeof oldVal || newVal !== oldVal) {
                attrs[aName] = newVal;
              } else {
                attrs[aName] = parseValue(
                  oldVal,
                  this.options.parseAttributeValue,
                  this.options.numberParseOptions
                );
              }
            } else if (this.options.allowBooleanAttributes) {
              attrs[aName] = true;
            }
          }
        }
        if (!Object.keys(attrs).length) {
          return;
        }
        if (this.options.attributesGroupName) {
          const attrCollection = {};
          attrCollection[this.options.attributesGroupName] = attrs;
          return attrCollection;
        }
        return attrs;
      }
    }
    var parseXml = function(xmlData) {
      xmlData = xmlData.replace(/\r\n?/g, "\n");
      const xmlObj = new xmlNode("!xml");
      let currentNode = xmlObj;
      let textData = "";
      let jPath = "";
      for (let i = 0; i < xmlData.length; i++) {
        const ch = xmlData[i];
        if (ch === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, "Closing Tag is not closed.");
            let tagName = xmlData.substring(i + 2, closeIndex).trim();
            if (this.options.removeNSPrefix) {
              const colonIndex = tagName.indexOf(":");
              if (colonIndex !== -1) {
                tagName = tagName.substr(colonIndex + 1);
              }
            }
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode) {
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
            }
            jPath = jPath.substr(0, jPath.lastIndexOf("."));
            currentNode = this.tagsNodeStack.pop();
            textData = "";
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            let tagData = readTagExp(xmlData, i, false, "?>");
            if (!tagData)
              throw new Error("Pi Tag is not closed.");
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.ignoreDeclaration && tagData.tagName === "?xml" || this.options.ignorePiTags) {
            } else {
              const childNode = new xmlNode(tagData.tagName);
              childNode.add(this.options.textNodeName, "");
              if (tagData.tagName !== tagData.tagExp && tagData.attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagData.tagExp, jPath);
              }
              currentNode.addChild(childNode);
            }
            i = tagData.closeIndex + 1;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const endIndex = findClosingIndex(xmlData, "-->", i + 4, "Comment is not closed.");
            if (this.options.commentPropName) {
              const comment = xmlData.substring(i + 4, endIndex - 2);
              textData = this.saveTextToParentTag(textData, currentNode, jPath);
              currentNode.add(this.options.commentPropName, [{ [this.options.textNodeName]: comment }]);
            }
            i = endIndex;
          } else if (xmlData.substr(i + 1, 2) === "!D") {
            const result = readDocType(xmlData, i);
            this.docTypeEntities = result.entities;
            i = result.i;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "CDATA is not closed.") - 2;
            const tagExp = xmlData.substring(i + 9, closeIndex);
            textData = this.saveTextToParentTag(textData, currentNode, jPath);
            if (this.options.cdataPropName) {
              currentNode.add(this.options.cdataPropName, [{ [this.options.textNodeName]: tagExp }]);
            } else {
              let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);
              if (val == void 0)
                val = "";
              currentNode.add(this.options.textNodeName, val);
            }
            i = closeIndex + 2;
          } else {
            let result = readTagExp(xmlData, i, this.options.removeNSPrefix);
            let tagName = result.tagName;
            let tagExp = result.tagExp;
            let attrExpPresent = result.attrExpPresent;
            let closeIndex = result.closeIndex;
            if (this.options.transformTagName) {
              tagName = this.options.transformTagName(tagName);
            }
            if (currentNode && textData) {
              if (currentNode.tagname !== "!xml") {
                textData = this.saveTextToParentTag(textData, currentNode, jPath, false);
              }
            }
            if (tagName !== xmlObj.tagname) {
              jPath += jPath ? "." + tagName : tagName;
            }
            const lastTag = currentNode;
            if (lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1) {
              currentNode = this.tagsNodeStack.pop();
            }
            if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {
              let tagContent = "";
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                i = result.closeIndex;
              } else if (this.options.unpairedTags.indexOf(tagName) !== -1) {
                i = result.closeIndex;
              } else {
                const result2 = this.readStopNodeData(xmlData, tagName, closeIndex + 1);
                if (!result2)
                  throw new Error(`Unexpected end of ${tagName}`);
                i = result2.i;
                tagContent = result2.tagContent;
              }
              const childNode = new xmlNode(tagName);
              if (tagName !== tagExp && attrExpPresent) {
                childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
              }
              if (tagContent) {
                tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);
              }
              jPath = jPath.substr(0, jPath.lastIndexOf("."));
              childNode.add(this.options.textNodeName, tagContent);
              currentNode.addChild(childNode);
            } else {
              if (tagExp.length > 0 && tagExp.lastIndexOf("/") === tagExp.length - 1) {
                if (tagName[tagName.length - 1] === "/") {
                  tagName = tagName.substr(0, tagName.length - 1);
                  tagExp = tagName;
                } else {
                  tagExp = tagExp.substr(0, tagExp.length - 1);
                }
                if (this.options.transformTagName) {
                  tagName = this.options.transformTagName(tagName);
                }
                const childNode = new xmlNode(tagName);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                jPath = jPath.substr(0, jPath.lastIndexOf("."));
                currentNode.addChild(childNode);
              } else {
                const childNode = new xmlNode(tagName);
                this.tagsNodeStack.push(currentNode);
                if (tagName !== tagExp && attrExpPresent) {
                  childNode[":@"] = this.buildAttributesMap(tagExp, jPath);
                }
                currentNode.addChild(childNode);
                currentNode = childNode;
              }
              textData = "";
              i = closeIndex;
            }
          }
        } else {
          textData += xmlData[i];
        }
      }
      return xmlObj.child;
    };
    var replaceEntitiesValue = function(val) {
      if (this.options.processEntities) {
        for (let entityName in this.docTypeEntities) {
          const entity = this.docTypeEntities[entityName];
          val = val.replace(entity.regx, entity.val);
        }
        for (let entityName in this.lastEntities) {
          const entity = this.lastEntities[entityName];
          val = val.replace(entity.regex, entity.val);
        }
        if (this.options.htmlEntities) {
          for (let entityName in this.htmlEntities) {
            const entity = this.htmlEntities[entityName];
            val = val.replace(entity.regex, entity.val);
          }
        }
        val = val.replace(this.ampEntity.regex, this.ampEntity.val);
      }
      return val;
    };
    function saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {
      if (textData) {
        if (isLeafNode === void 0)
          isLeafNode = Object.keys(currentNode.child).length === 0;
        textData = this.parseTextData(
          textData,
          currentNode.tagname,
          jPath,
          false,
          currentNode[":@"] ? Object.keys(currentNode[":@"]).length !== 0 : false,
          isLeafNode
        );
        if (textData !== void 0 && textData !== "")
          currentNode.add(this.options.textNodeName, textData);
        textData = "";
      }
      return textData;
    }
    function isItStopNode(stopNodes, jPath, currentTagName) {
      const allNodesExp = "*." + currentTagName;
      for (const stopNodePath in stopNodes) {
        const stopNodeExp = stopNodes[stopNodePath];
        if (allNodesExp === stopNodeExp || jPath === stopNodeExp)
          return true;
      }
      return false;
    }
    function tagExpWithClosingIndex(xmlData, i, closingChar = ">") {
      let attrBoundary;
      let tagExp = "";
      for (let index = i; index < xmlData.length; index++) {
        let ch = xmlData[index];
        if (attrBoundary) {
          if (ch === attrBoundary)
            attrBoundary = "";
        } else if (ch === '"' || ch === "'") {
          attrBoundary = ch;
        } else if (ch === closingChar[0]) {
          if (closingChar[1]) {
            if (xmlData[index + 1] === closingChar[1]) {
              return {
                data: tagExp,
                index
              };
            }
          } else {
            return {
              data: tagExp,
              index
            };
          }
        } else if (ch === "	") {
          ch = " ";
        }
        tagExp += ch;
      }
    }
    function findClosingIndex(xmlData, str, i, errMsg) {
      const closingIndex = xmlData.indexOf(str, i);
      if (closingIndex === -1) {
        throw new Error(errMsg);
      } else {
        return closingIndex + str.length - 1;
      }
    }
    function readTagExp(xmlData, i, removeNSPrefix, closingChar = ">") {
      const result = tagExpWithClosingIndex(xmlData, i + 1, closingChar);
      if (!result)
        return;
      let tagExp = result.data;
      const closeIndex = result.index;
      const separatorIndex = tagExp.search(/\s/);
      let tagName = tagExp;
      let attrExpPresent = true;
      if (separatorIndex !== -1) {
        tagName = tagExp.substr(0, separatorIndex).replace(/\s\s*$/, "");
        tagExp = tagExp.substr(separatorIndex + 1);
      }
      if (removeNSPrefix) {
        const colonIndex = tagName.indexOf(":");
        if (colonIndex !== -1) {
          tagName = tagName.substr(colonIndex + 1);
          attrExpPresent = tagName !== result.data.substr(colonIndex + 1);
        }
      }
      return {
        tagName,
        tagExp,
        closeIndex,
        attrExpPresent
      };
    }
    function readStopNodeData(xmlData, tagName, i) {
      const startIndex = i;
      let openTagCount = 1;
      for (; i < xmlData.length; i++) {
        if (xmlData[i] === "<") {
          if (xmlData[i + 1] === "/") {
            const closeIndex = findClosingIndex(xmlData, ">", i, `${tagName} is not closed`);
            let closeTagName = xmlData.substring(i + 2, closeIndex).trim();
            if (closeTagName === tagName) {
              openTagCount--;
              if (openTagCount === 0) {
                return {
                  tagContent: xmlData.substring(startIndex, i),
                  i: closeIndex
                };
              }
            }
            i = closeIndex;
          } else if (xmlData[i + 1] === "?") {
            const closeIndex = findClosingIndex(xmlData, "?>", i + 1, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 3) === "!--") {
            const closeIndex = findClosingIndex(xmlData, "-->", i + 3, "StopNode is not closed.");
            i = closeIndex;
          } else if (xmlData.substr(i + 1, 2) === "![") {
            const closeIndex = findClosingIndex(xmlData, "]]>", i, "StopNode is not closed.") - 2;
            i = closeIndex;
          } else {
            const tagData = readTagExp(xmlData, i, ">");
            if (tagData) {
              const openTagName = tagData && tagData.tagName;
              if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length - 1] !== "/") {
                openTagCount++;
              }
              i = tagData.closeIndex;
            }
          }
        }
      }
    }
    function parseValue(val, shouldParse, options) {
      if (shouldParse && typeof val === "string") {
        const newval = val.trim();
        if (newval === "true")
          return true;
        else if (newval === "false")
          return false;
        else
          return toNumber(val, options);
      } else {
        if (util.isExist(val)) {
          return val;
        } else {
          return "";
        }
      }
    }
    module2.exports = OrderedObjParser;
  }
});

var require_node2json = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/node2json.js"(exports2) {
    "use strict";
    function prettify(node, options) {
      return compress(node, options);
    }
    function compress(arr, options, jPath) {
      let text;
      const compressedObj = {};
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const property = propName(tagObj);
        let newJpath = "";
        if (jPath === void 0)
          newJpath = property;
        else
          newJpath = jPath + "." + property;
        if (property === options.textNodeName) {
          if (text === void 0)
            text = tagObj[property];
          else
            text += "" + tagObj[property];
        } else if (property === void 0) {
          continue;
        } else if (tagObj[property]) {
          let val = compress(tagObj[property], options, newJpath);
          const isLeaf = isLeafTag(val, options);
          if (tagObj[":@"]) {
            assignAttributes(val, tagObj[":@"], newJpath, options);
          } else if (Object.keys(val).length === 1 && val[options.textNodeName] !== void 0 && !options.alwaysCreateTextNode) {
            val = val[options.textNodeName];
          } else if (Object.keys(val).length === 0) {
            if (options.alwaysCreateTextNode)
              val[options.textNodeName] = "";
            else
              val = "";
          }
          if (compressedObj[property] !== void 0 && compressedObj.hasOwnProperty(property)) {
            if (!Array.isArray(compressedObj[property])) {
              compressedObj[property] = [compressedObj[property]];
            }
            compressedObj[property].push(val);
          } else {
            if (options.isArray(property, newJpath, isLeaf)) {
              compressedObj[property] = [val];
            } else {
              compressedObj[property] = val;
            }
          }
        }
      }
      if (typeof text === "string") {
        if (text.length > 0)
          compressedObj[options.textNodeName] = text;
      } else if (text !== void 0)
        compressedObj[options.textNodeName] = text;
      return compressedObj;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function assignAttributes(obj, attrMap, jpath, options) {
      if (attrMap) {
        const keys = Object.keys(attrMap);
        const len = keys.length;
        for (let i = 0; i < len; i++) {
          const atrrName = keys[i];
          if (options.isArray(atrrName, jpath + "." + atrrName, true, true)) {
            obj[atrrName] = [attrMap[atrrName]];
          } else {
            obj[atrrName] = attrMap[atrrName];
          }
        }
      }
    }
    function isLeafTag(obj, options) {
      const propCount = Object.keys(obj).length;
      if (propCount === 0 || propCount === 1 && obj[options.textNodeName])
        return true;
      return false;
    }
    exports2.prettify = prettify;
  }
});

var require_XMLParser = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlparser/XMLParser.js"(exports2, module2) {
    var { buildOptions } = require_OptionsBuilder();
    var OrderedObjParser = require_OrderedObjParser();
    var { prettify } = require_node2json();
    var validator = require_validator();
    var XMLParser = class {
      constructor(options) {
        this.externalEntities = {};
        this.options = buildOptions(options);
      }
      /**
       * Parse XML dats to JS object 
       * @param {string|Buffer} xmlData 
       * @param {boolean|Object} validationOption 
       */
      parse(xmlData, validationOption) {
        if (typeof xmlData === "string") {
        } else if (xmlData.toString) {
          xmlData = xmlData.toString();
        } else {
          throw new Error("XML data is accepted in String or Bytes[] form.");
        }
        if (validationOption) {
          if (validationOption === true)
            validationOption = {};
          const result = validator.validate(xmlData, validationOption);
          if (result !== true) {
            throw Error(`${result.err.msg}:${result.err.line}:${result.err.col}`);
          }
        }
        const orderedObjParser = new OrderedObjParser(this.options);
        orderedObjParser.addExternalEntities(this.externalEntities);
        const orderedResult = orderedObjParser.parseXml(xmlData);
        if (this.options.preserveOrder || orderedResult === void 0)
          return orderedResult;
        else
          return prettify(orderedResult, this.options);
      }
      /**
       * Add Entity which is not by default supported by this library
       * @param {string} key 
       * @param {string} value 
       */
      addEntity(key, value) {
        if (value.indexOf("&") !== -1) {
          throw new Error("Entity value can't have '&'");
        } else if (key.indexOf("&") !== -1 || key.indexOf(";") !== -1) {
          throw new Error("An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'");
        } else if (value === "&") {
          throw new Error("An entity with value '&' is not permitted");
        } else {
          this.externalEntities[key] = value;
        }
      }
    };
    module2.exports = XMLParser;
  }
});

var require_orderedJs2Xml = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js"(exports2, module2) {
    var EOL = "\n";
    function toXml(jArray, options) {
      return arrToStr(jArray, options, "", 0);
    }
    function arrToStr(arr, options, jPath, level) {
      let xmlStr = "";
      let indentation = "";
      if (options.format && options.indentBy.length > 0) {
        indentation = EOL + "" + options.indentBy.repeat(level);
      }
      for (let i = 0; i < arr.length; i++) {
        const tagObj = arr[i];
        const tagName = propName(tagObj);
        let newJPath = "";
        if (jPath.length === 0)
          newJPath = tagName;
        else
          newJPath = `${jPath}.${tagName}`;
        if (tagName === options.textNodeName) {
          let tagText = tagObj[tagName];
          if (!isStopNode(newJPath, options)) {
            tagText = options.tagValueProcessor(tagName, tagText);
            tagText = replaceEntitiesValue(tagText, options);
          }
          xmlStr += indentation + tagText;
          continue;
        } else if (tagName === options.cdataPropName) {
          xmlStr += indentation + `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;
          continue;
        } else if (tagName === options.commentPropName) {
          xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;
          continue;
        } else if (tagName[0] === "?") {
          const attStr2 = attr_to_str(tagObj[":@"], options);
          const tempInd = tagName === "?xml" ? "" : indentation;
          let piTextNodeName = tagObj[tagName][0][options.textNodeName];
          piTextNodeName = piTextNodeName.length !== 0 ? " " + piTextNodeName : "";
          xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr2}?>`;
          continue;
        }
        const attStr = attr_to_str(tagObj[":@"], options);
        let tagStart = indentation + `<${tagName}${attStr}`;
        let tagValue = arrToStr(tagObj[tagName], options, newJPath, level + 1);
        if (options.unpairedTags.indexOf(tagName) !== -1) {
          if (options.suppressUnpairedNode)
            xmlStr += tagStart + ">";
          else
            xmlStr += tagStart + "/>";
        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {
          xmlStr += tagStart + "/>";
        } else {
          xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;
        }
      }
      return xmlStr;
    }
    function propName(obj) {
      const keys = Object.keys(obj);
      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];
        if (key !== ":@")
          return key;
      }
    }
    function attr_to_str(attrMap, options) {
      let attrStr = "";
      if (attrMap && !options.ignoreAttributes) {
        for (let attr in attrMap) {
          let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);
          attrVal = replaceEntitiesValue(attrVal, options);
          if (attrVal === true && options.suppressBooleanAttributes) {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;
          } else {
            attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}="${attrVal}"`;
          }
        }
      }
      return attrStr;
    }
    function isStopNode(jPath, options) {
      jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);
      let tagName = jPath.substr(jPath.lastIndexOf(".") + 1);
      for (let index in options.stopNodes) {
        if (options.stopNodes[index] === jPath || options.stopNodes[index] === "*." + tagName)
          return true;
      }
      return false;
    }
    function replaceEntitiesValue(textValue, options) {
      if (textValue && textValue.length > 0 && options.processEntities) {
        for (let i = 0; i < options.entities.length; i++) {
          const entity = options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    module2.exports = toXml;
  }
});

var require_json2xml = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js"(exports2, module2) {
    "use strict";
    var buildFromOrderedJs = require_orderedJs2Xml();
    var defaultOptions = {
      attributeNamePrefix: "@_",
      attributesGroupName: false,
      textNodeName: "#text",
      ignoreAttributes: true,
      cdataPropName: false,
      format: false,
      indentBy: "  ",
      suppressEmptyNode: false,
      suppressUnpairedNode: true,
      suppressBooleanAttributes: true,
      tagValueProcessor: function(key, a) {
        return a;
      },
      attributeValueProcessor: function(attrName, a) {
        return a;
      },
      preserveOrder: false,
      commentPropName: false,
      unpairedTags: [],
      entities: [
        { regex: new RegExp("&", "g"), val: "&amp;" },
        //it must be on top
        { regex: new RegExp(">", "g"), val: "&gt;" },
        { regex: new RegExp("<", "g"), val: "&lt;" },
        { regex: new RegExp("'", "g"), val: "&apos;" },
        { regex: new RegExp('"', "g"), val: "&quot;" }
      ],
      processEntities: true,
      stopNodes: [],
      transformTagName: false
    };
    function Builder(options) {
      this.options = Object.assign({}, defaultOptions, options);
      if (this.options.ignoreAttributes || this.options.attributesGroupName) {
        this.isAttribute = function() {
          return false;
        };
      } else {
        this.attrPrefixLen = this.options.attributeNamePrefix.length;
        this.isAttribute = isAttribute;
      }
      this.processTextOrObjNode = processTextOrObjNode;
      if (this.options.format) {
        this.indentate = indentate;
        this.tagEndChar = ">\n";
        this.newLine = "\n";
      } else {
        this.indentate = function() {
          return "";
        };
        this.tagEndChar = ">";
        this.newLine = "";
      }
      if (this.options.suppressEmptyNode) {
        this.buildTextNode = buildEmptyTextNode;
        this.buildObjNode = buildEmptyObjNode;
      } else {
        this.buildTextNode = buildTextValNode;
        this.buildObjNode = buildObjectNode;
      }
      this.buildTextValNode = buildTextValNode;
      this.buildObjectNode = buildObjectNode;
      this.replaceEntitiesValue = replaceEntitiesValue;
      this.buildAttrPairStr = buildAttrPairStr;
    }
    Builder.prototype.build = function(jObj) {
      if (this.options.preserveOrder) {
        return buildFromOrderedJs(jObj, this.options);
      } else {
        if (Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1) {
          jObj = {
            [this.options.arrayNodeName]: jObj
          };
        }
        return this.j2x(jObj, 0).val;
      }
    };
    Builder.prototype.j2x = function(jObj, level) {
      let attrStr = "";
      let val = "";
      for (let key in jObj) {
        if (typeof jObj[key] === "undefined") {
        } else if (jObj[key] === null) {
          if (key[0] === "?")
            val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
          else
            val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        } else if (jObj[key] instanceof Date) {
          val += this.buildTextNode(jObj[key], key, "", level);
        } else if (typeof jObj[key] !== "object") {
          const attr = this.isAttribute(key);
          if (attr) {
            attrStr += this.buildAttrPairStr(attr, "" + jObj[key]);
          } else {
            if (key === this.options.textNodeName) {
              let newval = this.options.tagValueProcessor(key, "" + jObj[key]);
              val += this.replaceEntitiesValue(newval);
            } else {
              val += this.buildTextNode(jObj[key], key, "", level);
            }
          }
        } else if (Array.isArray(jObj[key])) {
          const arrLen = jObj[key].length;
          for (let j = 0; j < arrLen; j++) {
            const item = jObj[key][j];
            if (typeof item === "undefined") {
            } else if (item === null) {
              if (key[0] === "?")
                val += this.indentate(level) + "<" + key + "?" + this.tagEndChar;
              else
                val += this.indentate(level) + "<" + key + "/" + this.tagEndChar;
            } else if (typeof item === "object") {
              val += this.processTextOrObjNode(item, key, level);
            } else {
              val += this.buildTextNode(item, key, "", level);
            }
          }
        } else {
          if (this.options.attributesGroupName && key === this.options.attributesGroupName) {
            const Ks = Object.keys(jObj[key]);
            const L = Ks.length;
            for (let j = 0; j < L; j++) {
              attrStr += this.buildAttrPairStr(Ks[j], "" + jObj[key][Ks[j]]);
            }
          } else {
            val += this.processTextOrObjNode(jObj[key], key, level);
          }
        }
      }
      return { attrStr, val };
    };
    function buildAttrPairStr(attrName, val) {
      val = this.options.attributeValueProcessor(attrName, "" + val);
      val = this.replaceEntitiesValue(val);
      if (this.options.suppressBooleanAttributes && val === "true") {
        return " " + attrName;
      } else
        return " " + attrName + '="' + val + '"';
    }
    function processTextOrObjNode(object, key, level) {
      const result = this.j2x(object, level + 1);
      if (object[this.options.textNodeName] !== void 0 && Object.keys(object).length === 1) {
        return this.buildTextNode(object[this.options.textNodeName], key, result.attrStr, level);
      } else {
        return this.buildObjNode(result.val, key, result.attrStr, level);
      }
    }
    function buildObjectNode(val, key, attrStr, level) {
      let tagEndExp = "</" + key + this.tagEndChar;
      let piClosingChar = "";
      if (key[0] === "?") {
        piClosingChar = "?";
        tagEndExp = "";
      }
      if (attrStr && val.indexOf("<") === -1) {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + ">" + val + tagEndExp;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else {
        return this.indentate(level) + "<" + key + attrStr + piClosingChar + this.tagEndChar + val + this.indentate(level) + tagEndExp;
      }
    }
    function buildEmptyObjNode(val, key, attrStr, level) {
      if (val !== "") {
        return this.buildObjectNode(val, key, attrStr, level);
      } else {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else
          return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function buildTextValNode(val, key, attrStr, level) {
      if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {
        return this.indentate(level) + `<![CDATA[${val}]]>` + this.newLine;
      } else if (this.options.commentPropName !== false && key === this.options.commentPropName) {
        return this.indentate(level) + `<!--${val}-->` + this.newLine;
      } else {
        let textValue = this.options.tagValueProcessor(key, val);
        textValue = this.replaceEntitiesValue(textValue);
        if (textValue === "" && this.options.unpairedTags.indexOf(key) !== -1) {
          if (this.options.suppressUnpairedNode) {
            return this.indentate(level) + "<" + key + this.tagEndChar;
          } else {
            return this.indentate(level) + "<" + key + "/" + this.tagEndChar;
          }
        } else {
          return this.indentate(level) + "<" + key + attrStr + ">" + textValue + "</" + key + this.tagEndChar;
        }
      }
    }
    function replaceEntitiesValue(textValue) {
      if (textValue && textValue.length > 0 && this.options.processEntities) {
        for (let i = 0; i < this.options.entities.length; i++) {
          const entity = this.options.entities[i];
          textValue = textValue.replace(entity.regex, entity.val);
        }
      }
      return textValue;
    }
    function buildEmptyTextNode(val, key, attrStr, level) {
      if (val === "" && this.options.unpairedTags.indexOf(key) !== -1) {
        if (this.options.suppressUnpairedNode) {
          return this.indentate(level) + "<" + key + this.tagEndChar;
        } else {
          return this.indentate(level) + "<" + key + "/" + this.tagEndChar;
        }
      } else if (val !== "") {
        return this.buildTextValNode(val, key, attrStr, level);
      } else {
        if (key[0] === "?")
          return this.indentate(level) + "<" + key + attrStr + "?" + this.tagEndChar;
        else
          return this.indentate(level) + "<" + key + attrStr + "/" + this.tagEndChar;
      }
    }
    function indentate(level) {
      return this.options.indentBy.repeat(level);
    }
    function isAttribute(name) {
      if (name.startsWith(this.options.attributeNamePrefix)) {
        return name.substr(this.attrPrefixLen);
      } else {
        return false;
      }
    }
    module2.exports = Builder;
  }
});

var require_fxp = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/fast-xml-parser/src/fxp.js"(exports2, module2) {
    "use strict";
    var validator = require_validator();
    var XMLParser = require_XMLParser();
    var XMLBuilder = require_json2xml();
    module2.exports = {
      XMLParser,
      XMLValidator: validator,
      XMLBuilder
    };
  }
});

var require_models_1 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/models_1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteGetObjectResponseRequestFilterSensitiveLog = exports2.UploadPartCopyRequestFilterSensitiveLog = exports2.UploadPartCopyOutputFilterSensitiveLog = exports2.CopyPartResultFilterSensitiveLog = exports2.UploadPartRequestFilterSensitiveLog = exports2.UploadPartOutputFilterSensitiveLog = exports2.SelectObjectContentRequestFilterSensitiveLog = exports2.ScanRangeFilterSensitiveLog = exports2.RequestProgressFilterSensitiveLog = exports2.SelectObjectContentOutputFilterSensitiveLog = exports2.SelectObjectContentEventStreamFilterSensitiveLog = exports2.StatsEventFilterSensitiveLog = exports2.StatsFilterSensitiveLog = exports2.RecordsEventFilterSensitiveLog = exports2.ProgressEventFilterSensitiveLog = exports2.ProgressFilterSensitiveLog = exports2.EndEventFilterSensitiveLog = exports2.ContinuationEventFilterSensitiveLog = exports2.RestoreObjectRequestFilterSensitiveLog = exports2.RestoreRequestFilterSensitiveLog = exports2.SelectParametersFilterSensitiveLog = exports2.OutputSerializationFilterSensitiveLog = exports2.JSONOutputFilterSensitiveLog = exports2.CSVOutputFilterSensitiveLog = exports2.InputSerializationFilterSensitiveLog = exports2.ParquetInputFilterSensitiveLog = exports2.JSONInputFilterSensitiveLog = exports2.CSVInputFilterSensitiveLog = exports2.OutputLocationFilterSensitiveLog = exports2.S3LocationFilterSensitiveLog = exports2.MetadataEntryFilterSensitiveLog = exports2.EncryptionFilterSensitiveLog = exports2.GlacierJobParametersFilterSensitiveLog = exports2.RestoreObjectOutputFilterSensitiveLog = exports2.PutPublicAccessBlockRequestFilterSensitiveLog = exports2.PutObjectTaggingRequestFilterSensitiveLog = exports2.PutObjectTaggingOutputFilterSensitiveLog = exports2.PutObjectRetentionRequestFilterSensitiveLog = exports2.PutObjectRetentionOutputFilterSensitiveLog = exports2.SelectObjectContentEventStream = exports2.RestoreRequestType = exports2.QuoteFields = exports2.JSONType = exports2.FileHeaderInfo = exports2.CompressionType = exports2.ExpressionType = exports2.Tier = exports2.ObjectAlreadyInActiveTierError = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var S3ServiceException_1 = require_S3ServiceException();
    var ObjectAlreadyInActiveTierError = class extends S3ServiceException_1.S3ServiceException {
      constructor(opts) {
        super({
          name: "ObjectAlreadyInActiveTierError",
          $fault: "client",
          ...opts
        });
        this.name = "ObjectAlreadyInActiveTierError";
        this.$fault = "client";
        Object.setPrototypeOf(this, ObjectAlreadyInActiveTierError.prototype);
      }
    };
    exports2.ObjectAlreadyInActiveTierError = ObjectAlreadyInActiveTierError;
    var Tier;
    (function(Tier2) {
      Tier2["Bulk"] = "Bulk";
      Tier2["Expedited"] = "Expedited";
      Tier2["Standard"] = "Standard";
    })(Tier = exports2.Tier || (exports2.Tier = {}));
    var ExpressionType;
    (function(ExpressionType2) {
      ExpressionType2["SQL"] = "SQL";
    })(ExpressionType = exports2.ExpressionType || (exports2.ExpressionType = {}));
    var CompressionType;
    (function(CompressionType2) {
      CompressionType2["BZIP2"] = "BZIP2";
      CompressionType2["GZIP"] = "GZIP";
      CompressionType2["NONE"] = "NONE";
    })(CompressionType = exports2.CompressionType || (exports2.CompressionType = {}));
    var FileHeaderInfo;
    (function(FileHeaderInfo2) {
      FileHeaderInfo2["IGNORE"] = "IGNORE";
      FileHeaderInfo2["NONE"] = "NONE";
      FileHeaderInfo2["USE"] = "USE";
    })(FileHeaderInfo = exports2.FileHeaderInfo || (exports2.FileHeaderInfo = {}));
    var JSONType;
    (function(JSONType2) {
      JSONType2["DOCUMENT"] = "DOCUMENT";
      JSONType2["LINES"] = "LINES";
    })(JSONType = exports2.JSONType || (exports2.JSONType = {}));
    var QuoteFields;
    (function(QuoteFields2) {
      QuoteFields2["ALWAYS"] = "ALWAYS";
      QuoteFields2["ASNEEDED"] = "ASNEEDED";
    })(QuoteFields = exports2.QuoteFields || (exports2.QuoteFields = {}));
    var RestoreRequestType;
    (function(RestoreRequestType2) {
      RestoreRequestType2["SELECT"] = "SELECT";
    })(RestoreRequestType = exports2.RestoreRequestType || (exports2.RestoreRequestType = {}));
    var SelectObjectContentEventStream;
    (function(SelectObjectContentEventStream2) {
      SelectObjectContentEventStream2.visit = (value, visitor) => {
        if (value.Records !== void 0)
          return visitor.Records(value.Records);
        if (value.Stats !== void 0)
          return visitor.Stats(value.Stats);
        if (value.Progress !== void 0)
          return visitor.Progress(value.Progress);
        if (value.Cont !== void 0)
          return visitor.Cont(value.Cont);
        if (value.End !== void 0)
          return visitor.End(value.End);
        return visitor._(value.$unknown[0], value.$unknown[1]);
      };
    })(SelectObjectContentEventStream = exports2.SelectObjectContentEventStream || (exports2.SelectObjectContentEventStream = {}));
    var PutObjectRetentionOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectRetentionOutputFilterSensitiveLog = PutObjectRetentionOutputFilterSensitiveLog;
    var PutObjectRetentionRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectRetentionRequestFilterSensitiveLog = PutObjectRetentionRequestFilterSensitiveLog;
    var PutObjectTaggingOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectTaggingOutputFilterSensitiveLog = PutObjectTaggingOutputFilterSensitiveLog;
    var PutObjectTaggingRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutObjectTaggingRequestFilterSensitiveLog = PutObjectTaggingRequestFilterSensitiveLog;
    var PutPublicAccessBlockRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PutPublicAccessBlockRequestFilterSensitiveLog = PutPublicAccessBlockRequestFilterSensitiveLog;
    var RestoreObjectOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RestoreObjectOutputFilterSensitiveLog = RestoreObjectOutputFilterSensitiveLog;
    var GlacierJobParametersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GlacierJobParametersFilterSensitiveLog = GlacierJobParametersFilterSensitiveLog;
    var EncryptionFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.KMSKeyId && { KMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.EncryptionFilterSensitiveLog = EncryptionFilterSensitiveLog;
    var MetadataEntryFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.MetadataEntryFilterSensitiveLog = MetadataEntryFilterSensitiveLog;
    var S3LocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Encryption && { Encryption: (0, exports2.EncryptionFilterSensitiveLog)(obj.Encryption) }
    });
    exports2.S3LocationFilterSensitiveLog = S3LocationFilterSensitiveLog;
    var OutputLocationFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.S3 && { S3: (0, exports2.S3LocationFilterSensitiveLog)(obj.S3) }
    });
    exports2.OutputLocationFilterSensitiveLog = OutputLocationFilterSensitiveLog;
    var CSVInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CSVInputFilterSensitiveLog = CSVInputFilterSensitiveLog;
    var JSONInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.JSONInputFilterSensitiveLog = JSONInputFilterSensitiveLog;
    var ParquetInputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ParquetInputFilterSensitiveLog = ParquetInputFilterSensitiveLog;
    var InputSerializationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.InputSerializationFilterSensitiveLog = InputSerializationFilterSensitiveLog;
    var CSVOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CSVOutputFilterSensitiveLog = CSVOutputFilterSensitiveLog;
    var JSONOutputFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.JSONOutputFilterSensitiveLog = JSONOutputFilterSensitiveLog;
    var OutputSerializationFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.OutputSerializationFilterSensitiveLog = OutputSerializationFilterSensitiveLog;
    var SelectParametersFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.SelectParametersFilterSensitiveLog = SelectParametersFilterSensitiveLog;
    var RestoreRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.OutputLocation && { OutputLocation: (0, exports2.OutputLocationFilterSensitiveLog)(obj.OutputLocation) }
    });
    exports2.RestoreRequestFilterSensitiveLog = RestoreRequestFilterSensitiveLog;
    var RestoreObjectRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.RestoreRequest && { RestoreRequest: (0, exports2.RestoreRequestFilterSensitiveLog)(obj.RestoreRequest) }
    });
    exports2.RestoreObjectRequestFilterSensitiveLog = RestoreObjectRequestFilterSensitiveLog;
    var ContinuationEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ContinuationEventFilterSensitiveLog = ContinuationEventFilterSensitiveLog;
    var EndEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.EndEventFilterSensitiveLog = EndEventFilterSensitiveLog;
    var ProgressFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProgressFilterSensitiveLog = ProgressFilterSensitiveLog;
    var ProgressEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ProgressEventFilterSensitiveLog = ProgressEventFilterSensitiveLog;
    var RecordsEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RecordsEventFilterSensitiveLog = RecordsEventFilterSensitiveLog;
    var StatsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StatsFilterSensitiveLog = StatsFilterSensitiveLog;
    var StatsEventFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StatsEventFilterSensitiveLog = StatsEventFilterSensitiveLog;
    var SelectObjectContentEventStreamFilterSensitiveLog = (obj) => {
      if (obj.Records !== void 0)
        return { Records: (0, exports2.RecordsEventFilterSensitiveLog)(obj.Records) };
      if (obj.Stats !== void 0)
        return { Stats: (0, exports2.StatsEventFilterSensitiveLog)(obj.Stats) };
      if (obj.Progress !== void 0)
        return { Progress: (0, exports2.ProgressEventFilterSensitiveLog)(obj.Progress) };
      if (obj.Cont !== void 0)
        return { Cont: (0, exports2.ContinuationEventFilterSensitiveLog)(obj.Cont) };
      if (obj.End !== void 0)
        return { End: (0, exports2.EndEventFilterSensitiveLog)(obj.End) };
      if (obj.$unknown !== void 0)
        return { [obj.$unknown[0]]: "UNKNOWN" };
    };
    exports2.SelectObjectContentEventStreamFilterSensitiveLog = SelectObjectContentEventStreamFilterSensitiveLog;
    var SelectObjectContentOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.Payload && { Payload: "STREAMING_CONTENT" }
    });
    exports2.SelectObjectContentOutputFilterSensitiveLog = SelectObjectContentOutputFilterSensitiveLog;
    var RequestProgressFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RequestProgressFilterSensitiveLog = RequestProgressFilterSensitiveLog;
    var ScanRangeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ScanRangeFilterSensitiveLog = ScanRangeFilterSensitiveLog;
    var SelectObjectContentRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.SelectObjectContentRequestFilterSensitiveLog = SelectObjectContentRequestFilterSensitiveLog;
    var UploadPartOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartOutputFilterSensitiveLog = UploadPartOutputFilterSensitiveLog;
    var UploadPartRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartRequestFilterSensitiveLog = UploadPartRequestFilterSensitiveLog;
    var CopyPartResultFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CopyPartResultFilterSensitiveLog = CopyPartResultFilterSensitiveLog;
    var UploadPartCopyOutputFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartCopyOutputFilterSensitiveLog = UploadPartCopyOutputFilterSensitiveLog;
    var UploadPartCopyRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSECustomerKey && { SSECustomerKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.CopySourceSSECustomerKey && { CopySourceSSECustomerKey: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.UploadPartCopyRequestFilterSensitiveLog = UploadPartCopyRequestFilterSensitiveLog;
    var WriteGetObjectResponseRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.SSEKMSKeyId && { SSEKMSKeyId: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.WriteGetObjectResponseRequestFilterSensitiveLog = WriteGetObjectResponseRequestFilterSensitiveLog;
  }
});

var require_Aws_restXml = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/protocols/Aws_restXml.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.serializeAws_restXmlGetObjectTorrentCommand = exports2.serializeAws_restXmlGetObjectTaggingCommand = exports2.serializeAws_restXmlGetObjectRetentionCommand = exports2.serializeAws_restXmlGetObjectLockConfigurationCommand = exports2.serializeAws_restXmlGetObjectLegalHoldCommand = exports2.serializeAws_restXmlGetObjectAttributesCommand = exports2.serializeAws_restXmlGetObjectAclCommand = exports2.serializeAws_restXmlGetObjectCommand = exports2.serializeAws_restXmlGetBucketWebsiteCommand = exports2.serializeAws_restXmlGetBucketVersioningCommand = exports2.serializeAws_restXmlGetBucketTaggingCommand = exports2.serializeAws_restXmlGetBucketRequestPaymentCommand = exports2.serializeAws_restXmlGetBucketReplicationCommand = exports2.serializeAws_restXmlGetBucketPolicyStatusCommand = exports2.serializeAws_restXmlGetBucketPolicyCommand = exports2.serializeAws_restXmlGetBucketOwnershipControlsCommand = exports2.serializeAws_restXmlGetBucketNotificationConfigurationCommand = exports2.serializeAws_restXmlGetBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlGetBucketLoggingCommand = exports2.serializeAws_restXmlGetBucketLocationCommand = exports2.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports2.serializeAws_restXmlGetBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlGetBucketEncryptionCommand = exports2.serializeAws_restXmlGetBucketCorsCommand = exports2.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlGetBucketAclCommand = exports2.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports2.serializeAws_restXmlDeletePublicAccessBlockCommand = exports2.serializeAws_restXmlDeleteObjectTaggingCommand = exports2.serializeAws_restXmlDeleteObjectsCommand = exports2.serializeAws_restXmlDeleteObjectCommand = exports2.serializeAws_restXmlDeleteBucketWebsiteCommand = exports2.serializeAws_restXmlDeleteBucketTaggingCommand = exports2.serializeAws_restXmlDeleteBucketReplicationCommand = exports2.serializeAws_restXmlDeleteBucketPolicyCommand = exports2.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports2.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketLifecycleCommand = exports2.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketEncryptionCommand = exports2.serializeAws_restXmlDeleteBucketCorsCommand = exports2.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlDeleteBucketCommand = exports2.serializeAws_restXmlCreateMultipartUploadCommand = exports2.serializeAws_restXmlCreateBucketCommand = exports2.serializeAws_restXmlCopyObjectCommand = exports2.serializeAws_restXmlCompleteMultipartUploadCommand = exports2.serializeAws_restXmlAbortMultipartUploadCommand = void 0;
    exports2.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketCommand = exports2.deserializeAws_restXmlCreateMultipartUploadCommand = exports2.deserializeAws_restXmlCreateBucketCommand = exports2.deserializeAws_restXmlCopyObjectCommand = exports2.deserializeAws_restXmlCompleteMultipartUploadCommand = exports2.deserializeAws_restXmlAbortMultipartUploadCommand = exports2.serializeAws_restXmlWriteGetObjectResponseCommand = exports2.serializeAws_restXmlUploadPartCopyCommand = exports2.serializeAws_restXmlUploadPartCommand = exports2.serializeAws_restXmlSelectObjectContentCommand = exports2.serializeAws_restXmlRestoreObjectCommand = exports2.serializeAws_restXmlPutPublicAccessBlockCommand = exports2.serializeAws_restXmlPutObjectTaggingCommand = exports2.serializeAws_restXmlPutObjectRetentionCommand = exports2.serializeAws_restXmlPutObjectLockConfigurationCommand = exports2.serializeAws_restXmlPutObjectLegalHoldCommand = exports2.serializeAws_restXmlPutObjectAclCommand = exports2.serializeAws_restXmlPutObjectCommand = exports2.serializeAws_restXmlPutBucketWebsiteCommand = exports2.serializeAws_restXmlPutBucketVersioningCommand = exports2.serializeAws_restXmlPutBucketTaggingCommand = exports2.serializeAws_restXmlPutBucketRequestPaymentCommand = exports2.serializeAws_restXmlPutBucketReplicationCommand = exports2.serializeAws_restXmlPutBucketPolicyCommand = exports2.serializeAws_restXmlPutBucketOwnershipControlsCommand = exports2.serializeAws_restXmlPutBucketNotificationConfigurationCommand = exports2.serializeAws_restXmlPutBucketMetricsConfigurationCommand = exports2.serializeAws_restXmlPutBucketLoggingCommand = exports2.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports2.serializeAws_restXmlPutBucketInventoryConfigurationCommand = exports2.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports2.serializeAws_restXmlPutBucketEncryptionCommand = exports2.serializeAws_restXmlPutBucketCorsCommand = exports2.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports2.serializeAws_restXmlPutBucketAclCommand = exports2.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports2.serializeAws_restXmlListPartsCommand = exports2.serializeAws_restXmlListObjectVersionsCommand = exports2.serializeAws_restXmlListObjectsV2Command = exports2.serializeAws_restXmlListObjectsCommand = exports2.serializeAws_restXmlListMultipartUploadsCommand = exports2.serializeAws_restXmlListBucketsCommand = exports2.serializeAws_restXmlListBucketMetricsConfigurationsCommand = exports2.serializeAws_restXmlListBucketInventoryConfigurationsCommand = exports2.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports2.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports2.serializeAws_restXmlHeadObjectCommand = exports2.serializeAws_restXmlHeadBucketCommand = exports2.serializeAws_restXmlGetPublicAccessBlockCommand = void 0;
    exports2.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = exports2.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = exports2.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = exports2.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = exports2.deserializeAws_restXmlHeadObjectCommand = exports2.deserializeAws_restXmlHeadBucketCommand = exports2.deserializeAws_restXmlGetPublicAccessBlockCommand = exports2.deserializeAws_restXmlGetObjectTorrentCommand = exports2.deserializeAws_restXmlGetObjectTaggingCommand = exports2.deserializeAws_restXmlGetObjectRetentionCommand = exports2.deserializeAws_restXmlGetObjectLockConfigurationCommand = exports2.deserializeAws_restXmlGetObjectLegalHoldCommand = exports2.deserializeAws_restXmlGetObjectAttributesCommand = exports2.deserializeAws_restXmlGetObjectAclCommand = exports2.deserializeAws_restXmlGetObjectCommand = exports2.deserializeAws_restXmlGetBucketWebsiteCommand = exports2.deserializeAws_restXmlGetBucketVersioningCommand = exports2.deserializeAws_restXmlGetBucketTaggingCommand = exports2.deserializeAws_restXmlGetBucketRequestPaymentCommand = exports2.deserializeAws_restXmlGetBucketReplicationCommand = exports2.deserializeAws_restXmlGetBucketPolicyStatusCommand = exports2.deserializeAws_restXmlGetBucketPolicyCommand = exports2.deserializeAws_restXmlGetBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = exports2.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlGetBucketLoggingCommand = exports2.deserializeAws_restXmlGetBucketLocationCommand = exports2.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = exports2.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = exports2.deserializeAws_restXmlGetBucketEncryptionCommand = exports2.deserializeAws_restXmlGetBucketCorsCommand = exports2.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlGetBucketAclCommand = exports2.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = exports2.deserializeAws_restXmlDeletePublicAccessBlockCommand = exports2.deserializeAws_restXmlDeleteObjectTaggingCommand = exports2.deserializeAws_restXmlDeleteObjectsCommand = exports2.deserializeAws_restXmlDeleteObjectCommand = exports2.deserializeAws_restXmlDeleteBucketWebsiteCommand = exports2.deserializeAws_restXmlDeleteBucketTaggingCommand = exports2.deserializeAws_restXmlDeleteBucketReplicationCommand = exports2.deserializeAws_restXmlDeleteBucketPolicyCommand = exports2.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketLifecycleCommand = exports2.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = exports2.deserializeAws_restXmlDeleteBucketEncryptionCommand = exports2.deserializeAws_restXmlDeleteBucketCorsCommand = void 0;
    exports2.deserializeAws_restXmlWriteGetObjectResponseCommand = exports2.deserializeAws_restXmlUploadPartCopyCommand = exports2.deserializeAws_restXmlUploadPartCommand = exports2.deserializeAws_restXmlSelectObjectContentCommand = exports2.deserializeAws_restXmlRestoreObjectCommand = exports2.deserializeAws_restXmlPutPublicAccessBlockCommand = exports2.deserializeAws_restXmlPutObjectTaggingCommand = exports2.deserializeAws_restXmlPutObjectRetentionCommand = exports2.deserializeAws_restXmlPutObjectLockConfigurationCommand = exports2.deserializeAws_restXmlPutObjectLegalHoldCommand = exports2.deserializeAws_restXmlPutObjectAclCommand = exports2.deserializeAws_restXmlPutObjectCommand = exports2.deserializeAws_restXmlPutBucketWebsiteCommand = exports2.deserializeAws_restXmlPutBucketVersioningCommand = exports2.deserializeAws_restXmlPutBucketTaggingCommand = exports2.deserializeAws_restXmlPutBucketRequestPaymentCommand = exports2.deserializeAws_restXmlPutBucketReplicationCommand = exports2.deserializeAws_restXmlPutBucketPolicyCommand = exports2.deserializeAws_restXmlPutBucketOwnershipControlsCommand = exports2.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = exports2.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = exports2.deserializeAws_restXmlPutBucketLoggingCommand = exports2.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = exports2.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = exports2.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = exports2.deserializeAws_restXmlPutBucketEncryptionCommand = exports2.deserializeAws_restXmlPutBucketCorsCommand = exports2.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = exports2.deserializeAws_restXmlPutBucketAclCommand = exports2.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = exports2.deserializeAws_restXmlListPartsCommand = exports2.deserializeAws_restXmlListObjectVersionsCommand = exports2.deserializeAws_restXmlListObjectsV2Command = exports2.deserializeAws_restXmlListObjectsCommand = exports2.deserializeAws_restXmlListMultipartUploadsCommand = exports2.deserializeAws_restXmlListBucketsCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var xml_builder_1 = require_dist_cjs9();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_0();
    var models_1_1 = require_models_1();
    var S3ServiceException_1 = require_S3ServiceException();
    var serializeAws_restXmlAbortMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "AbortMultipartUpload"],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlAbortMultipartUploadCommand = serializeAws_restXmlAbortMultipartUploadCommand;
    var serializeAws_restXmlCompleteMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "CompleteMultipartUpload"],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.MultipartUpload !== void 0) {
        body = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
      }
      let contents;
      if (input.MultipartUpload !== void 0) {
        contents = serializeAws_restXmlCompletedMultipartUpload(input.MultipartUpload, context);
        contents = contents.withName("CompleteMultipartUpload");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlCompleteMultipartUploadCommand = serializeAws_restXmlCompleteMultipartUploadCommand;
    var serializeAws_restXmlCopyObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-metadata-directive": input.MetadataDirective,
        "x-amz-tagging-directive": input.TaggingDirective,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "CopyObject"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlCopyObjectCommand = serializeAws_restXmlCopyObjectCommand;
    var serializeAws_restXmlCreateBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-bucket-object-lock-enabled": [
          () => isSerializableHeaderValue(input.ObjectLockEnabledForBucket),
          () => input.ObjectLockEnabledForBucket.toString()
        ],
        "x-amz-object-ownership": input.ObjectOwnership
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      if (input.CreateBucketConfiguration !== void 0) {
        body = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
      }
      let contents;
      if (input.CreateBucketConfiguration !== void 0) {
        contents = serializeAws_restXmlCreateBucketConfiguration(input.CreateBucketConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restXmlCreateBucketCommand = serializeAws_restXmlCreateBucketCommand;
    var serializeAws_restXmlCreateMultipartUploadCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-type": input.ContentType,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-algorithm": input.ChecksumAlgorithm,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        uploads: [, ""],
        "x-id": [, "CreateMultipartUpload"]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlCreateMultipartUploadCommand = serializeAws_restXmlCreateMultipartUploadCommand;
    var serializeAws_restXmlDeleteBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketCommand = serializeAws_restXmlDeleteBucketCommand;
    var serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;
    var serializeAws_restXmlDeleteBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketCorsCommand = serializeAws_restXmlDeleteBucketCorsCommand;
    var serializeAws_restXmlDeleteBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketEncryptionCommand = serializeAws_restXmlDeleteBucketEncryptionCommand;
    var serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;
    var serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand = serializeAws_restXmlDeleteBucketInventoryConfigurationCommand;
    var serializeAws_restXmlDeleteBucketLifecycleCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketLifecycleCommand = serializeAws_restXmlDeleteBucketLifecycleCommand;
    var serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand = serializeAws_restXmlDeleteBucketMetricsConfigurationCommand;
    var serializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketOwnershipControlsCommand = serializeAws_restXmlDeleteBucketOwnershipControlsCommand;
    var serializeAws_restXmlDeleteBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketPolicyCommand = serializeAws_restXmlDeleteBucketPolicyCommand;
    var serializeAws_restXmlDeleteBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketReplicationCommand = serializeAws_restXmlDeleteBucketReplicationCommand;
    var serializeAws_restXmlDeleteBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketTaggingCommand = serializeAws_restXmlDeleteBucketTaggingCommand;
    var serializeAws_restXmlDeleteBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteBucketWebsiteCommand = serializeAws_restXmlDeleteBucketWebsiteCommand;
    var serializeAws_restXmlDeleteObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "DeleteObject"],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteObjectCommand = serializeAws_restXmlDeleteObjectCommand;
    var serializeAws_restXmlDeleteObjectsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-mfa": input.MFA,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        delete: [, ""],
        "x-id": [, "DeleteObjects"]
      });
      let body;
      if (input.Delete !== void 0) {
        body = serializeAws_restXmlDelete(input.Delete, context);
      }
      let contents;
      if (input.Delete !== void 0) {
        contents = serializeAws_restXmlDelete(input.Delete, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteObjectsCommand = serializeAws_restXmlDeleteObjectsCommand;
    var serializeAws_restXmlDeleteObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeleteObjectTaggingCommand = serializeAws_restXmlDeleteObjectTaggingCommand;
    var serializeAws_restXmlDeletePublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "DELETE",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlDeletePublicAccessBlockCommand = serializeAws_restXmlDeletePublicAccessBlockCommand;
    var serializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        accelerate: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketAccelerateConfigurationCommand = serializeAws_restXmlGetBucketAccelerateConfigurationCommand;
    var serializeAws_restXmlGetBucketAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        acl: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketAclCommand = serializeAws_restXmlGetBucketAclCommand;
    var serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        "x-id": [, "GetBucketAnalyticsConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand = serializeAws_restXmlGetBucketAnalyticsConfigurationCommand;
    var serializeAws_restXmlGetBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketCorsCommand = serializeAws_restXmlGetBucketCorsCommand;
    var serializeAws_restXmlGetBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketEncryptionCommand = serializeAws_restXmlGetBucketEncryptionCommand;
    var serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "GetBucketIntelligentTieringConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;
    var serializeAws_restXmlGetBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        "x-id": [, "GetBucketInventoryConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketInventoryConfigurationCommand = serializeAws_restXmlGetBucketInventoryConfigurationCommand;
    var serializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketLifecycleConfigurationCommand = serializeAws_restXmlGetBucketLifecycleConfigurationCommand;
    var serializeAws_restXmlGetBucketLocationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        location: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketLocationCommand = serializeAws_restXmlGetBucketLocationCommand;
    var serializeAws_restXmlGetBucketLoggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        logging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketLoggingCommand = serializeAws_restXmlGetBucketLoggingCommand;
    var serializeAws_restXmlGetBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        "x-id": [, "GetBucketMetricsConfiguration"],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketMetricsConfigurationCommand = serializeAws_restXmlGetBucketMetricsConfigurationCommand;
    var serializeAws_restXmlGetBucketNotificationConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        notification: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketNotificationConfigurationCommand = serializeAws_restXmlGetBucketNotificationConfigurationCommand;
    var serializeAws_restXmlGetBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketOwnershipControlsCommand = serializeAws_restXmlGetBucketOwnershipControlsCommand;
    var serializeAws_restXmlGetBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketPolicyCommand = serializeAws_restXmlGetBucketPolicyCommand;
    var serializeAws_restXmlGetBucketPolicyStatusCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policyStatus: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketPolicyStatusCommand = serializeAws_restXmlGetBucketPolicyStatusCommand;
    var serializeAws_restXmlGetBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketReplicationCommand = serializeAws_restXmlGetBucketReplicationCommand;
    var serializeAws_restXmlGetBucketRequestPaymentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        requestPayment: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketRequestPaymentCommand = serializeAws_restXmlGetBucketRequestPaymentCommand;
    var serializeAws_restXmlGetBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketTaggingCommand = serializeAws_restXmlGetBucketTaggingCommand;
    var serializeAws_restXmlGetBucketVersioningCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versioning: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketVersioningCommand = serializeAws_restXmlGetBucketVersioningCommand;
    var serializeAws_restXmlGetBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetBucketWebsiteCommand = serializeAws_restXmlGetBucketWebsiteCommand;
    var serializeAws_restXmlGetObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue(input.IfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue(input.IfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "GetObject"],
        "response-cache-control": [, input.ResponseCacheControl],
        "response-content-disposition": [, input.ResponseContentDisposition],
        "response-content-encoding": [, input.ResponseContentEncoding],
        "response-content-language": [, input.ResponseContentLanguage],
        "response-content-type": [, input.ResponseContentType],
        "response-expires": [
          () => input.ResponseExpires !== void 0,
          () => (0, smithy_client_1.dateToUtcString)(input.ResponseExpires).toString()
        ],
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectCommand = serializeAws_restXmlGetObjectCommand;
    var serializeAws_restXmlGetObjectAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectAclCommand = serializeAws_restXmlGetObjectAclCommand;
    var serializeAws_restXmlGetObjectAttributesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-max-parts": [() => isSerializableHeaderValue(input.MaxParts), () => input.MaxParts.toString()],
        "x-amz-part-number-marker": input.PartNumberMarker,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-object-attributes": [
          () => isSerializableHeaderValue(input.ObjectAttributes),
          () => (input.ObjectAttributes || []).map((_entry) => _entry).join(", ")
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        attributes: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectAttributesCommand = serializeAws_restXmlGetObjectAttributesCommand;
    var serializeAws_restXmlGetObjectLegalHoldCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectLegalHoldCommand = serializeAws_restXmlGetObjectLegalHoldCommand;
    var serializeAws_restXmlGetObjectLockConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "object-lock": [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectLockConfigurationCommand = serializeAws_restXmlGetObjectLockConfigurationCommand;
    var serializeAws_restXmlGetObjectRetentionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectRetentionCommand = serializeAws_restXmlGetObjectRetentionCommand;
    var serializeAws_restXmlGetObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectTaggingCommand = serializeAws_restXmlGetObjectTaggingCommand;
    var serializeAws_restXmlGetObjectTorrentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        torrent: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetObjectTorrentCommand = serializeAws_restXmlGetObjectTorrentCommand;
    var serializeAws_restXmlGetPublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlGetPublicAccessBlockCommand = serializeAws_restXmlGetPublicAccessBlockCommand;
    var serializeAws_restXmlHeadBucketCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restXmlHeadBucketCommand = serializeAws_restXmlHeadBucketCommand;
    var serializeAws_restXmlHeadObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "if-match": input.IfMatch,
        "if-modified-since": [
          () => isSerializableHeaderValue(input.IfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfModifiedSince).toString()
        ],
        "if-none-match": input.IfNoneMatch,
        "if-unmodified-since": [
          () => isSerializableHeaderValue(input.IfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.IfUnmodifiedSince).toString()
        ],
        range: input.Range,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-checksum-mode": input.ChecksumMode
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        versionId: [, input.VersionId],
        partNumber: [() => input.PartNumber !== void 0, () => input.PartNumber.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "HEAD",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlHeadObjectCommand = serializeAws_restXmlHeadObjectCommand;
    var serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        "x-id": [, "ListBucketAnalyticsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand = serializeAws_restXmlListBucketAnalyticsConfigurationsCommand;
    var serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {};
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        "x-id": [, "ListBucketIntelligentTieringConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;
    var serializeAws_restXmlListBucketInventoryConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        "x-id": [, "ListBucketInventoryConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListBucketInventoryConfigurationsCommand = serializeAws_restXmlListBucketInventoryConfigurationsCommand;
    var serializeAws_restXmlListBucketMetricsConfigurationsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        "x-id": [, "ListBucketMetricsConfigurations"],
        "continuation-token": [, input.ContinuationToken]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListBucketMetricsConfigurationsCommand = serializeAws_restXmlListBucketMetricsConfigurationsCommand;
    var serializeAws_restXmlListBucketsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      let body;
      body = "";
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restXmlListBucketsCommand = serializeAws_restXmlListBucketsCommand;
    var serializeAws_restXmlListMultipartUploadsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        uploads: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-uploads": [() => input.MaxUploads !== void 0, () => input.MaxUploads.toString()],
        prefix: [, input.Prefix],
        "upload-id-marker": [, input.UploadIdMarker]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListMultipartUploadsCommand = serializeAws_restXmlListMultipartUploadsCommand;
    var serializeAws_restXmlListObjectsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        marker: [, input.Marker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListObjectsCommand = serializeAws_restXmlListObjectsCommand;
    var serializeAws_restXmlListObjectsV2Command = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "list-type": [, "2"],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "continuation-token": [, input.ContinuationToken],
        "fetch-owner": [() => input.FetchOwner !== void 0, () => input.FetchOwner.toString()],
        "start-after": [, input.StartAfter]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListObjectsV2Command = serializeAws_restXmlListObjectsV2Command;
    var serializeAws_restXmlListObjectVersionsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versions: [, ""],
        delimiter: [, input.Delimiter],
        "encoding-type": [, input.EncodingType],
        "key-marker": [, input.KeyMarker],
        "max-keys": [() => input.MaxKeys !== void 0, () => input.MaxKeys.toString()],
        prefix: [, input.Prefix],
        "version-id-marker": [, input.VersionIdMarker]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListObjectVersionsCommand = serializeAws_restXmlListObjectVersionsCommand;
    var serializeAws_restXmlListPartsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "ListParts"],
        "max-parts": [() => input.MaxParts !== void 0, () => input.MaxParts.toString()],
        "part-number-marker": [, input.PartNumberMarker],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlListPartsCommand = serializeAws_restXmlListPartsCommand;
    var serializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        accelerate: [, ""]
      });
      let body;
      if (input.AccelerateConfiguration !== void 0) {
        body = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
      }
      let contents;
      if (input.AccelerateConfiguration !== void 0) {
        contents = serializeAws_restXmlAccelerateConfiguration(input.AccelerateConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketAccelerateConfigurationCommand = serializeAws_restXmlPutBucketAccelerateConfigurationCommand;
    var serializeAws_restXmlPutBucketAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        acl: [, ""]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketAclCommand = serializeAws_restXmlPutBucketAclCommand;
    var serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        analytics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.AnalyticsConfiguration !== void 0) {
        body = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
      }
      let contents;
      if (input.AnalyticsConfiguration !== void 0) {
        contents = serializeAws_restXmlAnalyticsConfiguration(input.AnalyticsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand = serializeAws_restXmlPutBucketAnalyticsConfigurationCommand;
    var serializeAws_restXmlPutBucketCorsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        cors: [, ""]
      });
      let body;
      if (input.CORSConfiguration !== void 0) {
        body = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
      }
      let contents;
      if (input.CORSConfiguration !== void 0) {
        contents = serializeAws_restXmlCORSConfiguration(input.CORSConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketCorsCommand = serializeAws_restXmlPutBucketCorsCommand;
    var serializeAws_restXmlPutBucketEncryptionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        encryption: [, ""]
      });
      let body;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        body = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
      }
      let contents;
      if (input.ServerSideEncryptionConfiguration !== void 0) {
        contents = serializeAws_restXmlServerSideEncryptionConfiguration(input.ServerSideEncryptionConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketEncryptionCommand = serializeAws_restXmlPutBucketEncryptionCommand;
    var serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/xml"
      };
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "intelligent-tiering": [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.IntelligentTieringConfiguration !== void 0) {
        body = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
      }
      let contents;
      if (input.IntelligentTieringConfiguration !== void 0) {
        contents = serializeAws_restXmlIntelligentTieringConfiguration(input.IntelligentTieringConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;
    var serializeAws_restXmlPutBucketInventoryConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        inventory: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.InventoryConfiguration !== void 0) {
        body = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
      }
      let contents;
      if (input.InventoryConfiguration !== void 0) {
        contents = serializeAws_restXmlInventoryConfiguration(input.InventoryConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketInventoryConfigurationCommand = serializeAws_restXmlPutBucketInventoryConfigurationCommand;
    var serializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        lifecycle: [, ""]
      });
      let body;
      if (input.LifecycleConfiguration !== void 0) {
        body = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
      }
      let contents;
      if (input.LifecycleConfiguration !== void 0) {
        contents = serializeAws_restXmlBucketLifecycleConfiguration(input.LifecycleConfiguration, context);
        contents = contents.withName("LifecycleConfiguration");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketLifecycleConfigurationCommand = serializeAws_restXmlPutBucketLifecycleConfigurationCommand;
    var serializeAws_restXmlPutBucketLoggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        logging: [, ""]
      });
      let body;
      if (input.BucketLoggingStatus !== void 0) {
        body = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
      }
      let contents;
      if (input.BucketLoggingStatus !== void 0) {
        contents = serializeAws_restXmlBucketLoggingStatus(input.BucketLoggingStatus, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketLoggingCommand = serializeAws_restXmlPutBucketLoggingCommand;
    var serializeAws_restXmlPutBucketMetricsConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        metrics: [, ""],
        id: [, (0, smithy_client_1.expectNonNull)(input.Id, `Id`)]
      });
      let body;
      if (input.MetricsConfiguration !== void 0) {
        body = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
      }
      let contents;
      if (input.MetricsConfiguration !== void 0) {
        contents = serializeAws_restXmlMetricsConfiguration(input.MetricsConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketMetricsConfigurationCommand = serializeAws_restXmlPutBucketMetricsConfigurationCommand;
    var serializeAws_restXmlPutBucketNotificationConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-skip-destination-validation": [
          () => isSerializableHeaderValue(input.SkipDestinationValidation),
          () => input.SkipDestinationValidation.toString()
        ]
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        notification: [, ""]
      });
      let body;
      if (input.NotificationConfiguration !== void 0) {
        body = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
      }
      let contents;
      if (input.NotificationConfiguration !== void 0) {
        contents = serializeAws_restXmlNotificationConfiguration(input.NotificationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketNotificationConfigurationCommand = serializeAws_restXmlPutBucketNotificationConfigurationCommand;
    var serializeAws_restXmlPutBucketOwnershipControlsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        ownershipControls: [, ""]
      });
      let body;
      if (input.OwnershipControls !== void 0) {
        body = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
      }
      let contents;
      if (input.OwnershipControls !== void 0) {
        contents = serializeAws_restXmlOwnershipControls(input.OwnershipControls, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketOwnershipControlsCommand = serializeAws_restXmlPutBucketOwnershipControlsCommand;
    var serializeAws_restXmlPutBucketPolicyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "text/plain",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-confirm-remove-self-bucket-access": [
          () => isSerializableHeaderValue(input.ConfirmRemoveSelfBucketAccess),
          () => input.ConfirmRemoveSelfBucketAccess.toString()
        ],
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        policy: [, ""]
      });
      let body;
      if (input.Policy !== void 0) {
        body = input.Policy;
      }
      let contents;
      if (input.Policy !== void 0) {
        contents = input.Policy;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketPolicyCommand = serializeAws_restXmlPutBucketPolicyCommand;
    var serializeAws_restXmlPutBucketReplicationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-bucket-object-lock-token": input.Token,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        replication: [, ""]
      });
      let body;
      if (input.ReplicationConfiguration !== void 0) {
        body = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
      }
      let contents;
      if (input.ReplicationConfiguration !== void 0) {
        contents = serializeAws_restXmlReplicationConfiguration(input.ReplicationConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketReplicationCommand = serializeAws_restXmlPutBucketReplicationCommand;
    var serializeAws_restXmlPutBucketRequestPaymentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        requestPayment: [, ""]
      });
      let body;
      if (input.RequestPaymentConfiguration !== void 0) {
        body = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
      }
      let contents;
      if (input.RequestPaymentConfiguration !== void 0) {
        contents = serializeAws_restXmlRequestPaymentConfiguration(input.RequestPaymentConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketRequestPaymentCommand = serializeAws_restXmlPutBucketRequestPaymentCommand;
    var serializeAws_restXmlPutBucketTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        tagging: [, ""]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = serializeAws_restXmlTagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = serializeAws_restXmlTagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketTaggingCommand = serializeAws_restXmlPutBucketTaggingCommand;
    var serializeAws_restXmlPutBucketVersioningCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-mfa": input.MFA,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        versioning: [, ""]
      });
      let body;
      if (input.VersioningConfiguration !== void 0) {
        body = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
      }
      let contents;
      if (input.VersioningConfiguration !== void 0) {
        contents = serializeAws_restXmlVersioningConfiguration(input.VersioningConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketVersioningCommand = serializeAws_restXmlPutBucketVersioningCommand;
    var serializeAws_restXmlPutBucketWebsiteCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        website: [, ""]
      });
      let body;
      if (input.WebsiteConfiguration !== void 0) {
        body = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
      }
      let contents;
      if (input.WebsiteConfiguration !== void 0) {
        contents = serializeAws_restXmlWebsiteConfiguration(input.WebsiteConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutBucketWebsiteCommand = serializeAws_restXmlPutBucketWebsiteCommand;
    var serializeAws_restXmlPutObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": input.ContentType || "application/octet-stream",
        "x-amz-acl": input.ACL,
        "cache-control": input.CacheControl,
        "content-disposition": input.ContentDisposition,
        "content-encoding": input.ContentEncoding,
        "content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        expires: [() => isSerializableHeaderValue(input.Expires), () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()],
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-storage-class": input.StorageClass,
        "x-amz-website-redirect-location": input.WebsiteRedirectLocation,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-server-side-encryption-context": input.SSEKMSEncryptionContext,
        "x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-tagging": input.Tagging,
        "x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "PutObject"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectCommand = serializeAws_restXmlPutObjectCommand;
    var serializeAws_restXmlPutObjectAclCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-acl": input.ACL,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-grant-full-control": input.GrantFullControl,
        "x-amz-grant-read": input.GrantRead,
        "x-amz-grant-read-acp": input.GrantReadACP,
        "x-amz-grant-write": input.GrantWrite,
        "x-amz-grant-write-acp": input.GrantWriteACP,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        acl: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.AccessControlPolicy !== void 0) {
        body = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
      }
      let contents;
      if (input.AccessControlPolicy !== void 0) {
        contents = serializeAws_restXmlAccessControlPolicy(input.AccessControlPolicy, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectAclCommand = serializeAws_restXmlPutObjectAclCommand;
    var serializeAws_restXmlPutObjectLegalHoldCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "legal-hold": [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.LegalHold !== void 0) {
        body = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
      }
      let contents;
      if (input.LegalHold !== void 0) {
        contents = serializeAws_restXmlObjectLockLegalHold(input.LegalHold, context);
        contents = contents.withName("LegalHold");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectLegalHoldCommand = serializeAws_restXmlPutObjectLegalHoldCommand;
    var serializeAws_restXmlPutObjectLockConfigurationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bucket-object-lock-token": input.Token,
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        "object-lock": [, ""]
      });
      let body;
      if (input.ObjectLockConfiguration !== void 0) {
        body = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
      }
      let contents;
      if (input.ObjectLockConfiguration !== void 0) {
        contents = serializeAws_restXmlObjectLockConfiguration(input.ObjectLockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectLockConfigurationCommand = serializeAws_restXmlPutObjectLockConfigurationCommand;
    var serializeAws_restXmlPutObjectRetentionCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-bypass-governance-retention": [
          () => isSerializableHeaderValue(input.BypassGovernanceRetention),
          () => input.BypassGovernanceRetention.toString()
        ],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        retention: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Retention !== void 0) {
        body = serializeAws_restXmlObjectLockRetention(input.Retention, context);
      }
      let contents;
      if (input.Retention !== void 0) {
        contents = serializeAws_restXmlObjectLockRetention(input.Retention, context);
        contents = contents.withName("Retention");
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectRetentionCommand = serializeAws_restXmlPutObjectRetentionCommand;
    var serializeAws_restXmlPutObjectTaggingCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-request-payer": input.RequestPayer
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        tagging: [, ""],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.Tagging !== void 0) {
        body = serializeAws_restXmlTagging(input.Tagging, context);
      }
      let contents;
      if (input.Tagging !== void 0) {
        contents = serializeAws_restXmlTagging(input.Tagging, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutObjectTaggingCommand = serializeAws_restXmlPutObjectTaggingCommand;
    var serializeAws_restXmlPutPublicAccessBlockCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      const query = map({
        publicAccessBlock: [, ""]
      });
      let body;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        body = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
      }
      let contents;
      if (input.PublicAccessBlockConfiguration !== void 0) {
        contents = serializeAws_restXmlPublicAccessBlockConfiguration(input.PublicAccessBlockConfiguration, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlPutPublicAccessBlockCommand = serializeAws_restXmlPutPublicAccessBlockCommand;
    var serializeAws_restXmlRestoreObjectCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        restore: [, ""],
        "x-id": [, "RestoreObject"],
        versionId: [, input.VersionId]
      });
      let body;
      if (input.RestoreRequest !== void 0) {
        body = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
      }
      let contents;
      if (input.RestoreRequest !== void 0) {
        contents = serializeAws_restXmlRestoreRequest(input.RestoreRequest, context);
        body = '<?xml version="1.0" encoding="UTF-8"?>';
        contents.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
        body += contents.toString();
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlRestoreObjectCommand = serializeAws_restXmlRestoreObjectCommand;
    var serializeAws_restXmlSelectObjectContentCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/xml",
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        select: [, ""],
        "select-type": [, "2"],
        "x-id": [, "SelectObjectContent"]
      });
      let body;
      body = '<?xml version="1.0" encoding="UTF-8"?>';
      const bodyNode = new xml_builder_1.XmlNode("SelectObjectContentRequest");
      bodyNode.addAttribute("xmlns", "http://s3.amazonaws.com/doc/2006-03-01/");
      if (input.Expression !== void 0) {
        const node = xml_builder_1.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType !== void 0) {
        const node = xml_builder_1.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.InputSerialization !== void 0) {
        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization !== void 0) {
        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.RequestProgress !== void 0) {
        const node = serializeAws_restXmlRequestProgress(input.RequestProgress, context).withName("RequestProgress");
        bodyNode.addChildNode(node);
      }
      if (input.ScanRange !== void 0) {
        const node = serializeAws_restXmlScanRange(input.ScanRange, context).withName("ScanRange");
        bodyNode.addChildNode(node);
      }
      body += bodyNode.toString();
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlSelectObjectContentCommand = serializeAws_restXmlSelectObjectContentCommand;
    var serializeAws_restXmlUploadPartCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "content-type": "application/octet-stream",
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "content-md5": input.ContentMD5,
        "x-amz-sdk-checksum-algorithm": input.ChecksumAlgorithm,
        "x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "UploadPart"],
        partNumber: [(0, smithy_client_1.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlUploadPartCommand = serializeAws_restXmlUploadPartCommand;
    var serializeAws_restXmlUploadPartCopyCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-copy-source": input.CopySource,
        "x-amz-copy-source-if-match": input.CopySourceIfMatch,
        "x-amz-copy-source-if-modified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfModifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfModifiedSince).toString()
        ],
        "x-amz-copy-source-if-none-match": input.CopySourceIfNoneMatch,
        "x-amz-copy-source-if-unmodified-since": [
          () => isSerializableHeaderValue(input.CopySourceIfUnmodifiedSince),
          () => (0, smithy_client_1.dateToUtcString)(input.CopySourceIfUnmodifiedSince).toString()
        ],
        "x-amz-copy-source-range": input.CopySourceRange,
        "x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-server-side-encryption-customer-key": input.SSECustomerKey,
        "x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-copy-source-server-side-encryption-customer-algorithm": input.CopySourceSSECustomerAlgorithm,
        "x-amz-copy-source-server-side-encryption-customer-key": input.CopySourceSSECustomerKey,
        "x-amz-copy-source-server-side-encryption-customer-key-md5": input.CopySourceSSECustomerKeyMD5,
        "x-amz-request-payer": input.RequestPayer,
        "x-amz-expected-bucket-owner": input.ExpectedBucketOwner,
        "x-amz-source-expected-bucket-owner": input.ExpectedSourceBucketOwner
      });
      let resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/{Key+}`;
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Bucket", () => input.Bucket, "{Bucket}", false);
      resolvedPath = (0, smithy_client_1.resolvedPath)(resolvedPath, input, "Key", () => input.Key, "{Key+}", true);
      const query = map({
        "x-id": [, "UploadPartCopy"],
        partNumber: [(0, smithy_client_1.expectNonNull)(input.PartNumber, `PartNumber`) != null, () => input.PartNumber.toString()],
        uploadId: [, (0, smithy_client_1.expectNonNull)(input.UploadId, `UploadId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "PUT",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlUploadPartCopyCommand = serializeAws_restXmlUploadPartCopyCommand;
    var serializeAws_restXmlWriteGetObjectResponseCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-content-sha256": "UNSIGNED-PAYLOAD",
        "content-type": "application/octet-stream",
        "x-amz-request-route": input.RequestRoute,
        "x-amz-request-token": input.RequestToken,
        "x-amz-fwd-status": [() => isSerializableHeaderValue(input.StatusCode), () => input.StatusCode.toString()],
        "x-amz-fwd-error-code": input.ErrorCode,
        "x-amz-fwd-error-message": input.ErrorMessage,
        "x-amz-fwd-header-accept-ranges": input.AcceptRanges,
        "x-amz-fwd-header-cache-control": input.CacheControl,
        "x-amz-fwd-header-content-disposition": input.ContentDisposition,
        "x-amz-fwd-header-content-encoding": input.ContentEncoding,
        "x-amz-fwd-header-content-language": input.ContentLanguage,
        "content-length": [() => isSerializableHeaderValue(input.ContentLength), () => input.ContentLength.toString()],
        "x-amz-fwd-header-content-range": input.ContentRange,
        "x-amz-fwd-header-content-type": input.ContentType,
        "x-amz-fwd-header-x-amz-checksum-crc32": input.ChecksumCRC32,
        "x-amz-fwd-header-x-amz-checksum-crc32c": input.ChecksumCRC32C,
        "x-amz-fwd-header-x-amz-checksum-sha1": input.ChecksumSHA1,
        "x-amz-fwd-header-x-amz-checksum-sha256": input.ChecksumSHA256,
        "x-amz-fwd-header-x-amz-delete-marker": [
          () => isSerializableHeaderValue(input.DeleteMarker),
          () => input.DeleteMarker.toString()
        ],
        "x-amz-fwd-header-etag": input.ETag,
        "x-amz-fwd-header-expires": [
          () => isSerializableHeaderValue(input.Expires),
          () => (0, smithy_client_1.dateToUtcString)(input.Expires).toString()
        ],
        "x-amz-fwd-header-x-amz-expiration": input.Expiration,
        "x-amz-fwd-header-last-modified": [
          () => isSerializableHeaderValue(input.LastModified),
          () => (0, smithy_client_1.dateToUtcString)(input.LastModified).toString()
        ],
        "x-amz-fwd-header-x-amz-missing-meta": [
          () => isSerializableHeaderValue(input.MissingMeta),
          () => input.MissingMeta.toString()
        ],
        "x-amz-fwd-header-x-amz-object-lock-mode": input.ObjectLockMode,
        "x-amz-fwd-header-x-amz-object-lock-legal-hold": input.ObjectLockLegalHoldStatus,
        "x-amz-fwd-header-x-amz-object-lock-retain-until-date": [
          () => isSerializableHeaderValue(input.ObjectLockRetainUntilDate),
          () => (input.ObjectLockRetainUntilDate.toISOString().split(".")[0] + "Z").toString()
        ],
        "x-amz-fwd-header-x-amz-mp-parts-count": [
          () => isSerializableHeaderValue(input.PartsCount),
          () => input.PartsCount.toString()
        ],
        "x-amz-fwd-header-x-amz-replication-status": input.ReplicationStatus,
        "x-amz-fwd-header-x-amz-request-charged": input.RequestCharged,
        "x-amz-fwd-header-x-amz-restore": input.Restore,
        "x-amz-fwd-header-x-amz-server-side-encryption": input.ServerSideEncryption,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-algorithm": input.SSECustomerAlgorithm,
        "x-amz-fwd-header-x-amz-server-side-encryption-aws-kms-key-id": input.SSEKMSKeyId,
        "x-amz-fwd-header-x-amz-server-side-encryption-customer-key-md5": input.SSECustomerKeyMD5,
        "x-amz-fwd-header-x-amz-storage-class": input.StorageClass,
        "x-amz-fwd-header-x-amz-tagging-count": [
          () => isSerializableHeaderValue(input.TagCount),
          () => input.TagCount.toString()
        ],
        "x-amz-fwd-header-x-amz-version-id": input.VersionId,
        "x-amz-fwd-header-x-amz-server-side-encryption-bucket-key-enabled": [
          () => isSerializableHeaderValue(input.BucketKeyEnabled),
          () => input.BucketKeyEnabled.toString()
        ],
        ...input.Metadata !== void 0 && Object.keys(input.Metadata).reduce((acc, suffix) => {
          acc[`x-amz-meta-${suffix.toLowerCase()}`] = input.Metadata[suffix];
          return acc;
        }, {})
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/WriteGetObjectResponse`;
      const query = map({
        "x-id": [, "WriteGetObjectResponse"]
      });
      let body;
      if (input.Body !== void 0) {
        body = input.Body;
      }
      let contents;
      if (input.Body !== void 0) {
        contents = input.Body;
        body = contents;
      }
      let { hostname: resolvedHostname } = await context.endpoint();
      if (context.disableHostPrefix !== true) {
        resolvedHostname = "{RequestRoute}." + resolvedHostname;
        if (input.RequestRoute === void 0) {
          throw new Error("Empty value provided for input host prefix: RequestRoute.");
        }
        resolvedHostname = resolvedHostname.replace("{RequestRoute}", input.RequestRoute);
        if (!(0, protocol_http_1.isValidHostname)(resolvedHostname)) {
          throw new Error("ValidationError: prefixed hostname must be hostname compatible.");
        }
      }
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname: resolvedHostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restXmlWriteGetObjectResponseCommand = serializeAws_restXmlWriteGetObjectResponseCommand;
    var deserializeAws_restXmlAbortMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlAbortMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlAbortMultipartUploadCommand = deserializeAws_restXmlAbortMultipartUploadCommand;
    var deserializeAws_restXmlAbortMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchUpload":
        case "com.amazonaws.s3#NoSuchUpload":
          throw await deserializeAws_restXmlNoSuchUploadResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlCompleteMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCompleteMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(data["ChecksumCRC32"]);
      }
      if (data["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(data["ChecksumCRC32C"]);
      }
      if (data["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(data["ChecksumSHA1"]);
      }
      if (data["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(data["ChecksumSHA256"]);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(data["ETag"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["Location"] !== void 0) {
        contents.Location = (0, smithy_client_1.expectString)(data["Location"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlCompleteMultipartUploadCommand = deserializeAws_restXmlCompleteMultipartUploadCommand;
    var deserializeAws_restXmlCompleteMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlCopyObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCopyObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.CopyObjectResult = deserializeAws_restXmlCopyObjectResult(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlCopyObjectCommand = deserializeAws_restXmlCopyObjectCommand;
    var deserializeAws_restXmlCopyObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectNotInActiveTierError":
        case "com.amazonaws.s3#ObjectNotInActiveTierError":
          throw await deserializeAws_restXmlObjectNotInActiveTierErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlCreateBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        Location: [, output.headers["location"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlCreateBucketCommand = deserializeAws_restXmlCreateBucketCommand;
    var deserializeAws_restXmlCreateBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "BucketAlreadyExists":
        case "com.amazonaws.s3#BucketAlreadyExists":
          throw await deserializeAws_restXmlBucketAlreadyExistsResponse(parsedOutput, context);
        case "BucketAlreadyOwnedByYou":
        case "com.amazonaws.s3#BucketAlreadyOwnedByYou":
          throw await deserializeAws_restXmlBucketAlreadyOwnedByYouResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlCreateMultipartUploadCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlCreateMultipartUploadCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ChecksumAlgorithm: [, output.headers["x-amz-checksum-algorithm"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(data["UploadId"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlCreateMultipartUploadCommand = deserializeAws_restXmlCreateMultipartUploadCommand;
    var deserializeAws_restXmlCreateMultipartUploadCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketCommand = deserializeAws_restXmlDeleteBucketCommand;
    var deserializeAws_restXmlDeleteBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand = deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand;
    var deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketCorsCommand = deserializeAws_restXmlDeleteBucketCorsCommand;
    var deserializeAws_restXmlDeleteBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketEncryptionCommand = deserializeAws_restXmlDeleteBucketEncryptionCommand;
    var deserializeAws_restXmlDeleteBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand;
    var deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand = deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand;
    var deserializeAws_restXmlDeleteBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketLifecycleCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketLifecycleCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketLifecycleCommand = deserializeAws_restXmlDeleteBucketLifecycleCommand;
    var deserializeAws_restXmlDeleteBucketLifecycleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand = deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand;
    var deserializeAws_restXmlDeleteBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand = deserializeAws_restXmlDeleteBucketOwnershipControlsCommand;
    var deserializeAws_restXmlDeleteBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketPolicyCommand = deserializeAws_restXmlDeleteBucketPolicyCommand;
    var deserializeAws_restXmlDeleteBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketReplicationCommand = deserializeAws_restXmlDeleteBucketReplicationCommand;
    var deserializeAws_restXmlDeleteBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketTaggingCommand = deserializeAws_restXmlDeleteBucketTaggingCommand;
    var deserializeAws_restXmlDeleteBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteBucketWebsiteCommand = deserializeAws_restXmlDeleteBucketWebsiteCommand;
    var deserializeAws_restXmlDeleteBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteObjectCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteObjectCommand = deserializeAws_restXmlDeleteObjectCommand;
    var deserializeAws_restXmlDeleteObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Deleted === "") {
        contents.Deleted = [];
      } else if (data["Deleted"] !== void 0) {
        contents.Deleted = deserializeAws_restXmlDeletedObjects((0, smithy_client_1.getArrayIfSingleItem)(data["Deleted"]), context);
      }
      if (data.Error === "") {
        contents.Errors = [];
      } else if (data["Error"] !== void 0) {
        contents.Errors = deserializeAws_restXmlErrors((0, smithy_client_1.getArrayIfSingleItem)(data["Error"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteObjectsCommand = deserializeAws_restXmlDeleteObjectsCommand;
    var deserializeAws_restXmlDeleteObjectsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeleteObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeleteObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeleteObjectTaggingCommand = deserializeAws_restXmlDeleteObjectTaggingCommand;
    var deserializeAws_restXmlDeleteObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlDeletePublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 204 && output.statusCode >= 300) {
        return deserializeAws_restXmlDeletePublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlDeletePublicAccessBlockCommand = deserializeAws_restXmlDeletePublicAccessBlockCommand;
    var deserializeAws_restXmlDeletePublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(data["Status"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand = deserializeAws_restXmlGetBucketAccelerateConfigurationCommand;
    var deserializeAws_restXmlGetBucketAccelerateConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = deserializeAws_restXmlGrants((0, smithy_client_1.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketAclCommand = deserializeAws_restXmlGetBucketAclCommand;
    var deserializeAws_restXmlGetBucketAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.AnalyticsConfiguration = deserializeAws_restXmlAnalyticsConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand = deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand;
    var deserializeAws_restXmlGetBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CORSRule === "") {
        contents.CORSRules = [];
      } else if (data["CORSRule"] !== void 0) {
        contents.CORSRules = deserializeAws_restXmlCORSRules((0, smithy_client_1.getArrayIfSingleItem)(data["CORSRule"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketCorsCommand = deserializeAws_restXmlGetBucketCorsCommand;
    var deserializeAws_restXmlGetBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ServerSideEncryptionConfiguration = deserializeAws_restXmlServerSideEncryptionConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketEncryptionCommand = deserializeAws_restXmlGetBucketEncryptionCommand;
    var deserializeAws_restXmlGetBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.IntelligentTieringConfiguration = deserializeAws_restXmlIntelligentTieringConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand;
    var deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.InventoryConfiguration = deserializeAws_restXmlInventoryConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketInventoryConfigurationCommand = deserializeAws_restXmlGetBucketInventoryConfigurationCommand;
    var deserializeAws_restXmlGetBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Rule === "") {
        contents.Rules = [];
      } else if (data["Rule"] !== void 0) {
        contents.Rules = deserializeAws_restXmlLifecycleRules((0, smithy_client_1.getArrayIfSingleItem)(data["Rule"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand = deserializeAws_restXmlGetBucketLifecycleConfigurationCommand;
    var deserializeAws_restXmlGetBucketLifecycleConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketLocationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLocationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["LocationConstraint"] !== void 0) {
        contents.LocationConstraint = (0, smithy_client_1.expectString)(data["LocationConstraint"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketLocationCommand = deserializeAws_restXmlGetBucketLocationCommand;
    var deserializeAws_restXmlGetBucketLocationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketLoggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["LoggingEnabled"] !== void 0) {
        contents.LoggingEnabled = deserializeAws_restXmlLoggingEnabled(data["LoggingEnabled"], context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketLoggingCommand = deserializeAws_restXmlGetBucketLoggingCommand;
    var deserializeAws_restXmlGetBucketLoggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.MetricsConfiguration = deserializeAws_restXmlMetricsConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketMetricsConfigurationCommand = deserializeAws_restXmlGetBucketMetricsConfigurationCommand;
    var deserializeAws_restXmlGetBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["EventBridgeConfiguration"] !== void 0) {
        contents.EventBridgeConfiguration = deserializeAws_restXmlEventBridgeConfiguration(data["EventBridgeConfiguration"], context);
      }
      if (data.CloudFunctionConfiguration === "") {
        contents.LambdaFunctionConfigurations = [];
      } else if (data["CloudFunctionConfiguration"] !== void 0) {
        contents.LambdaFunctionConfigurations = deserializeAws_restXmlLambdaFunctionConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["CloudFunctionConfiguration"]), context);
      }
      if (data.QueueConfiguration === "") {
        contents.QueueConfigurations = [];
      } else if (data["QueueConfiguration"] !== void 0) {
        contents.QueueConfigurations = deserializeAws_restXmlQueueConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["QueueConfiguration"]), context);
      }
      if (data.TopicConfiguration === "") {
        contents.TopicConfigurations = [];
      } else if (data["TopicConfiguration"] !== void 0) {
        contents.TopicConfigurations = deserializeAws_restXmlTopicConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["TopicConfiguration"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketNotificationConfigurationCommand = deserializeAws_restXmlGetBucketNotificationConfigurationCommand;
    var deserializeAws_restXmlGetBucketNotificationConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.OwnershipControls = deserializeAws_restXmlOwnershipControls(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketOwnershipControlsCommand = deserializeAws_restXmlGetBucketOwnershipControlsCommand;
    var deserializeAws_restXmlGetBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = await collectBodyString(output.body, context);
      contents.Policy = (0, smithy_client_1.expectString)(data);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketPolicyCommand = deserializeAws_restXmlGetBucketPolicyCommand;
    var deserializeAws_restXmlGetBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketPolicyStatusCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketPolicyStatusCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.PolicyStatus = deserializeAws_restXmlPolicyStatus(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketPolicyStatusCommand = deserializeAws_restXmlGetBucketPolicyStatusCommand;
    var deserializeAws_restXmlGetBucketPolicyStatusCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ReplicationConfiguration = deserializeAws_restXmlReplicationConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketReplicationCommand = deserializeAws_restXmlGetBucketReplicationCommand;
    var deserializeAws_restXmlGetBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketRequestPaymentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Payer"] !== void 0) {
        contents.Payer = (0, smithy_client_1.expectString)(data["Payer"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketRequestPaymentCommand = deserializeAws_restXmlGetBucketRequestPaymentCommand;
    var deserializeAws_restXmlGetBucketRequestPaymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketTaggingCommand = deserializeAws_restXmlGetBucketTaggingCommand;
    var deserializeAws_restXmlGetBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketVersioningCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["MfaDelete"] !== void 0) {
        contents.MFADelete = (0, smithy_client_1.expectString)(data["MfaDelete"]);
      }
      if (data["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(data["Status"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketVersioningCommand = deserializeAws_restXmlGetBucketVersioningCommand;
    var deserializeAws_restXmlGetBucketVersioningCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ErrorDocument"] !== void 0) {
        contents.ErrorDocument = deserializeAws_restXmlErrorDocument(data["ErrorDocument"], context);
      }
      if (data["IndexDocument"] !== void 0) {
        contents.IndexDocument = deserializeAws_restXmlIndexDocument(data["IndexDocument"], context);
      }
      if (data["RedirectAllRequestsTo"] !== void 0) {
        contents.RedirectAllRequestsTo = deserializeAws_restXmlRedirectAllRequestsTo(data["RedirectAllRequestsTo"], context);
      }
      if (data.RoutingRules === "") {
        contents.RoutingRules = [];
      } else if (data["RoutingRules"] !== void 0 && data["RoutingRules"]["RoutingRule"] !== void 0) {
        contents.RoutingRules = deserializeAws_restXmlRoutingRules((0, smithy_client_1.getArrayIfSingleItem)(data["RoutingRules"]["RoutingRule"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetBucketWebsiteCommand = deserializeAws_restXmlGetBucketWebsiteCommand;
    var deserializeAws_restXmlGetBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => (0, smithy_client_1.strictParseLong)(output.headers["content-length"])
        ],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentRange: [, output.headers["content-range"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        TagCount: [
          () => void 0 !== output.headers["x-amz-tagging-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-tagging-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectCommand = deserializeAws_restXmlGetObjectCommand;
    var deserializeAws_restXmlGetObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidObjectState":
        case "com.amazonaws.s3#InvalidObjectState":
          throw await deserializeAws_restXmlInvalidObjectStateResponse(parsedOutput, context);
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlGetObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AccessControlList === "") {
        contents.Grants = [];
      } else if (data["AccessControlList"] !== void 0 && data["AccessControlList"]["Grant"] !== void 0) {
        contents.Grants = deserializeAws_restXmlGrants((0, smithy_client_1.getArrayIfSingleItem)(data["AccessControlList"]["Grant"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectAclCommand = deserializeAws_restXmlGetObjectAclCommand;
    var deserializeAws_restXmlGetObjectAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlGetObjectAttributesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectAttributesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Checksum"] !== void 0) {
        contents.Checksum = deserializeAws_restXmlChecksum(data["Checksum"], context);
      }
      if (data["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(data["ETag"]);
      }
      if (data["ObjectParts"] !== void 0) {
        contents.ObjectParts = deserializeAws_restXmlGetObjectAttributesParts(data["ObjectParts"], context);
      }
      if (data["ObjectSize"] !== void 0) {
        contents.ObjectSize = (0, smithy_client_1.strictParseLong)(data["ObjectSize"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectAttributesCommand = deserializeAws_restXmlGetObjectAttributesCommand;
    var deserializeAws_restXmlGetObjectAttributesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlGetObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectLegalHoldCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.LegalHold = deserializeAws_restXmlObjectLockLegalHold(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectLegalHoldCommand = deserializeAws_restXmlGetObjectLegalHoldCommand;
    var deserializeAws_restXmlGetObjectLegalHoldCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectLockConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.ObjectLockConfiguration = deserializeAws_restXmlObjectLockConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectLockConfigurationCommand = deserializeAws_restXmlGetObjectLockConfigurationCommand;
    var deserializeAws_restXmlGetObjectLockConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectRetentionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.Retention = deserializeAws_restXmlObjectLockRetention(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectRetentionCommand = deserializeAws_restXmlGetObjectRetentionCommand;
    var deserializeAws_restXmlGetObjectRetentionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.TagSet === "") {
        contents.TagSet = [];
      } else if (data["TagSet"] !== void 0 && data["TagSet"]["Tag"] !== void 0) {
        contents.TagSet = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(data["TagSet"]["Tag"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectTaggingCommand = deserializeAws_restXmlGetObjectTaggingCommand;
    var deserializeAws_restXmlGetObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetObjectTorrentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetObjectTorrentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = output.body;
      context.sdkStreamMixin(data);
      contents.Body = data;
      return contents;
    };
    exports2.deserializeAws_restXmlGetObjectTorrentCommand = deserializeAws_restXmlGetObjectTorrentCommand;
    var deserializeAws_restXmlGetObjectTorrentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlGetPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlGetPublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.PublicAccessBlockConfiguration = deserializeAws_restXmlPublicAccessBlockConfiguration(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlGetPublicAccessBlockCommand = deserializeAws_restXmlGetPublicAccessBlockCommand;
    var deserializeAws_restXmlGetPublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlHeadBucketCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlHeadBucketCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlHeadBucketCommand = deserializeAws_restXmlHeadBucketCommand;
    var deserializeAws_restXmlHeadBucketCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlHeadObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlHeadObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        DeleteMarker: [
          () => void 0 !== output.headers["x-amz-delete-marker"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-delete-marker"])
        ],
        AcceptRanges: [, output.headers["accept-ranges"]],
        Expiration: [, output.headers["x-amz-expiration"]],
        Restore: [, output.headers["x-amz-restore"]],
        ArchiveStatus: [, output.headers["x-amz-archive-status"]],
        LastModified: [
          () => void 0 !== output.headers["last-modified"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["last-modified"]))
        ],
        ContentLength: [
          () => void 0 !== output.headers["content-length"],
          () => (0, smithy_client_1.strictParseLong)(output.headers["content-length"])
        ],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ETag: [, output.headers["etag"]],
        MissingMeta: [
          () => void 0 !== output.headers["x-amz-missing-meta"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-missing-meta"])
        ],
        VersionId: [, output.headers["x-amz-version-id"]],
        CacheControl: [, output.headers["cache-control"]],
        ContentDisposition: [, output.headers["content-disposition"]],
        ContentEncoding: [, output.headers["content-encoding"]],
        ContentLanguage: [, output.headers["content-language"]],
        ContentType: [, output.headers["content-type"]],
        Expires: [
          () => void 0 !== output.headers["expires"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["expires"]))
        ],
        WebsiteRedirectLocation: [, output.headers["x-amz-website-redirect-location"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        StorageClass: [, output.headers["x-amz-storage-class"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        ReplicationStatus: [, output.headers["x-amz-replication-status"]],
        PartsCount: [
          () => void 0 !== output.headers["x-amz-mp-parts-count"],
          () => (0, smithy_client_1.strictParseInt32)(output.headers["x-amz-mp-parts-count"])
        ],
        ObjectLockMode: [, output.headers["x-amz-object-lock-mode"]],
        ObjectLockRetainUntilDate: [
          () => void 0 !== output.headers["x-amz-object-lock-retain-until-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output.headers["x-amz-object-lock-retain-until-date"]))
        ],
        ObjectLockLegalHoldStatus: [, output.headers["x-amz-object-lock-legal-hold"]],
        Metadata: [
          ,
          Object.keys(output.headers).filter((header) => header.startsWith("x-amz-meta-")).reduce((acc, header) => {
            acc[header.substring(11)] = output.headers[header];
            return acc;
          }, {})
        ]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlHeadObjectCommand = deserializeAws_restXmlHeadObjectCommand;
    var deserializeAws_restXmlHeadObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NotFound":
        case "com.amazonaws.s3#NotFound":
          throw await deserializeAws_restXmlNotFoundResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.AnalyticsConfiguration === "") {
        contents.AnalyticsConfigurationList = [];
      } else if (data["AnalyticsConfiguration"] !== void 0) {
        contents.AnalyticsConfigurationList = deserializeAws_restXmlAnalyticsConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["AnalyticsConfiguration"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand = deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand;
    var deserializeAws_restXmlListBucketAnalyticsConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data.IntelligentTieringConfiguration === "") {
        contents.IntelligentTieringConfigurationList = [];
      } else if (data["IntelligentTieringConfiguration"] !== void 0) {
        contents.IntelligentTieringConfigurationList = deserializeAws_restXmlIntelligentTieringConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["IntelligentTieringConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand = deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand;
    var deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListBucketInventoryConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketInventoryConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data.InventoryConfiguration === "") {
        contents.InventoryConfigurationList = [];
      } else if (data["InventoryConfiguration"] !== void 0) {
        contents.InventoryConfigurationList = deserializeAws_restXmlInventoryConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["InventoryConfiguration"]), context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListBucketInventoryConfigurationsCommand = deserializeAws_restXmlListBucketInventoryConfigurationsCommand;
    var deserializeAws_restXmlListBucketInventoryConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListBucketMetricsConfigurationsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketMetricsConfigurationsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data.MetricsConfiguration === "") {
        contents.MetricsConfigurationList = [];
      } else if (data["MetricsConfiguration"] !== void 0) {
        contents.MetricsConfigurationList = deserializeAws_restXmlMetricsConfigurationList((0, smithy_client_1.getArrayIfSingleItem)(data["MetricsConfiguration"]), context);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListBucketMetricsConfigurationsCommand = deserializeAws_restXmlListBucketMetricsConfigurationsCommand;
    var deserializeAws_restXmlListBucketMetricsConfigurationsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListBucketsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListBucketsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.Buckets === "") {
        contents.Buckets = [];
      } else if (data["Buckets"] !== void 0 && data["Buckets"]["Bucket"] !== void 0) {
        contents.Buckets = deserializeAws_restXmlBuckets((0, smithy_client_1.getArrayIfSingleItem)(data["Buckets"]["Bucket"]), context);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListBucketsCommand = deserializeAws_restXmlListBucketsCommand;
    var deserializeAws_restXmlListBucketsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListMultipartUploadsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListMultipartUploadsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = (0, smithy_client_1.expectString)(data["KeyMarker"]);
      }
      if (data["MaxUploads"] !== void 0) {
        contents.MaxUploads = (0, smithy_client_1.strictParseInt32)(data["MaxUploads"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = (0, smithy_client_1.expectString)(data["NextKeyMarker"]);
      }
      if (data["NextUploadIdMarker"] !== void 0) {
        contents.NextUploadIdMarker = (0, smithy_client_1.expectString)(data["NextUploadIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["UploadIdMarker"] !== void 0) {
        contents.UploadIdMarker = (0, smithy_client_1.expectString)(data["UploadIdMarker"]);
      }
      if (data.Upload === "") {
        contents.Uploads = [];
      } else if (data["Upload"] !== void 0) {
        contents.Uploads = deserializeAws_restXmlMultipartUploadList((0, smithy_client_1.getArrayIfSingleItem)(data["Upload"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListMultipartUploadsCommand = deserializeAws_restXmlListMultipartUploadsCommand;
    var deserializeAws_restXmlListMultipartUploadsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListObjectsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = deserializeAws_restXmlObjectList((0, smithy_client_1.getArrayIfSingleItem)(data["Contents"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["Marker"] !== void 0) {
        contents.Marker = (0, smithy_client_1.expectString)(data["Marker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextMarker"] !== void 0) {
        contents.NextMarker = (0, smithy_client_1.expectString)(data["NextMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListObjectsCommand = deserializeAws_restXmlListObjectsCommand;
    var deserializeAws_restXmlListObjectsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlListObjectsV2Command = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectsV2CommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.Contents === "") {
        contents.Contents = [];
      } else if (data["Contents"] !== void 0) {
        contents.Contents = deserializeAws_restXmlObjectList((0, smithy_client_1.getArrayIfSingleItem)(data["Contents"]), context);
      }
      if (data["ContinuationToken"] !== void 0) {
        contents.ContinuationToken = (0, smithy_client_1.expectString)(data["ContinuationToken"]);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyCount"] !== void 0) {
        contents.KeyCount = (0, smithy_client_1.strictParseInt32)(data["KeyCount"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextContinuationToken"] !== void 0) {
        contents.NextContinuationToken = (0, smithy_client_1.expectString)(data["NextContinuationToken"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["StartAfter"] !== void 0) {
        contents.StartAfter = (0, smithy_client_1.expectString)(data["StartAfter"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListObjectsV2Command = deserializeAws_restXmlListObjectsV2Command;
    var deserializeAws_restXmlListObjectsV2CommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchBucket":
        case "com.amazonaws.s3#NoSuchBucket":
          throw await deserializeAws_restXmlNoSuchBucketResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlListObjectVersionsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListObjectVersionsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.CommonPrefixes === "") {
        contents.CommonPrefixes = [];
      } else if (data["CommonPrefixes"] !== void 0) {
        contents.CommonPrefixes = deserializeAws_restXmlCommonPrefixList((0, smithy_client_1.getArrayIfSingleItem)(data["CommonPrefixes"]), context);
      }
      if (data.DeleteMarker === "") {
        contents.DeleteMarkers = [];
      } else if (data["DeleteMarker"] !== void 0) {
        contents.DeleteMarkers = deserializeAws_restXmlDeleteMarkers((0, smithy_client_1.getArrayIfSingleItem)(data["DeleteMarker"]), context);
      }
      if (data["Delimiter"] !== void 0) {
        contents.Delimiter = (0, smithy_client_1.expectString)(data["Delimiter"]);
      }
      if (data["EncodingType"] !== void 0) {
        contents.EncodingType = (0, smithy_client_1.expectString)(data["EncodingType"]);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["KeyMarker"] !== void 0) {
        contents.KeyMarker = (0, smithy_client_1.expectString)(data["KeyMarker"]);
      }
      if (data["MaxKeys"] !== void 0) {
        contents.MaxKeys = (0, smithy_client_1.strictParseInt32)(data["MaxKeys"]);
      }
      if (data["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(data["Name"]);
      }
      if (data["NextKeyMarker"] !== void 0) {
        contents.NextKeyMarker = (0, smithy_client_1.expectString)(data["NextKeyMarker"]);
      }
      if (data["NextVersionIdMarker"] !== void 0) {
        contents.NextVersionIdMarker = (0, smithy_client_1.expectString)(data["NextVersionIdMarker"]);
      }
      if (data["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(data["Prefix"]);
      }
      if (data["VersionIdMarker"] !== void 0) {
        contents.VersionIdMarker = (0, smithy_client_1.expectString)(data["VersionIdMarker"]);
      }
      if (data.Version === "") {
        contents.Versions = [];
      } else if (data["Version"] !== void 0) {
        contents.Versions = deserializeAws_restXmlObjectVersionList((0, smithy_client_1.getArrayIfSingleItem)(data["Version"]), context);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListObjectVersionsCommand = deserializeAws_restXmlListObjectVersionsCommand;
    var deserializeAws_restXmlListObjectVersionsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlListPartsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlListPartsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        AbortDate: [
          () => void 0 !== output.headers["x-amz-abort-date"],
          () => (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc7231DateTime)(output.headers["x-amz-abort-date"]))
        ],
        AbortRuleId: [, output.headers["x-amz-abort-rule-id"]],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(data["Bucket"]);
      }
      if (data["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = (0, smithy_client_1.expectString)(data["ChecksumAlgorithm"]);
      }
      if (data["Initiator"] !== void 0) {
        contents.Initiator = deserializeAws_restXmlInitiator(data["Initiator"], context);
      }
      if (data["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(data["IsTruncated"]);
      }
      if (data["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(data["Key"]);
      }
      if (data["MaxParts"] !== void 0) {
        contents.MaxParts = (0, smithy_client_1.strictParseInt32)(data["MaxParts"]);
      }
      if (data["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = (0, smithy_client_1.expectString)(data["NextPartNumberMarker"]);
      }
      if (data["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(data["Owner"], context);
      }
      if (data["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = (0, smithy_client_1.expectString)(data["PartNumberMarker"]);
      }
      if (data.Part === "") {
        contents.Parts = [];
      } else if (data["Part"] !== void 0) {
        contents.Parts = deserializeAws_restXmlParts((0, smithy_client_1.getArrayIfSingleItem)(data["Part"]), context);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      if (data["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(data["UploadId"]);
      }
      return contents;
    };
    exports2.deserializeAws_restXmlListPartsCommand = deserializeAws_restXmlListPartsCommand;
    var deserializeAws_restXmlListPartsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand = deserializeAws_restXmlPutBucketAccelerateConfigurationCommand;
    var deserializeAws_restXmlPutBucketAccelerateConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketAclCommand = deserializeAws_restXmlPutBucketAclCommand;
    var deserializeAws_restXmlPutBucketAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand = deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand;
    var deserializeAws_restXmlPutBucketAnalyticsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketCorsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketCorsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketCorsCommand = deserializeAws_restXmlPutBucketCorsCommand;
    var deserializeAws_restXmlPutBucketCorsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketEncryptionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketEncryptionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketEncryptionCommand = deserializeAws_restXmlPutBucketEncryptionCommand;
    var deserializeAws_restXmlPutBucketEncryptionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand = deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand;
    var deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketInventoryConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketInventoryConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketInventoryConfigurationCommand = deserializeAws_restXmlPutBucketInventoryConfigurationCommand;
    var deserializeAws_restXmlPutBucketInventoryConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand = deserializeAws_restXmlPutBucketLifecycleConfigurationCommand;
    var deserializeAws_restXmlPutBucketLifecycleConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketLoggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketLoggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketLoggingCommand = deserializeAws_restXmlPutBucketLoggingCommand;
    var deserializeAws_restXmlPutBucketLoggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketMetricsConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketMetricsConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketMetricsConfigurationCommand = deserializeAws_restXmlPutBucketMetricsConfigurationCommand;
    var deserializeAws_restXmlPutBucketMetricsConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketNotificationConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketNotificationConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketNotificationConfigurationCommand = deserializeAws_restXmlPutBucketNotificationConfigurationCommand;
    var deserializeAws_restXmlPutBucketNotificationConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketOwnershipControlsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketOwnershipControlsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketOwnershipControlsCommand = deserializeAws_restXmlPutBucketOwnershipControlsCommand;
    var deserializeAws_restXmlPutBucketOwnershipControlsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketPolicyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketPolicyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketPolicyCommand = deserializeAws_restXmlPutBucketPolicyCommand;
    var deserializeAws_restXmlPutBucketPolicyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketReplicationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketReplicationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketReplicationCommand = deserializeAws_restXmlPutBucketReplicationCommand;
    var deserializeAws_restXmlPutBucketReplicationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketRequestPaymentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketRequestPaymentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketRequestPaymentCommand = deserializeAws_restXmlPutBucketRequestPaymentCommand;
    var deserializeAws_restXmlPutBucketRequestPaymentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketTaggingCommand = deserializeAws_restXmlPutBucketTaggingCommand;
    var deserializeAws_restXmlPutBucketTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketVersioningCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketVersioningCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketVersioningCommand = deserializeAws_restXmlPutBucketVersioningCommand;
    var deserializeAws_restXmlPutBucketVersioningCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutBucketWebsiteCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutBucketWebsiteCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutBucketWebsiteCommand = deserializeAws_restXmlPutBucketWebsiteCommand;
    var deserializeAws_restXmlPutBucketWebsiteCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        Expiration: [, output.headers["x-amz-expiration"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        VersionId: [, output.headers["x-amz-version-id"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        SSEKMSEncryptionContext: [, output.headers["x-amz-server-side-encryption-context"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectCommand = deserializeAws_restXmlPutObjectCommand;
    var deserializeAws_restXmlPutObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutObjectAclCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectAclCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectAclCommand = deserializeAws_restXmlPutObjectAclCommand;
    var deserializeAws_restXmlPutObjectAclCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "NoSuchKey":
        case "com.amazonaws.s3#NoSuchKey":
          throw await deserializeAws_restXmlNoSuchKeyResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlPutObjectLegalHoldCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectLegalHoldCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectLegalHoldCommand = deserializeAws_restXmlPutObjectLegalHoldCommand;
    var deserializeAws_restXmlPutObjectLegalHoldCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutObjectLockConfigurationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectLockConfigurationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectLockConfigurationCommand = deserializeAws_restXmlPutObjectLockConfigurationCommand;
    var deserializeAws_restXmlPutObjectLockConfigurationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutObjectRetentionCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectRetentionCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectRetentionCommand = deserializeAws_restXmlPutObjectRetentionCommand;
    var deserializeAws_restXmlPutObjectRetentionCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutObjectTaggingCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutObjectTaggingCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        VersionId: [, output.headers["x-amz-version-id"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutObjectTaggingCommand = deserializeAws_restXmlPutObjectTaggingCommand;
    var deserializeAws_restXmlPutObjectTaggingCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlPutPublicAccessBlockCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlPutPublicAccessBlockCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlPutPublicAccessBlockCommand = deserializeAws_restXmlPutPublicAccessBlockCommand;
    var deserializeAws_restXmlPutPublicAccessBlockCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlRestoreObjectCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlRestoreObjectCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        RequestCharged: [, output.headers["x-amz-request-charged"]],
        RestoreOutputPath: [, output.headers["x-amz-restore-output-path"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlRestoreObjectCommand = deserializeAws_restXmlRestoreObjectCommand;
    var deserializeAws_restXmlRestoreObjectCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ObjectAlreadyInActiveTierError":
        case "com.amazonaws.s3#ObjectAlreadyInActiveTierError":
          throw await deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: S3ServiceException_1.S3ServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restXmlSelectObjectContentCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlSelectObjectContentCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = output.body;
      contents.Payload = deserializeAws_restXmlSelectObjectContentEventStream(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlSelectObjectContentCommand = deserializeAws_restXmlSelectObjectContentCommand;
    var deserializeAws_restXmlSelectObjectContentCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlUploadPartCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUploadPartCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        ETag: [, output.headers["etag"]],
        ChecksumCRC32: [, output.headers["x-amz-checksum-crc32"]],
        ChecksumCRC32C: [, output.headers["x-amz-checksum-crc32c"]],
        ChecksumSHA1: [, output.headers["x-amz-checksum-sha1"]],
        ChecksumSHA256: [, output.headers["x-amz-checksum-sha256"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlUploadPartCommand = deserializeAws_restXmlUploadPartCommand;
    var deserializeAws_restXmlUploadPartCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlUploadPartCopyCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlUploadPartCopyCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output),
        CopySourceVersionId: [, output.headers["x-amz-copy-source-version-id"]],
        ServerSideEncryption: [, output.headers["x-amz-server-side-encryption"]],
        SSECustomerAlgorithm: [, output.headers["x-amz-server-side-encryption-customer-algorithm"]],
        SSECustomerKeyMD5: [, output.headers["x-amz-server-side-encryption-customer-key-md5"]],
        SSEKMSKeyId: [, output.headers["x-amz-server-side-encryption-aws-kms-key-id"]],
        BucketKeyEnabled: [
          () => void 0 !== output.headers["x-amz-server-side-encryption-bucket-key-enabled"],
          () => (0, smithy_client_1.parseBoolean)(output.headers["x-amz-server-side-encryption-bucket-key-enabled"])
        ],
        RequestCharged: [, output.headers["x-amz-request-charged"]]
      });
      const data = (0, smithy_client_1.expectObject)(await parseBody(output.body, context));
      contents.CopyPartResult = deserializeAws_restXmlCopyPartResult(data, context);
      return contents;
    };
    exports2.deserializeAws_restXmlUploadPartCopyCommand = deserializeAws_restXmlUploadPartCopyCommand;
    var deserializeAws_restXmlUploadPartCopyCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var deserializeAws_restXmlWriteGetObjectResponseCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restXmlWriteGetObjectResponseCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restXmlWriteGetObjectResponseCommand = deserializeAws_restXmlWriteGetObjectResponseCommand;
    var deserializeAws_restXmlWriteGetObjectResponseCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestXmlErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody,
        exceptionCtor: S3ServiceException_1.S3ServiceException,
        errorCode
      });
    };
    var map = smithy_client_1.map;
    var deserializeAws_restXmlBucketAlreadyExistsResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.BucketAlreadyExists({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlBucketAlreadyOwnedByYouResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.BucketAlreadyOwnedByYou({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlInvalidObjectStateResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data["AccessTier"] !== void 0) {
        contents.AccessTier = (0, smithy_client_1.expectString)(data["AccessTier"]);
      }
      if (data["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(data["StorageClass"]);
      }
      const exception = new models_0_1.InvalidObjectState({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlNoSuchBucketResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchBucket({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlNoSuchKeyResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchKey({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlNoSuchUploadResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NoSuchUpload({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlNotFoundResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.NotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlObjectAlreadyInActiveTierErrorResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_1_1.ObjectAlreadyInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlObjectNotInActiveTierErrorResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      const exception = new models_0_1.ObjectNotInActiveTierError({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restXmlSelectObjectContentEventStream = (output, context) => {
      return context.eventStreamMarshaller.deserialize(output, async (event) => {
        if (event["Records"] != null) {
          return {
            Records: await deserializeAws_restXmlRecordsEvent_event(event["Records"], context)
          };
        }
        if (event["Stats"] != null) {
          return {
            Stats: await deserializeAws_restXmlStatsEvent_event(event["Stats"], context)
          };
        }
        if (event["Progress"] != null) {
          return {
            Progress: await deserializeAws_restXmlProgressEvent_event(event["Progress"], context)
          };
        }
        if (event["Cont"] != null) {
          return {
            Cont: await deserializeAws_restXmlContinuationEvent_event(event["Cont"], context)
          };
        }
        if (event["End"] != null) {
          return {
            End: await deserializeAws_restXmlEndEvent_event(event["End"], context)
          };
        }
        return { $unknown: output };
      });
    };
    var deserializeAws_restXmlContinuationEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      Object.assign(contents, deserializeAws_restXmlContinuationEvent(data, context));
      return contents;
    };
    var deserializeAws_restXmlEndEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      Object.assign(contents, deserializeAws_restXmlEndEvent(data, context));
      return contents;
    };
    var deserializeAws_restXmlProgressEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      contents.Details = deserializeAws_restXmlProgress(data, context);
      return contents;
    };
    var deserializeAws_restXmlRecordsEvent_event = async (output, context) => {
      const contents = {};
      contents.Payload = output.body;
      return contents;
    };
    var deserializeAws_restXmlStatsEvent_event = async (output, context) => {
      const contents = {};
      const data = await parseBody(output.body, context);
      contents.Details = deserializeAws_restXmlStats(data, context);
      return contents;
    };
    var serializeAws_restXmlAbortIncompleteMultipartUpload = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AbortIncompleteMultipartUpload");
      if (input.DaysAfterInitiation != null) {
        const node = xml_builder_1.XmlNode.of("DaysAfterInitiation", String(input.DaysAfterInitiation)).withName("DaysAfterInitiation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAccelerateConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccelerateConfiguration");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("BucketAccelerateStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAccessControlPolicy = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccessControlPolicy");
      if (input.Grants != null) {
        const nodes = serializeAws_restXmlGrants(input.Grants, context);
        const containerNode = new xml_builder_1.XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Owner != null) {
        const node = serializeAws_restXmlOwner(input.Owner, context).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAccessControlTranslation = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AccessControlTranslation");
      if (input.Owner != null) {
        const node = xml_builder_1.XmlNode.of("OwnerOverride", input.Owner).withName("Owner");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAllowedHeaders = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedHeader", entry);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlAllowedMethods = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedMethod", entry);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlAllowedOrigins = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("AllowedOrigin", entry);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlAnalyticsAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlAnalyticsConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("AnalyticsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlAnalyticsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClassAnalysis != null) {
        const node = serializeAws_restXmlStorageClassAnalysis(input.StorageClassAnalysis, context).withName("StorageClassAnalysis");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAnalyticsExportDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsExportDestination");
      if (input.S3BucketDestination != null) {
        const node = serializeAws_restXmlAnalyticsS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlAnalyticsFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsFilter");
      models_0_1.AnalyticsFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = serializeAws_restXmlTag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = serializeAws_restXmlAnalyticsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var serializeAws_restXmlAnalyticsS3BucketDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("AnalyticsS3BucketDestination");
      if (input.Format != null) {
        const node = xml_builder_1.XmlNode.of("AnalyticsS3ExportFileFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.BucketAccountId != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.BucketAccountId).withName("BucketAccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlBucketLifecycleConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("BucketLifecycleConfiguration");
      if (input.Rules != null) {
        const nodes = serializeAws_restXmlLifecycleRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlBucketLoggingStatus = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("BucketLoggingStatus");
      if (input.LoggingEnabled != null) {
        const node = serializeAws_restXmlLoggingEnabled(input.LoggingEnabled, context).withName("LoggingEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCompletedMultipartUpload = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CompletedMultipartUpload");
      if (input.Parts != null) {
        const nodes = serializeAws_restXmlCompletedPartList(input.Parts, context);
        nodes.map((node) => {
          node = node.withName("Part");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlCompletedPart = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CompletedPart");
      if (input.ETag != null) {
        const node = xml_builder_1.XmlNode.of("ETag", input.ETag).withName("ETag");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumCRC32", input.ChecksumCRC32).withName("ChecksumCRC32");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumCRC32C != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumCRC32C", input.ChecksumCRC32C).withName("ChecksumCRC32C");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA1 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumSHA1", input.ChecksumSHA1).withName("ChecksumSHA1");
        bodyNode.addChildNode(node);
      }
      if (input.ChecksumSHA256 != null) {
        const node = xml_builder_1.XmlNode.of("ChecksumSHA256", input.ChecksumSHA256).withName("ChecksumSHA256");
        bodyNode.addChildNode(node);
      }
      if (input.PartNumber != null) {
        const node = xml_builder_1.XmlNode.of("PartNumber", String(input.PartNumber)).withName("PartNumber");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCompletedPartList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlCompletedPart(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlCondition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Condition");
      if (input.HttpErrorCodeReturnedEquals != null) {
        const node = xml_builder_1.XmlNode.of("HttpErrorCodeReturnedEquals", input.HttpErrorCodeReturnedEquals).withName("HttpErrorCodeReturnedEquals");
        bodyNode.addChildNode(node);
      }
      if (input.KeyPrefixEquals != null) {
        const node = xml_builder_1.XmlNode.of("KeyPrefixEquals", input.KeyPrefixEquals).withName("KeyPrefixEquals");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCORSConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CORSConfiguration");
      if (input.CORSRules != null) {
        const nodes = serializeAws_restXmlCORSRules(input.CORSRules, context);
        nodes.map((node) => {
          node = node.withName("CORSRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlCORSRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CORSRule");
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.AllowedHeaders != null) {
        const nodes = serializeAws_restXmlAllowedHeaders(input.AllowedHeaders, context);
        nodes.map((node) => {
          node = node.withName("AllowedHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedMethods != null) {
        const nodes = serializeAws_restXmlAllowedMethods(input.AllowedMethods, context);
        nodes.map((node) => {
          node = node.withName("AllowedMethod");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AllowedOrigins != null) {
        const nodes = serializeAws_restXmlAllowedOrigins(input.AllowedOrigins, context);
        nodes.map((node) => {
          node = node.withName("AllowedOrigin");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ExposeHeaders != null) {
        const nodes = serializeAws_restXmlExposeHeaders(input.ExposeHeaders, context);
        nodes.map((node) => {
          node = node.withName("ExposeHeader");
          bodyNode.addChildNode(node);
        });
      }
      if (input.MaxAgeSeconds != null) {
        const node = xml_builder_1.XmlNode.of("MaxAgeSeconds", String(input.MaxAgeSeconds)).withName("MaxAgeSeconds");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCORSRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlCORSRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlCreateBucketConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CreateBucketConfiguration");
      if (input.LocationConstraint != null) {
        const node = xml_builder_1.XmlNode.of("BucketLocationConstraint", input.LocationConstraint).withName("LocationConstraint");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCSVInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CSVInput");
      if (input.FileHeaderInfo != null) {
        const node = xml_builder_1.XmlNode.of("FileHeaderInfo", input.FileHeaderInfo).withName("FileHeaderInfo");
        bodyNode.addChildNode(node);
      }
      if (input.Comments != null) {
        const node = xml_builder_1.XmlNode.of("Comments", input.Comments).withName("Comments");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.AllowQuotedRecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("AllowQuotedRecordDelimiter", String(input.AllowQuotedRecordDelimiter)).withName("AllowQuotedRecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlCSVOutput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("CSVOutput");
      if (input.QuoteFields != null) {
        const node = xml_builder_1.XmlNode.of("QuoteFields", input.QuoteFields).withName("QuoteFields");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteEscapeCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteEscapeCharacter", input.QuoteEscapeCharacter).withName("QuoteEscapeCharacter");
        bodyNode.addChildNode(node);
      }
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.FieldDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("FieldDelimiter", input.FieldDelimiter).withName("FieldDelimiter");
        bodyNode.addChildNode(node);
      }
      if (input.QuoteCharacter != null) {
        const node = xml_builder_1.XmlNode.of("QuoteCharacter", input.QuoteCharacter).withName("QuoteCharacter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlDefaultRetention = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("DefaultRetention");
      if (input.Mode != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.Years != null) {
        const node = xml_builder_1.XmlNode.of("Years", String(input.Years)).withName("Years");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlDelete = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Delete");
      if (input.Objects != null) {
        const nodes = serializeAws_restXmlObjectIdentifierList(input.Objects, context);
        nodes.map((node) => {
          node = node.withName("Object");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Quiet != null) {
        const node = xml_builder_1.XmlNode.of("Quiet", String(input.Quiet)).withName("Quiet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlDeleteMarkerReplication = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("DeleteMarkerReplication");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("DeleteMarkerReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Destination");
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Account != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.Account).withName("Account");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlTranslation != null) {
        const node = serializeAws_restXmlAccessControlTranslation(input.AccessControlTranslation, context).withName("AccessControlTranslation");
        bodyNode.addChildNode(node);
      }
      if (input.EncryptionConfiguration != null) {
        const node = serializeAws_restXmlEncryptionConfiguration(input.EncryptionConfiguration, context).withName("EncryptionConfiguration");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicationTime != null) {
        const node = serializeAws_restXmlReplicationTime(input.ReplicationTime, context).withName("ReplicationTime");
        bodyNode.addChildNode(node);
      }
      if (input.Metrics != null) {
        const node = serializeAws_restXmlMetrics(input.Metrics, context).withName("Metrics");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlEncryption = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Encryption");
      if (input.EncryptionType != null) {
        const node = xml_builder_1.XmlNode.of("ServerSideEncryption", input.EncryptionType).withName("EncryptionType");
        bodyNode.addChildNode(node);
      }
      if (input.KMSKeyId != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KMSKeyId).withName("KMSKeyId");
        bodyNode.addChildNode(node);
      }
      if (input.KMSContext != null) {
        const node = xml_builder_1.XmlNode.of("KMSContext", input.KMSContext).withName("KMSContext");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlEncryptionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("EncryptionConfiguration");
      if (input.ReplicaKmsKeyID != null) {
        const node = xml_builder_1.XmlNode.of("ReplicaKmsKeyID", input.ReplicaKmsKeyID).withName("ReplicaKmsKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlErrorDocument = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ErrorDocument");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlEventBridgeConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("EventBridgeConfiguration");
      return bodyNode;
    };
    var serializeAws_restXmlEventList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("Event", entry);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlExistingObjectReplication = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ExistingObjectReplication");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ExistingObjectReplicationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlExposeHeaders = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("ExposeHeader", entry);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlFilterRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("FilterRule");
      if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("FilterRuleName", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("FilterRuleValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlFilterRuleList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlFilterRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlGlacierJobParameters = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("GlacierJobParameters");
      if (input.Tier != null) {
        const node = xml_builder_1.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlGrant = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Grant");
      if (input.Grantee != null) {
        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = xml_builder_1.XmlNode.of("Permission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlGrantee = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Grantee");
      if (input.DisplayName != null) {
        const node = xml_builder_1.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.EmailAddress != null) {
        const node = xml_builder_1.XmlNode.of("EmailAddress", input.EmailAddress).withName("EmailAddress");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.URI != null) {
        const node = xml_builder_1.XmlNode.of("URI", input.URI).withName("URI");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        bodyNode.addAttribute("xsi:type", input.Type);
      }
      return bodyNode;
    };
    var serializeAws_restXmlGrants = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlGrant(entry, context);
        return node.withName("Grant");
      });
    };
    var serializeAws_restXmlIndexDocument = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IndexDocument");
      if (input.Suffix != null) {
        const node = xml_builder_1.XmlNode.of("Suffix", input.Suffix).withName("Suffix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInputSerialization = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InputSerialization");
      if (input.CSV != null) {
        const node = serializeAws_restXmlCSVInput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.CompressionType != null) {
        const node = xml_builder_1.XmlNode.of("CompressionType", input.CompressionType).withName("CompressionType");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = serializeAws_restXmlJSONInput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      if (input.Parquet != null) {
        const node = serializeAws_restXmlParquetInput(input.Parquet, context).withName("Parquet");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlIntelligentTieringAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlIntelligentTieringConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlIntelligentTieringFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Tierings != null) {
        const nodes = serializeAws_restXmlTieringList(input.Tierings, context);
        nodes.map((node) => {
          node = node.withName("Tiering");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlIntelligentTieringFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("IntelligentTieringFilter");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tag != null) {
        const node = serializeAws_restXmlTag(input.Tag, context).withName("Tag");
        bodyNode.addChildNode(node);
      }
      if (input.And != null) {
        const node = serializeAws_restXmlIntelligentTieringAndOperator(input.And, context).withName("And");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventoryConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryConfiguration");
      if (input.Destination != null) {
        const node = serializeAws_restXmlInventoryDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.IsEnabled != null) {
        const node = xml_builder_1.XmlNode.of("IsEnabled", String(input.IsEnabled)).withName("IsEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlInventoryFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("InventoryId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.IncludedObjectVersions != null) {
        const node = xml_builder_1.XmlNode.of("InventoryIncludedObjectVersions", input.IncludedObjectVersions).withName("IncludedObjectVersions");
        bodyNode.addChildNode(node);
      }
      if (input.OptionalFields != null) {
        const nodes = serializeAws_restXmlInventoryOptionalFields(input.OptionalFields, context);
        const containerNode = new xml_builder_1.XmlNode("OptionalFields");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Schedule != null) {
        const node = serializeAws_restXmlInventorySchedule(input.Schedule, context).withName("Schedule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventoryDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryDestination");
      if (input.S3BucketDestination != null) {
        const node = serializeAws_restXmlInventoryS3BucketDestination(input.S3BucketDestination, context).withName("S3BucketDestination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventoryEncryption = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryEncryption");
      if (input.SSES3 != null) {
        const node = serializeAws_restXmlSSES3(input.SSES3, context).withName("SSE-S3");
        bodyNode.addChildNode(node);
      }
      if (input.SSEKMS != null) {
        const node = serializeAws_restXmlSSEKMS(input.SSEKMS, context).withName("SSE-KMS");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventoryFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryFilter");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventoryOptionalFields = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = xml_builder_1.XmlNode.of("InventoryOptionalField", entry);
        return node.withName("Field");
      });
    };
    var serializeAws_restXmlInventoryS3BucketDestination = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventoryS3BucketDestination");
      if (input.AccountId != null) {
        const node = xml_builder_1.XmlNode.of("AccountId", input.AccountId).withName("AccountId");
        bodyNode.addChildNode(node);
      }
      if (input.Bucket != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.Bucket).withName("Bucket");
        bodyNode.addChildNode(node);
      }
      if (input.Format != null) {
        const node = xml_builder_1.XmlNode.of("InventoryFormat", input.Format).withName("Format");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = serializeAws_restXmlInventoryEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlInventorySchedule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("InventorySchedule");
      if (input.Frequency != null) {
        const node = xml_builder_1.XmlNode.of("InventoryFrequency", input.Frequency).withName("Frequency");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlJSONInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("JSONInput");
      if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("JSONType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlJSONOutput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("JSONOutput");
      if (input.RecordDelimiter != null) {
        const node = xml_builder_1.XmlNode.of("RecordDelimiter", input.RecordDelimiter).withName("RecordDelimiter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlLambdaFunctionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LambdaFunctionConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.LambdaFunctionArn != null) {
        const node = xml_builder_1.XmlNode.of("LambdaFunctionArn", input.LambdaFunctionArn).withName("CloudFunction");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlLambdaFunctionConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlLambdaFunctionConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlLifecycleExpiration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleExpiration");
      if (input.Date != null) {
        const node = xml_builder_1.XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.ExpiredObjectDeleteMarker != null) {
        const node = xml_builder_1.XmlNode.of("ExpiredObjectDeleteMarker", String(input.ExpiredObjectDeleteMarker)).withName("ExpiredObjectDeleteMarker");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlLifecycleRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRule");
      if (input.Expiration != null) {
        const node = serializeAws_restXmlLifecycleExpiration(input.Expiration, context).withName("Expiration");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlLifecycleRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ExpirationStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Transitions != null) {
        const nodes = serializeAws_restXmlTransitionList(input.Transitions, context);
        nodes.map((node) => {
          node = node.withName("Transition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionTransitions != null) {
        const nodes = serializeAws_restXmlNoncurrentVersionTransitionList(input.NoncurrentVersionTransitions, context);
        nodes.map((node) => {
          node = node.withName("NoncurrentVersionTransition");
          bodyNode.addChildNode(node);
        });
      }
      if (input.NoncurrentVersionExpiration != null) {
        const node = serializeAws_restXmlNoncurrentVersionExpiration(input.NoncurrentVersionExpiration, context).withName("NoncurrentVersionExpiration");
        bodyNode.addChildNode(node);
      }
      if (input.AbortIncompleteMultipartUpload != null) {
        const node = serializeAws_restXmlAbortIncompleteMultipartUpload(input.AbortIncompleteMultipartUpload, context).withName("AbortIncompleteMultipartUpload");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlLifecycleRuleAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.ObjectSizeGreaterThan != null) {
        const node = xml_builder_1.XmlNode.of("ObjectSizeGreaterThanBytes", String(input.ObjectSizeGreaterThan)).withName("ObjectSizeGreaterThan");
        bodyNode.addChildNode(node);
      }
      if (input.ObjectSizeLessThan != null) {
        const node = xml_builder_1.XmlNode.of("ObjectSizeLessThanBytes", String(input.ObjectSizeLessThan)).withName("ObjectSizeLessThan");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlLifecycleRuleFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LifecycleRuleFilter");
      models_0_1.LifecycleRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = serializeAws_restXmlTag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        ObjectSizeGreaterThan: (value) => {
          const node = xml_builder_1.XmlNode.of("ObjectSizeGreaterThanBytes", String(value)).withName("ObjectSizeGreaterThan");
          bodyNode.addChildNode(node);
        },
        ObjectSizeLessThan: (value) => {
          const node = xml_builder_1.XmlNode.of("ObjectSizeLessThanBytes", String(value)).withName("ObjectSizeLessThan");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = serializeAws_restXmlLifecycleRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var serializeAws_restXmlLifecycleRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlLifecycleRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlLoggingEnabled = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("LoggingEnabled");
      if (input.TargetBucket != null) {
        const node = xml_builder_1.XmlNode.of("TargetBucket", input.TargetBucket).withName("TargetBucket");
        bodyNode.addChildNode(node);
      }
      if (input.TargetGrants != null) {
        const nodes = serializeAws_restXmlTargetGrants(input.TargetGrants, context);
        const containerNode = new xml_builder_1.XmlNode("TargetGrants");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.TargetPrefix != null) {
        const node = xml_builder_1.XmlNode.of("TargetPrefix", input.TargetPrefix).withName("TargetPrefix");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlMetadataEntry = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetadataEntry");
      if (input.Name != null) {
        const node = xml_builder_1.XmlNode.of("MetadataKey", input.Name).withName("Name");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("MetadataValue", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlMetrics = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Metrics");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("MetricsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.EventThreshold != null) {
        const node = serializeAws_restXmlReplicationTimeValue(input.EventThreshold, context).withName("EventThreshold");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlMetricsAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      if (input.AccessPointArn != null) {
        const node = xml_builder_1.XmlNode.of("AccessPointArn", input.AccessPointArn).withName("AccessPointArn");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlMetricsConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("MetricsId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlMetricsFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlMetricsFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("MetricsFilter");
      models_0_1.MetricsFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = serializeAws_restXmlTag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        AccessPointArn: (value) => {
          const node = xml_builder_1.XmlNode.of("AccessPointArn", value).withName("AccessPointArn");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = serializeAws_restXmlMetricsAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var serializeAws_restXmlNoncurrentVersionExpiration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionExpiration");
      if (input.NoncurrentDays != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = xml_builder_1.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlNoncurrentVersionTransition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NoncurrentVersionTransition");
      if (input.NoncurrentDays != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.NoncurrentDays)).withName("NoncurrentDays");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      if (input.NewerNoncurrentVersions != null) {
        const node = xml_builder_1.XmlNode.of("VersionCount", String(input.NewerNoncurrentVersions)).withName("NewerNoncurrentVersions");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlNoncurrentVersionTransitionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlNoncurrentVersionTransition(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlNotificationConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NotificationConfiguration");
      if (input.TopicConfigurations != null) {
        const nodes = serializeAws_restXmlTopicConfigurationList(input.TopicConfigurations, context);
        nodes.map((node) => {
          node = node.withName("TopicConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.QueueConfigurations != null) {
        const nodes = serializeAws_restXmlQueueConfigurationList(input.QueueConfigurations, context);
        nodes.map((node) => {
          node = node.withName("QueueConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.LambdaFunctionConfigurations != null) {
        const nodes = serializeAws_restXmlLambdaFunctionConfigurationList(input.LambdaFunctionConfigurations, context);
        nodes.map((node) => {
          node = node.withName("CloudFunctionConfiguration");
          bodyNode.addChildNode(node);
        });
      }
      if (input.EventBridgeConfiguration != null) {
        const node = serializeAws_restXmlEventBridgeConfiguration(input.EventBridgeConfiguration, context).withName("EventBridgeConfiguration");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlNotificationConfigurationFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("NotificationConfigurationFilter");
      if (input.Key != null) {
        const node = serializeAws_restXmlS3KeyFilter(input.Key, context).withName("S3Key");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlObjectIdentifier = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectIdentifier");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.VersionId != null) {
        const node = xml_builder_1.XmlNode.of("ObjectVersionId", input.VersionId).withName("VersionId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlObjectIdentifierList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlObjectIdentifier(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlObjectLockConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockConfiguration");
      if (input.ObjectLockEnabled != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockEnabled", input.ObjectLockEnabled).withName("ObjectLockEnabled");
        bodyNode.addChildNode(node);
      }
      if (input.Rule != null) {
        const node = serializeAws_restXmlObjectLockRule(input.Rule, context).withName("Rule");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlObjectLockLegalHold = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockLegalHold");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockLegalHoldStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlObjectLockRetention = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockRetention");
      if (input.Mode != null) {
        const node = xml_builder_1.XmlNode.of("ObjectLockRetentionMode", input.Mode).withName("Mode");
        bodyNode.addChildNode(node);
      }
      if (input.RetainUntilDate != null) {
        const node = xml_builder_1.XmlNode.of("Date", input.RetainUntilDate.toISOString().split(".")[0] + "Z").withName("RetainUntilDate");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlObjectLockRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ObjectLockRule");
      if (input.DefaultRetention != null) {
        const node = serializeAws_restXmlDefaultRetention(input.DefaultRetention, context).withName("DefaultRetention");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlOutputLocation = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OutputLocation");
      if (input.S3 != null) {
        const node = serializeAws_restXmlS3Location(input.S3, context).withName("S3");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlOutputSerialization = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OutputSerialization");
      if (input.CSV != null) {
        const node = serializeAws_restXmlCSVOutput(input.CSV, context).withName("CSV");
        bodyNode.addChildNode(node);
      }
      if (input.JSON != null) {
        const node = serializeAws_restXmlJSONOutput(input.JSON, context).withName("JSON");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlOwner = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Owner");
      if (input.DisplayName != null) {
        const node = xml_builder_1.XmlNode.of("DisplayName", input.DisplayName).withName("DisplayName");
        bodyNode.addChildNode(node);
      }
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlOwnershipControls = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OwnershipControls");
      if (input.Rules != null) {
        const nodes = serializeAws_restXmlOwnershipControlsRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlOwnershipControlsRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("OwnershipControlsRule");
      if (input.ObjectOwnership != null) {
        const node = xml_builder_1.XmlNode.of("ObjectOwnership", input.ObjectOwnership).withName("ObjectOwnership");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlOwnershipControlsRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlOwnershipControlsRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlParquetInput = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ParquetInput");
      return bodyNode;
    };
    var serializeAws_restXmlPublicAccessBlockConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("PublicAccessBlockConfiguration");
      if (input.BlockPublicAcls != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.BlockPublicAcls)).withName("BlockPublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.IgnorePublicAcls != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.IgnorePublicAcls)).withName("IgnorePublicAcls");
        bodyNode.addChildNode(node);
      }
      if (input.BlockPublicPolicy != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.BlockPublicPolicy)).withName("BlockPublicPolicy");
        bodyNode.addChildNode(node);
      }
      if (input.RestrictPublicBuckets != null) {
        const node = xml_builder_1.XmlNode.of("Setting", String(input.RestrictPublicBuckets)).withName("RestrictPublicBuckets");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlQueueConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("QueueConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.QueueArn != null) {
        const node = xml_builder_1.XmlNode.of("QueueArn", input.QueueArn).withName("Queue");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlQueueConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlQueueConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlRedirect = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Redirect");
      if (input.HostName != null) {
        const node = xml_builder_1.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.HttpRedirectCode != null) {
        const node = xml_builder_1.XmlNode.of("HttpRedirectCode", input.HttpRedirectCode).withName("HttpRedirectCode");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = xml_builder_1.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyPrefixWith != null) {
        const node = xml_builder_1.XmlNode.of("ReplaceKeyPrefixWith", input.ReplaceKeyPrefixWith).withName("ReplaceKeyPrefixWith");
        bodyNode.addChildNode(node);
      }
      if (input.ReplaceKeyWith != null) {
        const node = xml_builder_1.XmlNode.of("ReplaceKeyWith", input.ReplaceKeyWith).withName("ReplaceKeyWith");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRedirectAllRequestsTo = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RedirectAllRequestsTo");
      if (input.HostName != null) {
        const node = xml_builder_1.XmlNode.of("HostName", input.HostName).withName("HostName");
        bodyNode.addChildNode(node);
      }
      if (input.Protocol != null) {
        const node = xml_builder_1.XmlNode.of("Protocol", input.Protocol).withName("Protocol");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicaModifications = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicaModifications");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicaModificationsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicationConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationConfiguration");
      if (input.Role != null) {
        const node = xml_builder_1.XmlNode.of("Role", input.Role).withName("Role");
        bodyNode.addChildNode(node);
      }
      if (input.Rules != null) {
        const nodes = serializeAws_restXmlReplicationRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicationRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRule");
      if (input.ID != null) {
        const node = xml_builder_1.XmlNode.of("ID", input.ID).withName("ID");
        bodyNode.addChildNode(node);
      }
      if (input.Priority != null) {
        const node = xml_builder_1.XmlNode.of("Priority", String(input.Priority)).withName("Priority");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlReplicationRuleFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicationRuleStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.SourceSelectionCriteria != null) {
        const node = serializeAws_restXmlSourceSelectionCriteria(input.SourceSelectionCriteria, context).withName("SourceSelectionCriteria");
        bodyNode.addChildNode(node);
      }
      if (input.ExistingObjectReplication != null) {
        const node = serializeAws_restXmlExistingObjectReplication(input.ExistingObjectReplication, context).withName("ExistingObjectReplication");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = serializeAws_restXmlDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      if (input.DeleteMarkerReplication != null) {
        const node = serializeAws_restXmlDeleteMarkerReplication(input.DeleteMarkerReplication, context).withName("DeleteMarkerReplication");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicationRuleAndOperator = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleAndOperator");
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("Prefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Tags != null) {
        const nodes = serializeAws_restXmlTagSet(input.Tags, context);
        nodes.map((node) => {
          node = node.withName("Tag");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicationRuleFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationRuleFilter");
      models_0_1.ReplicationRuleFilter.visit(input, {
        Prefix: (value) => {
          const node = xml_builder_1.XmlNode.of("Prefix", value).withName("Prefix");
          bodyNode.addChildNode(node);
        },
        Tag: (value) => {
          const node = serializeAws_restXmlTag(value, context).withName("Tag");
          bodyNode.addChildNode(node);
        },
        And: (value) => {
          const node = serializeAws_restXmlReplicationRuleAndOperator(value, context).withName("And");
          bodyNode.addChildNode(node);
        },
        _: (name, value) => {
          if (!(value instanceof xml_builder_1.XmlNode || value instanceof xml_builder_1.XmlText)) {
            throw new Error("Unable to serialize unknown union members in XML.");
          }
          bodyNode.addChildNode(new xml_builder_1.XmlNode(name).addChildNode(value));
        }
      });
      return bodyNode;
    };
    var serializeAws_restXmlReplicationRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlReplicationRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlReplicationTime = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationTime");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("ReplicationTimeStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      if (input.Time != null) {
        const node = serializeAws_restXmlReplicationTimeValue(input.Time, context).withName("Time");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlReplicationTimeValue = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ReplicationTimeValue");
      if (input.Minutes != null) {
        const node = xml_builder_1.XmlNode.of("Minutes", String(input.Minutes)).withName("Minutes");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRequestPaymentConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RequestPaymentConfiguration");
      if (input.Payer != null) {
        const node = xml_builder_1.XmlNode.of("Payer", input.Payer).withName("Payer");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRequestProgress = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RequestProgress");
      if (input.Enabled != null) {
        const node = xml_builder_1.XmlNode.of("EnableRequestProgress", String(input.Enabled)).withName("Enabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRestoreRequest = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RestoreRequest");
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.GlacierJobParameters != null) {
        const node = serializeAws_restXmlGlacierJobParameters(input.GlacierJobParameters, context).withName("GlacierJobParameters");
        bodyNode.addChildNode(node);
      }
      if (input.Type != null) {
        const node = xml_builder_1.XmlNode.of("RestoreRequestType", input.Type).withName("Type");
        bodyNode.addChildNode(node);
      }
      if (input.Tier != null) {
        const node = xml_builder_1.XmlNode.of("Tier", input.Tier).withName("Tier");
        bodyNode.addChildNode(node);
      }
      if (input.Description != null) {
        const node = xml_builder_1.XmlNode.of("Description", input.Description).withName("Description");
        bodyNode.addChildNode(node);
      }
      if (input.SelectParameters != null) {
        const node = serializeAws_restXmlSelectParameters(input.SelectParameters, context).withName("SelectParameters");
        bodyNode.addChildNode(node);
      }
      if (input.OutputLocation != null) {
        const node = serializeAws_restXmlOutputLocation(input.OutputLocation, context).withName("OutputLocation");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRoutingRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("RoutingRule");
      if (input.Condition != null) {
        const node = serializeAws_restXmlCondition(input.Condition, context).withName("Condition");
        bodyNode.addChildNode(node);
      }
      if (input.Redirect != null) {
        const node = serializeAws_restXmlRedirect(input.Redirect, context).withName("Redirect");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlRoutingRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlRoutingRule(entry, context);
        return node.withName("RoutingRule");
      });
    };
    var serializeAws_restXmlS3KeyFilter = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("S3KeyFilter");
      if (input.FilterRules != null) {
        const nodes = serializeAws_restXmlFilterRuleList(input.FilterRules, context);
        nodes.map((node) => {
          node = node.withName("FilterRule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlS3Location = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("S3Location");
      if (input.BucketName != null) {
        const node = xml_builder_1.XmlNode.of("BucketName", input.BucketName).withName("BucketName");
        bodyNode.addChildNode(node);
      }
      if (input.Prefix != null) {
        const node = xml_builder_1.XmlNode.of("LocationPrefix", input.Prefix).withName("Prefix");
        bodyNode.addChildNode(node);
      }
      if (input.Encryption != null) {
        const node = serializeAws_restXmlEncryption(input.Encryption, context).withName("Encryption");
        bodyNode.addChildNode(node);
      }
      if (input.CannedACL != null) {
        const node = xml_builder_1.XmlNode.of("ObjectCannedACL", input.CannedACL).withName("CannedACL");
        bodyNode.addChildNode(node);
      }
      if (input.AccessControlList != null) {
        const nodes = serializeAws_restXmlGrants(input.AccessControlList, context);
        const containerNode = new xml_builder_1.XmlNode("AccessControlList");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.Tagging != null) {
        const node = serializeAws_restXmlTagging(input.Tagging, context).withName("Tagging");
        bodyNode.addChildNode(node);
      }
      if (input.UserMetadata != null) {
        const nodes = serializeAws_restXmlUserMetadata(input.UserMetadata, context);
        const containerNode = new xml_builder_1.XmlNode("UserMetadata");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("StorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlScanRange = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ScanRange");
      if (input.Start != null) {
        const node = xml_builder_1.XmlNode.of("Start", String(input.Start)).withName("Start");
        bodyNode.addChildNode(node);
      }
      if (input.End != null) {
        const node = xml_builder_1.XmlNode.of("End", String(input.End)).withName("End");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlSelectParameters = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SelectParameters");
      if (input.InputSerialization != null) {
        const node = serializeAws_restXmlInputSerialization(input.InputSerialization, context).withName("InputSerialization");
        bodyNode.addChildNode(node);
      }
      if (input.ExpressionType != null) {
        const node = xml_builder_1.XmlNode.of("ExpressionType", input.ExpressionType).withName("ExpressionType");
        bodyNode.addChildNode(node);
      }
      if (input.Expression != null) {
        const node = xml_builder_1.XmlNode.of("Expression", input.Expression).withName("Expression");
        bodyNode.addChildNode(node);
      }
      if (input.OutputSerialization != null) {
        const node = serializeAws_restXmlOutputSerialization(input.OutputSerialization, context).withName("OutputSerialization");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlServerSideEncryptionByDefault = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionByDefault");
      if (input.SSEAlgorithm != null) {
        const node = xml_builder_1.XmlNode.of("ServerSideEncryption", input.SSEAlgorithm).withName("SSEAlgorithm");
        bodyNode.addChildNode(node);
      }
      if (input.KMSMasterKeyID != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KMSMasterKeyID).withName("KMSMasterKeyID");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlServerSideEncryptionConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionConfiguration");
      if (input.Rules != null) {
        const nodes = serializeAws_restXmlServerSideEncryptionRules(input.Rules, context);
        nodes.map((node) => {
          node = node.withName("Rule");
          bodyNode.addChildNode(node);
        });
      }
      return bodyNode;
    };
    var serializeAws_restXmlServerSideEncryptionRule = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("ServerSideEncryptionRule");
      if (input.ApplyServerSideEncryptionByDefault != null) {
        const node = serializeAws_restXmlServerSideEncryptionByDefault(input.ApplyServerSideEncryptionByDefault, context).withName("ApplyServerSideEncryptionByDefault");
        bodyNode.addChildNode(node);
      }
      if (input.BucketKeyEnabled != null) {
        const node = xml_builder_1.XmlNode.of("BucketKeyEnabled", String(input.BucketKeyEnabled)).withName("BucketKeyEnabled");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlServerSideEncryptionRules = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlServerSideEncryptionRule(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlSourceSelectionCriteria = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SourceSelectionCriteria");
      if (input.SseKmsEncryptedObjects != null) {
        const node = serializeAws_restXmlSseKmsEncryptedObjects(input.SseKmsEncryptedObjects, context).withName("SseKmsEncryptedObjects");
        bodyNode.addChildNode(node);
      }
      if (input.ReplicaModifications != null) {
        const node = serializeAws_restXmlReplicaModifications(input.ReplicaModifications, context).withName("ReplicaModifications");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlSSEKMS = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SSE-KMS");
      if (input.KeyId != null) {
        const node = xml_builder_1.XmlNode.of("SSEKMSKeyId", input.KeyId).withName("KeyId");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlSseKmsEncryptedObjects = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SseKmsEncryptedObjects");
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("SseKmsEncryptedObjectsStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlSSES3 = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("SSE-S3");
      return bodyNode;
    };
    var serializeAws_restXmlStorageClassAnalysis = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysis");
      if (input.DataExport != null) {
        const node = serializeAws_restXmlStorageClassAnalysisDataExport(input.DataExport, context).withName("DataExport");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlStorageClassAnalysisDataExport = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("StorageClassAnalysisDataExport");
      if (input.OutputSchemaVersion != null) {
        const node = xml_builder_1.XmlNode.of("StorageClassAnalysisSchemaVersion", input.OutputSchemaVersion).withName("OutputSchemaVersion");
        bodyNode.addChildNode(node);
      }
      if (input.Destination != null) {
        const node = serializeAws_restXmlAnalyticsExportDestination(input.Destination, context).withName("Destination");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTag = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tag");
      if (input.Key != null) {
        const node = xml_builder_1.XmlNode.of("ObjectKey", input.Key).withName("Key");
        bodyNode.addChildNode(node);
      }
      if (input.Value != null) {
        const node = xml_builder_1.XmlNode.of("Value", input.Value).withName("Value");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTagging = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tagging");
      if (input.TagSet != null) {
        const nodes = serializeAws_restXmlTagSet(input.TagSet, context);
        const containerNode = new xml_builder_1.XmlNode("TagSet");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTagSet = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlTag(entry, context);
        return node.withName("Tag");
      });
    };
    var serializeAws_restXmlTargetGrant = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("TargetGrant");
      if (input.Grantee != null) {
        const node = serializeAws_restXmlGrantee(input.Grantee, context).withName("Grantee");
        node.addAttribute("xmlns:xsi", "http://www.w3.org/2001/XMLSchema-instance");
        bodyNode.addChildNode(node);
      }
      if (input.Permission != null) {
        const node = xml_builder_1.XmlNode.of("BucketLogsPermission", input.Permission).withName("Permission");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTargetGrants = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlTargetGrant(entry, context);
        return node.withName("Grant");
      });
    };
    var serializeAws_restXmlTiering = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Tiering");
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringDays", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.AccessTier != null) {
        const node = xml_builder_1.XmlNode.of("IntelligentTieringAccessTier", input.AccessTier).withName("AccessTier");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTieringList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlTiering(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlTopicConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("TopicConfiguration");
      if (input.Id != null) {
        const node = xml_builder_1.XmlNode.of("NotificationId", input.Id).withName("Id");
        bodyNode.addChildNode(node);
      }
      if (input.TopicArn != null) {
        const node = xml_builder_1.XmlNode.of("TopicArn", input.TopicArn).withName("Topic");
        bodyNode.addChildNode(node);
      }
      if (input.Events != null) {
        const nodes = serializeAws_restXmlEventList(input.Events, context);
        nodes.map((node) => {
          node = node.withName("Event");
          bodyNode.addChildNode(node);
        });
      }
      if (input.Filter != null) {
        const node = serializeAws_restXmlNotificationConfigurationFilter(input.Filter, context).withName("Filter");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTopicConfigurationList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlTopicConfiguration(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlTransition = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("Transition");
      if (input.Date != null) {
        const node = xml_builder_1.XmlNode.of("Date", input.Date.toISOString().split(".")[0] + "Z").withName("Date");
        bodyNode.addChildNode(node);
      }
      if (input.Days != null) {
        const node = xml_builder_1.XmlNode.of("Days", String(input.Days)).withName("Days");
        bodyNode.addChildNode(node);
      }
      if (input.StorageClass != null) {
        const node = xml_builder_1.XmlNode.of("TransitionStorageClass", input.StorageClass).withName("StorageClass");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlTransitionList = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlTransition(entry, context);
        return node.withName("member");
      });
    };
    var serializeAws_restXmlUserMetadata = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        const node = serializeAws_restXmlMetadataEntry(entry, context);
        return node.withName("MetadataEntry");
      });
    };
    var serializeAws_restXmlVersioningConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("VersioningConfiguration");
      if (input.MFADelete != null) {
        const node = xml_builder_1.XmlNode.of("MFADelete", input.MFADelete).withName("MfaDelete");
        bodyNode.addChildNode(node);
      }
      if (input.Status != null) {
        const node = xml_builder_1.XmlNode.of("BucketVersioningStatus", input.Status).withName("Status");
        bodyNode.addChildNode(node);
      }
      return bodyNode;
    };
    var serializeAws_restXmlWebsiteConfiguration = (input, context) => {
      const bodyNode = new xml_builder_1.XmlNode("WebsiteConfiguration");
      if (input.ErrorDocument != null) {
        const node = serializeAws_restXmlErrorDocument(input.ErrorDocument, context).withName("ErrorDocument");
        bodyNode.addChildNode(node);
      }
      if (input.IndexDocument != null) {
        const node = serializeAws_restXmlIndexDocument(input.IndexDocument, context).withName("IndexDocument");
        bodyNode.addChildNode(node);
      }
      if (input.RedirectAllRequestsTo != null) {
        const node = serializeAws_restXmlRedirectAllRequestsTo(input.RedirectAllRequestsTo, context).withName("RedirectAllRequestsTo");
        bodyNode.addChildNode(node);
      }
      if (input.RoutingRules != null) {
        const nodes = serializeAws_restXmlRoutingRules(input.RoutingRules, context);
        const containerNode = new xml_builder_1.XmlNode("RoutingRules");
        nodes.map((node) => {
          containerNode.addChildNode(node);
        });
        bodyNode.addChildNode(containerNode);
      }
      return bodyNode;
    };
    var deserializeAws_restXmlAbortIncompleteMultipartUpload = (output, context) => {
      const contents = {
        DaysAfterInitiation: void 0
      };
      if (output["DaysAfterInitiation"] !== void 0) {
        contents.DaysAfterInitiation = (0, smithy_client_1.strictParseInt32)(output["DaysAfterInitiation"]);
      }
      return contents;
    };
    var deserializeAws_restXmlAccessControlTranslation = (output, context) => {
      const contents = {
        Owner: void 0
      };
      if (output["Owner"] !== void 0) {
        contents.Owner = (0, smithy_client_1.expectString)(output["Owner"]);
      }
      return contents;
    };
    var deserializeAws_restXmlAllowedHeaders = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlAllowedMethods = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlAllowedOrigins = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlAnalyticsAndOperator = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tags: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlAnalyticsConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        Filter: void 0,
        StorageClassAnalysis: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlAnalyticsFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["StorageClassAnalysis"] !== void 0) {
        contents.StorageClassAnalysis = deserializeAws_restXmlStorageClassAnalysis(output["StorageClassAnalysis"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlAnalyticsConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlAnalyticsConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlAnalyticsExportDestination = (output, context) => {
      const contents = {
        S3BucketDestination: void 0
      };
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = deserializeAws_restXmlAnalyticsS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlAnalyticsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: deserializeAws_restXmlTag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: deserializeAws_restXmlAnalyticsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_restXmlAnalyticsS3BucketDestination = (output, context) => {
      const contents = {
        Format: void 0,
        BucketAccountId: void 0,
        Bucket: void 0,
        Prefix: void 0
      };
      if (output["Format"] !== void 0) {
        contents.Format = (0, smithy_client_1.expectString)(output["Format"]);
      }
      if (output["BucketAccountId"] !== void 0) {
        contents.BucketAccountId = (0, smithy_client_1.expectString)(output["BucketAccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var deserializeAws_restXmlBucket = (output, context) => {
      const contents = {
        Name: void 0,
        CreationDate: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["CreationDate"] !== void 0) {
        contents.CreationDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["CreationDate"]));
      }
      return contents;
    };
    var deserializeAws_restXmlBuckets = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlBucket(entry, context);
      });
    };
    var deserializeAws_restXmlChecksum = (output, context) => {
      const contents = {
        ChecksumCRC32: void 0,
        ChecksumCRC32C: void 0,
        ChecksumSHA1: void 0,
        ChecksumSHA256: void 0
      };
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var deserializeAws_restXmlChecksumAlgorithmList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlCommonPrefix = (output, context) => {
      const contents = {
        Prefix: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var deserializeAws_restXmlCommonPrefixList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlCommonPrefix(entry, context);
      });
    };
    var deserializeAws_restXmlCondition = (output, context) => {
      const contents = {
        HttpErrorCodeReturnedEquals: void 0,
        KeyPrefixEquals: void 0
      };
      if (output["HttpErrorCodeReturnedEquals"] !== void 0) {
        contents.HttpErrorCodeReturnedEquals = (0, smithy_client_1.expectString)(output["HttpErrorCodeReturnedEquals"]);
      }
      if (output["KeyPrefixEquals"] !== void 0) {
        contents.KeyPrefixEquals = (0, smithy_client_1.expectString)(output["KeyPrefixEquals"]);
      }
      return contents;
    };
    var deserializeAws_restXmlContinuationEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_restXmlCopyObjectResult = (output, context) => {
      const contents = {
        ETag: void 0,
        LastModified: void 0,
        ChecksumCRC32: void 0,
        ChecksumCRC32C: void 0,
        ChecksumSHA1: void 0,
        ChecksumSHA256: void 0
      };
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var deserializeAws_restXmlCopyPartResult = (output, context) => {
      const contents = {
        ETag: void 0,
        LastModified: void 0,
        ChecksumCRC32: void 0,
        ChecksumCRC32C: void 0,
        ChecksumSHA1: void 0,
        ChecksumSHA256: void 0
      };
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var deserializeAws_restXmlCORSRule = (output, context) => {
      const contents = {
        ID: void 0,
        AllowedHeaders: void 0,
        AllowedMethods: void 0,
        AllowedOrigins: void 0,
        ExposeHeaders: void 0,
        MaxAgeSeconds: void 0
      };
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output.AllowedHeader === "") {
        contents.AllowedHeaders = [];
      } else if (output["AllowedHeader"] !== void 0) {
        contents.AllowedHeaders = deserializeAws_restXmlAllowedHeaders((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedHeader"]), context);
      }
      if (output.AllowedMethod === "") {
        contents.AllowedMethods = [];
      } else if (output["AllowedMethod"] !== void 0) {
        contents.AllowedMethods = deserializeAws_restXmlAllowedMethods((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedMethod"]), context);
      }
      if (output.AllowedOrigin === "") {
        contents.AllowedOrigins = [];
      } else if (output["AllowedOrigin"] !== void 0) {
        contents.AllowedOrigins = deserializeAws_restXmlAllowedOrigins((0, smithy_client_1.getArrayIfSingleItem)(output["AllowedOrigin"]), context);
      }
      if (output.ExposeHeader === "") {
        contents.ExposeHeaders = [];
      } else if (output["ExposeHeader"] !== void 0) {
        contents.ExposeHeaders = deserializeAws_restXmlExposeHeaders((0, smithy_client_1.getArrayIfSingleItem)(output["ExposeHeader"]), context);
      }
      if (output["MaxAgeSeconds"] !== void 0) {
        contents.MaxAgeSeconds = (0, smithy_client_1.strictParseInt32)(output["MaxAgeSeconds"]);
      }
      return contents;
    };
    var deserializeAws_restXmlCORSRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlCORSRule(entry, context);
      });
    };
    var deserializeAws_restXmlDefaultRetention = (output, context) => {
      const contents = {
        Mode: void 0,
        Days: void 0,
        Years: void 0
      };
      if (output["Mode"] !== void 0) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["Years"] !== void 0) {
        contents.Years = (0, smithy_client_1.strictParseInt32)(output["Years"]);
      }
      return contents;
    };
    var deserializeAws_restXmlDeletedObject = (output, context) => {
      const contents = {
        Key: void 0,
        VersionId: void 0,
        DeleteMarker: void 0,
        DeleteMarkerVersionId: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["DeleteMarker"] !== void 0) {
        contents.DeleteMarker = (0, smithy_client_1.parseBoolean)(output["DeleteMarker"]);
      }
      if (output["DeleteMarkerVersionId"] !== void 0) {
        contents.DeleteMarkerVersionId = (0, smithy_client_1.expectString)(output["DeleteMarkerVersionId"]);
      }
      return contents;
    };
    var deserializeAws_restXmlDeletedObjects = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlDeletedObject(entry, context);
      });
    };
    var deserializeAws_restXmlDeleteMarkerEntry = (output, context) => {
      const contents = {
        Owner: void 0,
        Key: void 0,
        VersionId: void 0,
        IsLatest: void 0,
        LastModified: void 0
      };
      if (output["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = (0, smithy_client_1.parseBoolean)(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      return contents;
    };
    var deserializeAws_restXmlDeleteMarkerReplication = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_restXmlDeleteMarkers = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlDeleteMarkerEntry(entry, context);
      });
    };
    var deserializeAws_restXmlDestination = (output, context) => {
      const contents = {
        Bucket: void 0,
        Account: void 0,
        StorageClass: void 0,
        AccessControlTranslation: void 0,
        EncryptionConfiguration: void 0,
        ReplicationTime: void 0,
        Metrics: void 0
      };
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["AccessControlTranslation"] !== void 0) {
        contents.AccessControlTranslation = deserializeAws_restXmlAccessControlTranslation(output["AccessControlTranslation"], context);
      }
      if (output["EncryptionConfiguration"] !== void 0) {
        contents.EncryptionConfiguration = deserializeAws_restXmlEncryptionConfiguration(output["EncryptionConfiguration"], context);
      }
      if (output["ReplicationTime"] !== void 0) {
        contents.ReplicationTime = deserializeAws_restXmlReplicationTime(output["ReplicationTime"], context);
      }
      if (output["Metrics"] !== void 0) {
        contents.Metrics = deserializeAws_restXmlMetrics(output["Metrics"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlEncryptionConfiguration = (output, context) => {
      const contents = {
        ReplicaKmsKeyID: void 0
      };
      if (output["ReplicaKmsKeyID"] !== void 0) {
        contents.ReplicaKmsKeyID = (0, smithy_client_1.expectString)(output["ReplicaKmsKeyID"]);
      }
      return contents;
    };
    var deserializeAws_restXmlEndEvent = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_restXml_Error = (output, context) => {
      const contents = {
        Key: void 0,
        VersionId: void 0,
        Code: void 0,
        Message: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["Code"] !== void 0) {
        contents.Code = (0, smithy_client_1.expectString)(output["Code"]);
      }
      if (output["Message"] !== void 0) {
        contents.Message = (0, smithy_client_1.expectString)(output["Message"]);
      }
      return contents;
    };
    var deserializeAws_restXmlErrorDocument = (output, context) => {
      const contents = {
        Key: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      return contents;
    };
    var deserializeAws_restXmlErrors = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXml_Error(entry, context);
      });
    };
    var deserializeAws_restXmlEventBridgeConfiguration = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_restXmlEventList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlExistingObjectReplication = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_restXmlExposeHeaders = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlFilterRule = (output, context) => {
      const contents = {
        Name: void 0,
        Value: void 0
      };
      if (output["Name"] !== void 0) {
        contents.Name = (0, smithy_client_1.expectString)(output["Name"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_restXmlFilterRuleList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlFilterRule(entry, context);
      });
    };
    var deserializeAws_restXmlGetObjectAttributesParts = (output, context) => {
      const contents = {
        TotalPartsCount: void 0,
        PartNumberMarker: void 0,
        NextPartNumberMarker: void 0,
        MaxParts: void 0,
        IsTruncated: void 0,
        Parts: void 0
      };
      if (output["PartsCount"] !== void 0) {
        contents.TotalPartsCount = (0, smithy_client_1.strictParseInt32)(output["PartsCount"]);
      }
      if (output["PartNumberMarker"] !== void 0) {
        contents.PartNumberMarker = (0, smithy_client_1.expectString)(output["PartNumberMarker"]);
      }
      if (output["NextPartNumberMarker"] !== void 0) {
        contents.NextPartNumberMarker = (0, smithy_client_1.expectString)(output["NextPartNumberMarker"]);
      }
      if (output["MaxParts"] !== void 0) {
        contents.MaxParts = (0, smithy_client_1.strictParseInt32)(output["MaxParts"]);
      }
      if (output["IsTruncated"] !== void 0) {
        contents.IsTruncated = (0, smithy_client_1.parseBoolean)(output["IsTruncated"]);
      }
      if (output.Part === "") {
        contents.Parts = [];
      } else if (output["Part"] !== void 0) {
        contents.Parts = deserializeAws_restXmlPartsList((0, smithy_client_1.getArrayIfSingleItem)(output["Part"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlGrant = (output, context) => {
      const contents = {
        Grantee: void 0,
        Permission: void 0
      };
      if (output["Grantee"] !== void 0) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = (0, smithy_client_1.expectString)(output["Permission"]);
      }
      return contents;
    };
    var deserializeAws_restXmlGrantee = (output, context) => {
      const contents = {
        DisplayName: void 0,
        EmailAddress: void 0,
        ID: void 0,
        URI: void 0,
        Type: void 0
      };
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      if (output["EmailAddress"] !== void 0) {
        contents.EmailAddress = (0, smithy_client_1.expectString)(output["EmailAddress"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["URI"] !== void 0) {
        contents.URI = (0, smithy_client_1.expectString)(output["URI"]);
      }
      if (output["xsi:type"] !== void 0) {
        contents.Type = (0, smithy_client_1.expectString)(output["xsi:type"]);
      }
      return contents;
    };
    var deserializeAws_restXmlGrants = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlGrant(entry, context);
      });
    };
    var deserializeAws_restXmlIndexDocument = (output, context) => {
      const contents = {
        Suffix: void 0
      };
      if (output["Suffix"] !== void 0) {
        contents.Suffix = (0, smithy_client_1.expectString)(output["Suffix"]);
      }
      return contents;
    };
    var deserializeAws_restXmlInitiator = (output, context) => {
      const contents = {
        ID: void 0,
        DisplayName: void 0
      };
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      return contents;
    };
    var deserializeAws_restXmlIntelligentTieringAndOperator = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tags: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlIntelligentTieringConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        Filter: void 0,
        Status: void 0,
        Tierings: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlIntelligentTieringFilter(output["Filter"], context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output.Tiering === "") {
        contents.Tierings = [];
      } else if (output["Tiering"] !== void 0) {
        contents.Tierings = deserializeAws_restXmlTieringList((0, smithy_client_1.getArrayIfSingleItem)(output["Tiering"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlIntelligentTieringConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlIntelligentTieringConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlIntelligentTieringFilter = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tag: void 0,
        And: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output["Tag"] !== void 0) {
        contents.Tag = deserializeAws_restXmlTag(output["Tag"], context);
      }
      if (output["And"] !== void 0) {
        contents.And = deserializeAws_restXmlIntelligentTieringAndOperator(output["And"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlInventoryConfiguration = (output, context) => {
      const contents = {
        Destination: void 0,
        IsEnabled: void 0,
        Filter: void 0,
        Id: void 0,
        IncludedObjectVersions: void 0,
        OptionalFields: void 0,
        Schedule: void 0
      };
      if (output["Destination"] !== void 0) {
        contents.Destination = deserializeAws_restXmlInventoryDestination(output["Destination"], context);
      }
      if (output["IsEnabled"] !== void 0) {
        contents.IsEnabled = (0, smithy_client_1.parseBoolean)(output["IsEnabled"]);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlInventoryFilter(output["Filter"], context);
      }
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["IncludedObjectVersions"] !== void 0) {
        contents.IncludedObjectVersions = (0, smithy_client_1.expectString)(output["IncludedObjectVersions"]);
      }
      if (output.OptionalFields === "") {
        contents.OptionalFields = [];
      } else if (output["OptionalFields"] !== void 0 && output["OptionalFields"]["Field"] !== void 0) {
        contents.OptionalFields = deserializeAws_restXmlInventoryOptionalFields((0, smithy_client_1.getArrayIfSingleItem)(output["OptionalFields"]["Field"]), context);
      }
      if (output["Schedule"] !== void 0) {
        contents.Schedule = deserializeAws_restXmlInventorySchedule(output["Schedule"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlInventoryConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlInventoryConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlInventoryDestination = (output, context) => {
      const contents = {
        S3BucketDestination: void 0
      };
      if (output["S3BucketDestination"] !== void 0) {
        contents.S3BucketDestination = deserializeAws_restXmlInventoryS3BucketDestination(output["S3BucketDestination"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlInventoryEncryption = (output, context) => {
      const contents = {
        SSES3: void 0,
        SSEKMS: void 0
      };
      if (output["SSE-S3"] !== void 0) {
        contents.SSES3 = deserializeAws_restXmlSSES3(output["SSE-S3"], context);
      }
      if (output["SSE-KMS"] !== void 0) {
        contents.SSEKMS = deserializeAws_restXmlSSEKMS(output["SSE-KMS"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlInventoryFilter = (output, context) => {
      const contents = {
        Prefix: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      return contents;
    };
    var deserializeAws_restXmlInventoryOptionalFields = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return (0, smithy_client_1.expectString)(entry);
      });
    };
    var deserializeAws_restXmlInventoryS3BucketDestination = (output, context) => {
      const contents = {
        AccountId: void 0,
        Bucket: void 0,
        Format: void 0,
        Prefix: void 0,
        Encryption: void 0
      };
      if (output["AccountId"] !== void 0) {
        contents.AccountId = (0, smithy_client_1.expectString)(output["AccountId"]);
      }
      if (output["Bucket"] !== void 0) {
        contents.Bucket = (0, smithy_client_1.expectString)(output["Bucket"]);
      }
      if (output["Format"] !== void 0) {
        contents.Format = (0, smithy_client_1.expectString)(output["Format"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output["Encryption"] !== void 0) {
        contents.Encryption = deserializeAws_restXmlInventoryEncryption(output["Encryption"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlInventorySchedule = (output, context) => {
      const contents = {
        Frequency: void 0
      };
      if (output["Frequency"] !== void 0) {
        contents.Frequency = (0, smithy_client_1.expectString)(output["Frequency"]);
      }
      return contents;
    };
    var deserializeAws_restXmlLambdaFunctionConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        LambdaFunctionArn: void 0,
        Events: void 0,
        Filter: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["CloudFunction"] !== void 0) {
        contents.LambdaFunctionArn = (0, smithy_client_1.expectString)(output["CloudFunction"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = deserializeAws_restXmlEventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlLambdaFunctionConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlLambdaFunctionConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlLifecycleExpiration = (output, context) => {
      const contents = {
        Date: void 0,
        Days: void 0,
        ExpiredObjectDeleteMarker: void 0
      };
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["ExpiredObjectDeleteMarker"] !== void 0) {
        contents.ExpiredObjectDeleteMarker = (0, smithy_client_1.parseBoolean)(output["ExpiredObjectDeleteMarker"]);
      }
      return contents;
    };
    var deserializeAws_restXmlLifecycleRule = (output, context) => {
      const contents = {
        Expiration: void 0,
        ID: void 0,
        Prefix: void 0,
        Filter: void 0,
        Status: void 0,
        Transitions: void 0,
        NoncurrentVersionTransitions: void 0,
        NoncurrentVersionExpiration: void 0,
        AbortIncompleteMultipartUpload: void 0
      };
      if (output["Expiration"] !== void 0) {
        contents.Expiration = deserializeAws_restXmlLifecycleExpiration(output["Expiration"], context);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlLifecycleRuleFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output.Transition === "") {
        contents.Transitions = [];
      } else if (output["Transition"] !== void 0) {
        contents.Transitions = deserializeAws_restXmlTransitionList((0, smithy_client_1.getArrayIfSingleItem)(output["Transition"]), context);
      }
      if (output.NoncurrentVersionTransition === "") {
        contents.NoncurrentVersionTransitions = [];
      } else if (output["NoncurrentVersionTransition"] !== void 0) {
        contents.NoncurrentVersionTransitions = deserializeAws_restXmlNoncurrentVersionTransitionList((0, smithy_client_1.getArrayIfSingleItem)(output["NoncurrentVersionTransition"]), context);
      }
      if (output["NoncurrentVersionExpiration"] !== void 0) {
        contents.NoncurrentVersionExpiration = deserializeAws_restXmlNoncurrentVersionExpiration(output["NoncurrentVersionExpiration"], context);
      }
      if (output["AbortIncompleteMultipartUpload"] !== void 0) {
        contents.AbortIncompleteMultipartUpload = deserializeAws_restXmlAbortIncompleteMultipartUpload(output["AbortIncompleteMultipartUpload"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlLifecycleRuleAndOperator = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tags: void 0,
        ObjectSizeGreaterThan: void 0,
        ObjectSizeLessThan: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        contents.ObjectSizeGreaterThan = (0, smithy_client_1.strictParseLong)(output["ObjectSizeGreaterThan"]);
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        contents.ObjectSizeLessThan = (0, smithy_client_1.strictParseLong)(output["ObjectSizeLessThan"]);
      }
      return contents;
    };
    var deserializeAws_restXmlLifecycleRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: deserializeAws_restXmlTag(output["Tag"], context)
        };
      }
      if (output["ObjectSizeGreaterThan"] !== void 0) {
        return {
          ObjectSizeGreaterThan: (0, smithy_client_1.strictParseLong)(output["ObjectSizeGreaterThan"])
        };
      }
      if (output["ObjectSizeLessThan"] !== void 0) {
        return {
          ObjectSizeLessThan: (0, smithy_client_1.strictParseLong)(output["ObjectSizeLessThan"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: deserializeAws_restXmlLifecycleRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_restXmlLifecycleRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlLifecycleRule(entry, context);
      });
    };
    var deserializeAws_restXmlLoggingEnabled = (output, context) => {
      const contents = {
        TargetBucket: void 0,
        TargetGrants: void 0,
        TargetPrefix: void 0
      };
      if (output["TargetBucket"] !== void 0) {
        contents.TargetBucket = (0, smithy_client_1.expectString)(output["TargetBucket"]);
      }
      if (output.TargetGrants === "") {
        contents.TargetGrants = [];
      } else if (output["TargetGrants"] !== void 0 && output["TargetGrants"]["Grant"] !== void 0) {
        contents.TargetGrants = deserializeAws_restXmlTargetGrants((0, smithy_client_1.getArrayIfSingleItem)(output["TargetGrants"]["Grant"]), context);
      }
      if (output["TargetPrefix"] !== void 0) {
        contents.TargetPrefix = (0, smithy_client_1.expectString)(output["TargetPrefix"]);
      }
      return contents;
    };
    var deserializeAws_restXmlMetrics = (output, context) => {
      const contents = {
        Status: void 0,
        EventThreshold: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["EventThreshold"] !== void 0) {
        contents.EventThreshold = deserializeAws_restXmlReplicationTimeValue(output["EventThreshold"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlMetricsAndOperator = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tags: void 0,
        AccessPointArn: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      if (output["AccessPointArn"] !== void 0) {
        contents.AccessPointArn = (0, smithy_client_1.expectString)(output["AccessPointArn"]);
      }
      return contents;
    };
    var deserializeAws_restXmlMetricsConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        Filter: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlMetricsFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlMetricsConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlMetricsConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlMetricsFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: deserializeAws_restXmlTag(output["Tag"], context)
        };
      }
      if (output["AccessPointArn"] !== void 0) {
        return {
          AccessPointArn: (0, smithy_client_1.expectString)(output["AccessPointArn"])
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: deserializeAws_restXmlMetricsAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_restXmlMultipartUpload = (output, context) => {
      const contents = {
        UploadId: void 0,
        Key: void 0,
        Initiated: void 0,
        StorageClass: void 0,
        Owner: void 0,
        Initiator: void 0,
        ChecksumAlgorithm: void 0
      };
      if (output["UploadId"] !== void 0) {
        contents.UploadId = (0, smithy_client_1.expectString)(output["UploadId"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Initiated"] !== void 0) {
        contents.Initiated = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Initiated"]));
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
      }
      if (output["Initiator"] !== void 0) {
        contents.Initiator = deserializeAws_restXmlInitiator(output["Initiator"], context);
      }
      if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = (0, smithy_client_1.expectString)(output["ChecksumAlgorithm"]);
      }
      return contents;
    };
    var deserializeAws_restXmlMultipartUploadList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlMultipartUpload(entry, context);
      });
    };
    var deserializeAws_restXmlNoncurrentVersionExpiration = (output, context) => {
      const contents = {
        NoncurrentDays: void 0,
        NewerNoncurrentVersions: void 0
      };
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = (0, smithy_client_1.strictParseInt32)(output["NoncurrentDays"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = (0, smithy_client_1.strictParseInt32)(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    var deserializeAws_restXmlNoncurrentVersionTransition = (output, context) => {
      const contents = {
        NoncurrentDays: void 0,
        StorageClass: void 0,
        NewerNoncurrentVersions: void 0
      };
      if (output["NoncurrentDays"] !== void 0) {
        contents.NoncurrentDays = (0, smithy_client_1.strictParseInt32)(output["NoncurrentDays"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["NewerNoncurrentVersions"] !== void 0) {
        contents.NewerNoncurrentVersions = (0, smithy_client_1.strictParseInt32)(output["NewerNoncurrentVersions"]);
      }
      return contents;
    };
    var deserializeAws_restXmlNoncurrentVersionTransitionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlNoncurrentVersionTransition(entry, context);
      });
    };
    var deserializeAws_restXmlNotificationConfigurationFilter = (output, context) => {
      const contents = {
        Key: void 0
      };
      if (output["S3Key"] !== void 0) {
        contents.Key = deserializeAws_restXmlS3KeyFilter(output["S3Key"], context);
      }
      return contents;
    };
    var deserializeAws_restXml_Object = (output, context) => {
      const contents = {
        Key: void 0,
        LastModified: void 0,
        ETag: void 0,
        ChecksumAlgorithm: void 0,
        Size: void 0,
        StorageClass: void 0,
        Owner: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0, smithy_client_1.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXml_Object(entry, context);
      });
    };
    var deserializeAws_restXmlObjectLockConfiguration = (output, context) => {
      const contents = {
        ObjectLockEnabled: void 0,
        Rule: void 0
      };
      if (output["ObjectLockEnabled"] !== void 0) {
        contents.ObjectLockEnabled = (0, smithy_client_1.expectString)(output["ObjectLockEnabled"]);
      }
      if (output["Rule"] !== void 0) {
        contents.Rule = deserializeAws_restXmlObjectLockRule(output["Rule"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectLockLegalHold = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectLockRetention = (output, context) => {
      const contents = {
        Mode: void 0,
        RetainUntilDate: void 0
      };
      if (output["Mode"] !== void 0) {
        contents.Mode = (0, smithy_client_1.expectString)(output["Mode"]);
      }
      if (output["RetainUntilDate"] !== void 0) {
        contents.RetainUntilDate = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["RetainUntilDate"]));
      }
      return contents;
    };
    var deserializeAws_restXmlObjectLockRule = (output, context) => {
      const contents = {
        DefaultRetention: void 0
      };
      if (output["DefaultRetention"] !== void 0) {
        contents.DefaultRetention = deserializeAws_restXmlDefaultRetention(output["DefaultRetention"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectPart = (output, context) => {
      const contents = {
        PartNumber: void 0,
        Size: void 0,
        ChecksumCRC32: void 0,
        ChecksumCRC32C: void 0,
        ChecksumSHA1: void 0,
        ChecksumSHA256: void 0
      };
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = (0, smithy_client_1.strictParseInt32)(output["PartNumber"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectVersion = (output, context) => {
      const contents = {
        ETag: void 0,
        ChecksumAlgorithm: void 0,
        Size: void 0,
        StorageClass: void 0,
        Key: void 0,
        VersionId: void 0,
        IsLatest: void 0,
        LastModified: void 0,
        Owner: void 0
      };
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output.ChecksumAlgorithm === "") {
        contents.ChecksumAlgorithm = [];
      } else if (output["ChecksumAlgorithm"] !== void 0) {
        contents.ChecksumAlgorithm = deserializeAws_restXmlChecksumAlgorithmList((0, smithy_client_1.getArrayIfSingleItem)(output["ChecksumAlgorithm"]), context);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["VersionId"] !== void 0) {
        contents.VersionId = (0, smithy_client_1.expectString)(output["VersionId"]);
      }
      if (output["IsLatest"] !== void 0) {
        contents.IsLatest = (0, smithy_client_1.parseBoolean)(output["IsLatest"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      if (output["Owner"] !== void 0) {
        contents.Owner = deserializeAws_restXmlOwner(output["Owner"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlObjectVersionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlObjectVersion(entry, context);
      });
    };
    var deserializeAws_restXmlOwner = (output, context) => {
      const contents = {
        DisplayName: void 0,
        ID: void 0
      };
      if (output["DisplayName"] !== void 0) {
        contents.DisplayName = (0, smithy_client_1.expectString)(output["DisplayName"]);
      }
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      return contents;
    };
    var deserializeAws_restXmlOwnershipControls = (output, context) => {
      const contents = {
        Rules: void 0
      };
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = deserializeAws_restXmlOwnershipControlsRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlOwnershipControlsRule = (output, context) => {
      const contents = {
        ObjectOwnership: void 0
      };
      if (output["ObjectOwnership"] !== void 0) {
        contents.ObjectOwnership = (0, smithy_client_1.expectString)(output["ObjectOwnership"]);
      }
      return contents;
    };
    var deserializeAws_restXmlOwnershipControlsRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlOwnershipControlsRule(entry, context);
      });
    };
    var deserializeAws_restXmlPart = (output, context) => {
      const contents = {
        PartNumber: void 0,
        LastModified: void 0,
        ETag: void 0,
        Size: void 0,
        ChecksumCRC32: void 0,
        ChecksumCRC32C: void 0,
        ChecksumSHA1: void 0,
        ChecksumSHA256: void 0
      };
      if (output["PartNumber"] !== void 0) {
        contents.PartNumber = (0, smithy_client_1.strictParseInt32)(output["PartNumber"]);
      }
      if (output["LastModified"] !== void 0) {
        contents.LastModified = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["LastModified"]));
      }
      if (output["ETag"] !== void 0) {
        contents.ETag = (0, smithy_client_1.expectString)(output["ETag"]);
      }
      if (output["Size"] !== void 0) {
        contents.Size = (0, smithy_client_1.strictParseLong)(output["Size"]);
      }
      if (output["ChecksumCRC32"] !== void 0) {
        contents.ChecksumCRC32 = (0, smithy_client_1.expectString)(output["ChecksumCRC32"]);
      }
      if (output["ChecksumCRC32C"] !== void 0) {
        contents.ChecksumCRC32C = (0, smithy_client_1.expectString)(output["ChecksumCRC32C"]);
      }
      if (output["ChecksumSHA1"] !== void 0) {
        contents.ChecksumSHA1 = (0, smithy_client_1.expectString)(output["ChecksumSHA1"]);
      }
      if (output["ChecksumSHA256"] !== void 0) {
        contents.ChecksumSHA256 = (0, smithy_client_1.expectString)(output["ChecksumSHA256"]);
      }
      return contents;
    };
    var deserializeAws_restXmlParts = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlPart(entry, context);
      });
    };
    var deserializeAws_restXmlPartsList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlObjectPart(entry, context);
      });
    };
    var deserializeAws_restXmlPolicyStatus = (output, context) => {
      const contents = {
        IsPublic: void 0
      };
      if (output["IsPublic"] !== void 0) {
        contents.IsPublic = (0, smithy_client_1.parseBoolean)(output["IsPublic"]);
      }
      return contents;
    };
    var deserializeAws_restXmlProgress = (output, context) => {
      const contents = {
        BytesScanned: void 0,
        BytesProcessed: void 0,
        BytesReturned: void 0
      };
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = (0, smithy_client_1.strictParseLong)(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = (0, smithy_client_1.strictParseLong)(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = (0, smithy_client_1.strictParseLong)(output["BytesReturned"]);
      }
      return contents;
    };
    var deserializeAws_restXmlPublicAccessBlockConfiguration = (output, context) => {
      const contents = {
        BlockPublicAcls: void 0,
        IgnorePublicAcls: void 0,
        BlockPublicPolicy: void 0,
        RestrictPublicBuckets: void 0
      };
      if (output["BlockPublicAcls"] !== void 0) {
        contents.BlockPublicAcls = (0, smithy_client_1.parseBoolean)(output["BlockPublicAcls"]);
      }
      if (output["IgnorePublicAcls"] !== void 0) {
        contents.IgnorePublicAcls = (0, smithy_client_1.parseBoolean)(output["IgnorePublicAcls"]);
      }
      if (output["BlockPublicPolicy"] !== void 0) {
        contents.BlockPublicPolicy = (0, smithy_client_1.parseBoolean)(output["BlockPublicPolicy"]);
      }
      if (output["RestrictPublicBuckets"] !== void 0) {
        contents.RestrictPublicBuckets = (0, smithy_client_1.parseBoolean)(output["RestrictPublicBuckets"]);
      }
      return contents;
    };
    var deserializeAws_restXmlQueueConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        QueueArn: void 0,
        Events: void 0,
        Filter: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Queue"] !== void 0) {
        contents.QueueArn = (0, smithy_client_1.expectString)(output["Queue"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = deserializeAws_restXmlEventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlQueueConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlQueueConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlRedirect = (output, context) => {
      const contents = {
        HostName: void 0,
        HttpRedirectCode: void 0,
        Protocol: void 0,
        ReplaceKeyPrefixWith: void 0,
        ReplaceKeyWith: void 0
      };
      if (output["HostName"] !== void 0) {
        contents.HostName = (0, smithy_client_1.expectString)(output["HostName"]);
      }
      if (output["HttpRedirectCode"] !== void 0) {
        contents.HttpRedirectCode = (0, smithy_client_1.expectString)(output["HttpRedirectCode"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["Protocol"]);
      }
      if (output["ReplaceKeyPrefixWith"] !== void 0) {
        contents.ReplaceKeyPrefixWith = (0, smithy_client_1.expectString)(output["ReplaceKeyPrefixWith"]);
      }
      if (output["ReplaceKeyWith"] !== void 0) {
        contents.ReplaceKeyWith = (0, smithy_client_1.expectString)(output["ReplaceKeyWith"]);
      }
      return contents;
    };
    var deserializeAws_restXmlRedirectAllRequestsTo = (output, context) => {
      const contents = {
        HostName: void 0,
        Protocol: void 0
      };
      if (output["HostName"] !== void 0) {
        contents.HostName = (0, smithy_client_1.expectString)(output["HostName"]);
      }
      if (output["Protocol"] !== void 0) {
        contents.Protocol = (0, smithy_client_1.expectString)(output["Protocol"]);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicaModifications = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicationConfiguration = (output, context) => {
      const contents = {
        Role: void 0,
        Rules: void 0
      };
      if (output["Role"] !== void 0) {
        contents.Role = (0, smithy_client_1.expectString)(output["Role"]);
      }
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = deserializeAws_restXmlReplicationRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicationRule = (output, context) => {
      const contents = {
        ID: void 0,
        Priority: void 0,
        Prefix: void 0,
        Filter: void 0,
        Status: void 0,
        SourceSelectionCriteria: void 0,
        ExistingObjectReplication: void 0,
        Destination: void 0,
        DeleteMarkerReplication: void 0
      };
      if (output["ID"] !== void 0) {
        contents.ID = (0, smithy_client_1.expectString)(output["ID"]);
      }
      if (output["Priority"] !== void 0) {
        contents.Priority = (0, smithy_client_1.strictParseInt32)(output["Priority"]);
      }
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Filter === "") {
      } else if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlReplicationRuleFilter((0, smithy_client_1.expectUnion)(output["Filter"]), context);
      }
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["SourceSelectionCriteria"] !== void 0) {
        contents.SourceSelectionCriteria = deserializeAws_restXmlSourceSelectionCriteria(output["SourceSelectionCriteria"], context);
      }
      if (output["ExistingObjectReplication"] !== void 0) {
        contents.ExistingObjectReplication = deserializeAws_restXmlExistingObjectReplication(output["ExistingObjectReplication"], context);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = deserializeAws_restXmlDestination(output["Destination"], context);
      }
      if (output["DeleteMarkerReplication"] !== void 0) {
        contents.DeleteMarkerReplication = deserializeAws_restXmlDeleteMarkerReplication(output["DeleteMarkerReplication"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicationRuleAndOperator = (output, context) => {
      const contents = {
        Prefix: void 0,
        Tags: void 0
      };
      if (output["Prefix"] !== void 0) {
        contents.Prefix = (0, smithy_client_1.expectString)(output["Prefix"]);
      }
      if (output.Tag === "") {
        contents.Tags = [];
      } else if (output["Tag"] !== void 0) {
        contents.Tags = deserializeAws_restXmlTagSet((0, smithy_client_1.getArrayIfSingleItem)(output["Tag"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicationRuleFilter = (output, context) => {
      if (output["Prefix"] !== void 0) {
        return {
          Prefix: (0, smithy_client_1.expectString)(output["Prefix"])
        };
      }
      if (output["Tag"] !== void 0) {
        return {
          Tag: deserializeAws_restXmlTag(output["Tag"], context)
        };
      }
      if (output["And"] !== void 0) {
        return {
          And: deserializeAws_restXmlReplicationRuleAndOperator(output["And"], context)
        };
      }
      return { $unknown: Object.entries(output)[0] };
    };
    var deserializeAws_restXmlReplicationRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlReplicationRule(entry, context);
      });
    };
    var deserializeAws_restXmlReplicationTime = (output, context) => {
      const contents = {
        Status: void 0,
        Time: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      if (output["Time"] !== void 0) {
        contents.Time = deserializeAws_restXmlReplicationTimeValue(output["Time"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlReplicationTimeValue = (output, context) => {
      const contents = {
        Minutes: void 0
      };
      if (output["Minutes"] !== void 0) {
        contents.Minutes = (0, smithy_client_1.strictParseInt32)(output["Minutes"]);
      }
      return contents;
    };
    var deserializeAws_restXmlRoutingRule = (output, context) => {
      const contents = {
        Condition: void 0,
        Redirect: void 0
      };
      if (output["Condition"] !== void 0) {
        contents.Condition = deserializeAws_restXmlCondition(output["Condition"], context);
      }
      if (output["Redirect"] !== void 0) {
        contents.Redirect = deserializeAws_restXmlRedirect(output["Redirect"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlRoutingRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlRoutingRule(entry, context);
      });
    };
    var deserializeAws_restXmlS3KeyFilter = (output, context) => {
      const contents = {
        FilterRules: void 0
      };
      if (output.FilterRule === "") {
        contents.FilterRules = [];
      } else if (output["FilterRule"] !== void 0) {
        contents.FilterRules = deserializeAws_restXmlFilterRuleList((0, smithy_client_1.getArrayIfSingleItem)(output["FilterRule"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlServerSideEncryptionByDefault = (output, context) => {
      const contents = {
        SSEAlgorithm: void 0,
        KMSMasterKeyID: void 0
      };
      if (output["SSEAlgorithm"] !== void 0) {
        contents.SSEAlgorithm = (0, smithy_client_1.expectString)(output["SSEAlgorithm"]);
      }
      if (output["KMSMasterKeyID"] !== void 0) {
        contents.KMSMasterKeyID = (0, smithy_client_1.expectString)(output["KMSMasterKeyID"]);
      }
      return contents;
    };
    var deserializeAws_restXmlServerSideEncryptionConfiguration = (output, context) => {
      const contents = {
        Rules: void 0
      };
      if (output.Rule === "") {
        contents.Rules = [];
      } else if (output["Rule"] !== void 0) {
        contents.Rules = deserializeAws_restXmlServerSideEncryptionRules((0, smithy_client_1.getArrayIfSingleItem)(output["Rule"]), context);
      }
      return contents;
    };
    var deserializeAws_restXmlServerSideEncryptionRule = (output, context) => {
      const contents = {
        ApplyServerSideEncryptionByDefault: void 0,
        BucketKeyEnabled: void 0
      };
      if (output["ApplyServerSideEncryptionByDefault"] !== void 0) {
        contents.ApplyServerSideEncryptionByDefault = deserializeAws_restXmlServerSideEncryptionByDefault(output["ApplyServerSideEncryptionByDefault"], context);
      }
      if (output["BucketKeyEnabled"] !== void 0) {
        contents.BucketKeyEnabled = (0, smithy_client_1.parseBoolean)(output["BucketKeyEnabled"]);
      }
      return contents;
    };
    var deserializeAws_restXmlServerSideEncryptionRules = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlServerSideEncryptionRule(entry, context);
      });
    };
    var deserializeAws_restXmlSourceSelectionCriteria = (output, context) => {
      const contents = {
        SseKmsEncryptedObjects: void 0,
        ReplicaModifications: void 0
      };
      if (output["SseKmsEncryptedObjects"] !== void 0) {
        contents.SseKmsEncryptedObjects = deserializeAws_restXmlSseKmsEncryptedObjects(output["SseKmsEncryptedObjects"], context);
      }
      if (output["ReplicaModifications"] !== void 0) {
        contents.ReplicaModifications = deserializeAws_restXmlReplicaModifications(output["ReplicaModifications"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlSSEKMS = (output, context) => {
      const contents = {
        KeyId: void 0
      };
      if (output["KeyId"] !== void 0) {
        contents.KeyId = (0, smithy_client_1.expectString)(output["KeyId"]);
      }
      return contents;
    };
    var deserializeAws_restXmlSseKmsEncryptedObjects = (output, context) => {
      const contents = {
        Status: void 0
      };
      if (output["Status"] !== void 0) {
        contents.Status = (0, smithy_client_1.expectString)(output["Status"]);
      }
      return contents;
    };
    var deserializeAws_restXmlSSES3 = (output, context) => {
      const contents = {};
      return contents;
    };
    var deserializeAws_restXmlStats = (output, context) => {
      const contents = {
        BytesScanned: void 0,
        BytesProcessed: void 0,
        BytesReturned: void 0
      };
      if (output["BytesScanned"] !== void 0) {
        contents.BytesScanned = (0, smithy_client_1.strictParseLong)(output["BytesScanned"]);
      }
      if (output["BytesProcessed"] !== void 0) {
        contents.BytesProcessed = (0, smithy_client_1.strictParseLong)(output["BytesProcessed"]);
      }
      if (output["BytesReturned"] !== void 0) {
        contents.BytesReturned = (0, smithy_client_1.strictParseLong)(output["BytesReturned"]);
      }
      return contents;
    };
    var deserializeAws_restXmlStorageClassAnalysis = (output, context) => {
      const contents = {
        DataExport: void 0
      };
      if (output["DataExport"] !== void 0) {
        contents.DataExport = deserializeAws_restXmlStorageClassAnalysisDataExport(output["DataExport"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlStorageClassAnalysisDataExport = (output, context) => {
      const contents = {
        OutputSchemaVersion: void 0,
        Destination: void 0
      };
      if (output["OutputSchemaVersion"] !== void 0) {
        contents.OutputSchemaVersion = (0, smithy_client_1.expectString)(output["OutputSchemaVersion"]);
      }
      if (output["Destination"] !== void 0) {
        contents.Destination = deserializeAws_restXmlAnalyticsExportDestination(output["Destination"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlTag = (output, context) => {
      const contents = {
        Key: void 0,
        Value: void 0
      };
      if (output["Key"] !== void 0) {
        contents.Key = (0, smithy_client_1.expectString)(output["Key"]);
      }
      if (output["Value"] !== void 0) {
        contents.Value = (0, smithy_client_1.expectString)(output["Value"]);
      }
      return contents;
    };
    var deserializeAws_restXmlTagSet = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlTag(entry, context);
      });
    };
    var deserializeAws_restXmlTargetGrant = (output, context) => {
      const contents = {
        Grantee: void 0,
        Permission: void 0
      };
      if (output["Grantee"] !== void 0) {
        contents.Grantee = deserializeAws_restXmlGrantee(output["Grantee"], context);
      }
      if (output["Permission"] !== void 0) {
        contents.Permission = (0, smithy_client_1.expectString)(output["Permission"]);
      }
      return contents;
    };
    var deserializeAws_restXmlTargetGrants = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlTargetGrant(entry, context);
      });
    };
    var deserializeAws_restXmlTiering = (output, context) => {
      const contents = {
        Days: void 0,
        AccessTier: void 0
      };
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["AccessTier"] !== void 0) {
        contents.AccessTier = (0, smithy_client_1.expectString)(output["AccessTier"]);
      }
      return contents;
    };
    var deserializeAws_restXmlTieringList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlTiering(entry, context);
      });
    };
    var deserializeAws_restXmlTopicConfiguration = (output, context) => {
      const contents = {
        Id: void 0,
        TopicArn: void 0,
        Events: void 0,
        Filter: void 0
      };
      if (output["Id"] !== void 0) {
        contents.Id = (0, smithy_client_1.expectString)(output["Id"]);
      }
      if (output["Topic"] !== void 0) {
        contents.TopicArn = (0, smithy_client_1.expectString)(output["Topic"]);
      }
      if (output.Event === "") {
        contents.Events = [];
      } else if (output["Event"] !== void 0) {
        contents.Events = deserializeAws_restXmlEventList((0, smithy_client_1.getArrayIfSingleItem)(output["Event"]), context);
      }
      if (output["Filter"] !== void 0) {
        contents.Filter = deserializeAws_restXmlNotificationConfigurationFilter(output["Filter"], context);
      }
      return contents;
    };
    var deserializeAws_restXmlTopicConfigurationList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlTopicConfiguration(entry, context);
      });
    };
    var deserializeAws_restXmlTransition = (output, context) => {
      const contents = {
        Date: void 0,
        Days: void 0,
        StorageClass: void 0
      };
      if (output["Date"] !== void 0) {
        contents.Date = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Date"]));
      }
      if (output["Days"] !== void 0) {
        contents.Days = (0, smithy_client_1.strictParseInt32)(output["Days"]);
      }
      if (output["StorageClass"] !== void 0) {
        contents.StorageClass = (0, smithy_client_1.expectString)(output["StorageClass"]);
      }
      return contents;
    };
    var deserializeAws_restXmlTransitionList = (output, context) => {
      return (output || []).filter((e) => e != null).map((entry) => {
        return deserializeAws_restXmlTransition(entry, context);
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var loadRestXmlErrorCode = (output, data) => {
      if (data.Code !== void 0) {
        return data.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AbortMultipartUploadCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/AbortMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AbortMultipartUploadCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var AbortMultipartUploadCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AbortMultipartUploadCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "AbortMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AbortMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AbortMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlAbortMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlAbortMultipartUploadCommand)(output, context);
      }
    };
    exports2.AbortMultipartUploadCommand = AbortMultipartUploadCommand;
  }
});

var require_check_content_length_header = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/check-content-length-header.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCheckContentLengthHeaderPlugin = exports2.checkContentLengthHeaderMiddlewareOptions = exports2.checkContentLengthHeader = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = "content-length";
    function checkContentLengthHeader() {
      return (next, context) => async (args) => {
        var _a;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          if (!request.headers[CONTENT_LENGTH_HEADER]) {
            const message = `Are you using a Stream of unknown length as the Body of a PutObject request? Consider using Upload instead from @aws-sdk/lib-storage.`;
            if (typeof ((_a = context === null || context === void 0 ? void 0 : context.logger) === null || _a === void 0 ? void 0 : _a.warn) === "function") {
              context.logger.warn(message);
            } else {
              console.warn(message);
            }
          }
        }
        return next({ ...args });
      };
    }
    exports2.checkContentLengthHeader = checkContentLengthHeader;
    exports2.checkContentLengthHeaderMiddlewareOptions = {
      step: "finalizeRequest",
      tags: ["CHECK_CONTENT_LENGTH_HEADER"],
      name: "getCheckContentLengthHeaderPlugin",
      override: true
    };
    var getCheckContentLengthHeaderPlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(checkContentLengthHeader(), exports2.checkContentLengthHeaderMiddlewareOptions);
      }
    });
    exports2.getCheckContentLengthHeaderPlugin = getCheckContentLengthHeaderPlugin;
  }
});

var require_configuration = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/configuration.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveS3Config = void 0;
    var resolveS3Config = (input) => {
      var _a, _b, _c;
      return {
        ...input,
        forcePathStyle: (_a = input.forcePathStyle) !== null && _a !== void 0 ? _a : false,
        useAccelerateEndpoint: (_b = input.useAccelerateEndpoint) !== null && _b !== void 0 ? _b : false,
        disableMultiregionAccessPoints: (_c = input.disableMultiregionAccessPoints) !== null && _c !== void 0 ? _c : false
      };
    };
    exports2.resolveS3Config = resolveS3Config;
  }
});

var require_throw_200_exceptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/throw-200-exceptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getThrow200ExceptionsPlugin = exports2.throw200ExceptionsMiddlewareOptions = exports2.throw200ExceptionsMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var throw200ExceptionsMiddleware = (config) => (next) => async (args) => {
      const result = await next(args);
      const { response } = result;
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return result;
      const { statusCode, body } = response;
      if (statusCode < 200 || statusCode >= 300)
        return result;
      const bodyBytes = await collectBody(body, config);
      const bodyString = await collectBodyString(bodyBytes, config);
      if (bodyBytes.length === 0) {
        const err = new Error("S3 aborted request");
        err.name = "InternalError";
        throw err;
      }
      if (bodyString && bodyString.match("<Error>")) {
        response.statusCode = 400;
      }
      response.body = bodyBytes;
      return result;
    };
    exports2.throw200ExceptionsMiddleware = throw200ExceptionsMiddleware;
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    exports2.throw200ExceptionsMiddlewareOptions = {
      relation: "after",
      toMiddleware: "deserializerMiddleware",
      tags: ["THROW_200_EXCEPTIONS", "S3"],
      name: "throw200ExceptionsMiddleware",
      override: true
    };
    var getThrow200ExceptionsPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.throw200ExceptionsMiddleware)(config), exports2.throw200ExceptionsMiddlewareOptions);
      }
    });
    exports2.getThrow200ExceptionsPlugin = getThrow200ExceptionsPlugin;
  }
});

var require_dist_cjs10 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-arn-parser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.build = exports2.parse = exports2.validate = void 0;
    var validate2 = (str) => typeof str === "string" && str.indexOf("arn:") === 0 && str.split(":").length >= 6;
    exports2.validate = validate2;
    var parse2 = (arn) => {
      const segments = arn.split(":");
      if (segments.length < 6 || segments[0] !== "arn")
        throw new Error("Malformed ARN");
      const [, partition, service, region, accountId, ...resource] = segments;
      return {
        partition,
        service,
        region,
        accountId,
        resource: resource.join(":")
      };
    };
    exports2.parse = parse2;
    var build = (arnObject) => {
      const { partition = "aws", service, region, accountId, resource } = arnObject;
      if ([service, region, accountId, resource].some((segment) => typeof segment !== "string")) {
        throw new Error("Input ARN object is invalid");
      }
      return `arn:${partition}:${service}:${region}:${accountId}:${resource}`;
    };
    exports2.build = build;
  }
});

var require_validate_bucket_name = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/validate-bucket-name.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidateBucketNamePlugin = exports2.validateBucketNameMiddlewareOptions = exports2.validateBucketNameMiddleware = void 0;
    var util_arn_parser_1 = require_dist_cjs10();
    function validateBucketNameMiddleware() {
      return (next) => async (args) => {
        const { input: { Bucket } } = args;
        if (typeof Bucket === "string" && !(0, util_arn_parser_1.validate)(Bucket) && Bucket.indexOf("/") >= 0) {
          const err = new Error(`Bucket name shouldn't contain '/', received '${Bucket}'`);
          err.name = "InvalidBucketName";
          throw err;
        }
        return next({ ...args });
      };
    }
    exports2.validateBucketNameMiddleware = validateBucketNameMiddleware;
    exports2.validateBucketNameMiddlewareOptions = {
      step: "initialize",
      tags: ["VALIDATE_BUCKET_NAME"],
      name: "validateBucketNameMiddleware",
      override: true
    };
    var getValidateBucketNamePlugin = (unused) => ({
      applyToStack: (clientStack) => {
        clientStack.add(validateBucketNameMiddleware(), exports2.validateBucketNameMiddlewareOptions);
      }
    });
    exports2.getValidateBucketNamePlugin = getValidateBucketNamePlugin;
  }
});

var require_dist_cjs11 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-s3/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_check_content_length_header(), exports2);
    tslib_1.__exportStar(require_configuration(), exports2);
    tslib_1.__exportStar(require_throw_200_exceptions(), exports2);
    tslib_1.__exportStar(require_validate_bucket_name(), exports2);
  }
});

var require_dist_cjs12 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-ssec/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsecPlugin = exports2.ssecMiddlewareOptions = exports2.ssecMiddleware = void 0;
    function ssecMiddleware(options) {
      return (next) => async (args) => {
        let input = { ...args.input };
        const properties = [
          {
            target: "SSECustomerKey",
            hash: "SSECustomerKeyMD5"
          },
          {
            target: "CopySourceSSECustomerKey",
            hash: "CopySourceSSECustomerKeyMD5"
          }
        ];
        for (const prop of properties) {
          const value = input[prop.target];
          if (value) {
            const valueView = ArrayBuffer.isView(value) ? new Uint8Array(value.buffer, value.byteOffset, value.byteLength) : typeof value === "string" ? options.utf8Decoder(value) : new Uint8Array(value);
            const encoded = options.base64Encoder(valueView);
            const hash = new options.md5();
            hash.update(valueView);
            input = {
              ...input,
              [prop.target]: encoded,
              [prop.hash]: options.base64Encoder(await hash.digest())
            };
          }
        }
        return next({
          ...args,
          input
        });
      };
    }
    exports2.ssecMiddleware = ssecMiddleware;
    exports2.ssecMiddlewareOptions = {
      name: "ssecMiddleware",
      step: "initialize",
      tags: ["SSE"],
      override: true
    };
    var getSsecPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(ssecMiddleware(config), exports2.ssecMiddlewareOptions);
      }
    });
    exports2.getSsecPlugin = getSsecPlugin;
  }
});

var require_CompleteMultipartUploadCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CompleteMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CompleteMultipartUploadCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_sdk_s3_1 = require_dist_cjs11();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var CompleteMultipartUploadCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CompleteMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CompleteMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CompleteMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CompleteMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlCompleteMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlCompleteMultipartUploadCommand)(output, context);
      }
    };
    exports2.CompleteMultipartUploadCommand = CompleteMultipartUploadCommand;
  }
});

var require_CopyObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CopyObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CopyObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_sdk_s3_1 = require_dist_cjs11();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var CopyObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CopyObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CopyObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CopyObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CopyObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlCopyObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlCopyObjectCommand)(output, context);
      }
    };
    exports2.CopyObjectCommand = CopyObjectCommand;
  }
});

var require_dist_cjs13 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-location-constraint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLocationConstraintPlugin = exports2.locationConstraintMiddlewareOptions = exports2.locationConstraintMiddleware = void 0;
    function locationConstraintMiddleware(options) {
      return (next) => async (args) => {
        const { CreateBucketConfiguration } = args.input;
        const region = await options.region();
        if (!CreateBucketConfiguration || !CreateBucketConfiguration.LocationConstraint) {
          args = {
            ...args,
            input: {
              ...args.input,
              CreateBucketConfiguration: region === "us-east-1" ? void 0 : { LocationConstraint: region }
            }
          };
        }
        return next(args);
      };
    }
    exports2.locationConstraintMiddleware = locationConstraintMiddleware;
    exports2.locationConstraintMiddlewareOptions = {
      step: "initialize",
      tags: ["LOCATION_CONSTRAINT", "CREATE_BUCKET_CONFIGURATION"],
      name: "locationConstraintMiddleware",
      override: true
    };
    var getLocationConstraintPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add(locationConstraintMiddleware(config), exports2.locationConstraintMiddlewareOptions);
      }
    });
    exports2.getLocationConstraintPlugin = getLocationConstraintPlugin;
  }
});

var require_CreateBucketCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateBucketCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_location_constraint_1 = require_dist_cjs13();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var CreateBucketCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          DisableAccessPoints: { type: "staticContextParams", value: true },
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateBucketCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_location_constraint_1.getLocationConstraintPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateBucketRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateBucketOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlCreateBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlCreateBucketCommand)(output, context);
      }
    };
    exports2.CreateBucketCommand = CreateBucketCommand;
  }
});

var require_CreateMultipartUploadCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/CreateMultipartUploadCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateMultipartUploadCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var CreateMultipartUploadCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateMultipartUploadCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "CreateMultipartUploadCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateMultipartUploadRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateMultipartUploadOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlCreateMultipartUploadCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlCreateMultipartUploadCommand)(output, context);
      }
    };
    exports2.CreateMultipartUploadCommand = CreateMultipartUploadCommand;
  }
});

var require_DeleteBucketAnalyticsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketAnalyticsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketAnalyticsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketAnalyticsConfigurationCommand = DeleteBucketAnalyticsConfigurationCommand;
  }
});

var require_DeleteBucketCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketCommand)(output, context);
      }
    };
    exports2.DeleteBucketCommand = DeleteBucketCommand;
  }
});

var require_DeleteBucketCorsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketCorsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketCorsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketCorsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketCorsCommand)(output, context);
      }
    };
    exports2.DeleteBucketCorsCommand = DeleteBucketCorsCommand;
  }
});

var require_DeleteBucketEncryptionCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketEncryptionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketEncryptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketEncryptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketEncryptionCommand)(output, context);
      }
    };
    exports2.DeleteBucketEncryptionCommand = DeleteBucketEncryptionCommand;
  }
});

var require_DeleteBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketIntelligentTieringConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketIntelligentTieringConfigurationCommand = DeleteBucketIntelligentTieringConfigurationCommand;
  }
});

var require_DeleteBucketInventoryConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketInventoryConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketInventoryConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketInventoryConfigurationCommand = DeleteBucketInventoryConfigurationCommand;
  }
});

var require_DeleteBucketLifecycleCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketLifecycleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketLifecycleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketLifecycleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketLifecycleCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketLifecycleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketLifecycleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketLifecycleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketLifecycleCommand)(output, context);
      }
    };
    exports2.DeleteBucketLifecycleCommand = DeleteBucketLifecycleCommand;
  }
});

var require_DeleteBucketMetricsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketMetricsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketMetricsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.DeleteBucketMetricsConfigurationCommand = DeleteBucketMetricsConfigurationCommand;
  }
});

var require_DeleteBucketOwnershipControlsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketOwnershipControlsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketOwnershipControlsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.DeleteBucketOwnershipControlsCommand = DeleteBucketOwnershipControlsCommand;
  }
});

var require_DeleteBucketPolicyCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketPolicyCommand)(output, context);
      }
    };
    exports2.DeleteBucketPolicyCommand = DeleteBucketPolicyCommand;
  }
});

var require_DeleteBucketReplicationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketReplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketReplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketReplicationCommand)(output, context);
      }
    };
    exports2.DeleteBucketReplicationCommand = DeleteBucketReplicationCommand;
  }
});

var require_DeleteBucketTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketTaggingCommand)(output, context);
      }
    };
    exports2.DeleteBucketTaggingCommand = DeleteBucketTaggingCommand;
  }
});

var require_DeleteBucketWebsiteCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteBucketWebsiteCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteBucketWebsiteCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteBucketWebsiteRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteBucketWebsiteCommand)(output, context);
      }
    };
    exports2.DeleteBucketWebsiteCommand = DeleteBucketWebsiteCommand;
  }
});

var require_DeleteObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteObjectCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteObjectCommand)(output, context);
      }
    };
    exports2.DeleteObjectCommand = DeleteObjectCommand;
  }
});

var require_constants2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ChecksumLocation = exports2.ChecksumAlgorithm = void 0;
    var ChecksumAlgorithm;
    (function(ChecksumAlgorithm2) {
      ChecksumAlgorithm2["MD5"] = "MD5";
      ChecksumAlgorithm2["CRC32"] = "CRC32";
      ChecksumAlgorithm2["CRC32C"] = "CRC32C";
      ChecksumAlgorithm2["SHA1"] = "SHA1";
      ChecksumAlgorithm2["SHA256"] = "SHA256";
    })(ChecksumAlgorithm = exports2.ChecksumAlgorithm || (exports2.ChecksumAlgorithm = {}));
    var ChecksumLocation;
    (function(ChecksumLocation2) {
      ChecksumLocation2["HEADER"] = "header";
      ChecksumLocation2["TRAILER"] = "trailer";
    })(ChecksumLocation = exports2.ChecksumLocation || (exports2.ChecksumLocation = {}));
  }
});

var require_types2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PRIORITY_ORDER_ALGORITHMS = exports2.CLIENT_SUPPORTED_ALGORITHMS = void 0;
    var constants_1 = require_constants2();
    exports2.CLIENT_SUPPORTED_ALGORITHMS = [
      constants_1.ChecksumAlgorithm.CRC32,
      constants_1.ChecksumAlgorithm.CRC32C,
      constants_1.ChecksumAlgorithm.SHA1,
      constants_1.ChecksumAlgorithm.SHA256
    ];
    exports2.PRIORITY_ORDER_ALGORITHMS = [
      constants_1.ChecksumAlgorithm.CRC32,
      constants_1.ChecksumAlgorithm.CRC32C,
      constants_1.ChecksumAlgorithm.SHA1,
      constants_1.ChecksumAlgorithm.SHA256
    ];
  }
});

var require_getChecksumAlgorithmForRequest = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumAlgorithmForRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumAlgorithmForRequest = void 0;
    var constants_1 = require_constants2();
    var types_1 = require_types2();
    var getChecksumAlgorithmForRequest = (input, { requestChecksumRequired, requestAlgorithmMember }) => {
      if (!requestAlgorithmMember || !input[requestAlgorithmMember]) {
        return requestChecksumRequired ? constants_1.ChecksumAlgorithm.MD5 : void 0;
      }
      const checksumAlgorithm = input[requestAlgorithmMember];
      if (!types_1.CLIENT_SUPPORTED_ALGORITHMS.includes(checksumAlgorithm)) {
        throw new Error(`The checksum algorithm "${checksumAlgorithm}" is not supported by the client. Select one of ${types_1.CLIENT_SUPPORTED_ALGORITHMS}.`);
      }
      return checksumAlgorithm;
    };
    exports2.getChecksumAlgorithmForRequest = getChecksumAlgorithmForRequest;
  }
});

var require_getChecksumLocationName = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumLocationName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumLocationName = void 0;
    var constants_1 = require_constants2();
    var getChecksumLocationName = (algorithm) => algorithm === constants_1.ChecksumAlgorithm.MD5 ? "content-md5" : `x-amz-checksum-${algorithm.toLowerCase()}`;
    exports2.getChecksumLocationName = getChecksumLocationName;
  }
});

var require_hasHeader = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/hasHeader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.hasHeader = void 0;
    var hasHeader = (header, headers) => {
      const soughtHeader = header.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
  }
});

var require_dist_cjs14 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/is-array-buffer/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isArrayBuffer = void 0;
    var isArrayBuffer = (arg) => typeof ArrayBuffer === "function" && arg instanceof ArrayBuffer || Object.prototype.toString.call(arg) === "[object ArrayBuffer]";
    exports2.isArrayBuffer = isArrayBuffer;
  }
});

var require_isStreaming = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/isStreaming.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isStreaming = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var isStreaming = (body) => body !== void 0 && typeof body !== "string" && !ArrayBuffer.isView(body) && !(0, is_array_buffer_1.isArrayBuffer)(body);
    exports2.isStreaming = isStreaming;
  }
});

var tslib_es6_exports2 = {};
__export(tslib_es6_exports2, {
  __assign: () => __assign2,
  __asyncDelegator: () => __asyncDelegator2,
  __asyncGenerator: () => __asyncGenerator2,
  __asyncValues: () => __asyncValues2,
  __await: () => __await2,
  __awaiter: () => __awaiter2,
  __classPrivateFieldGet: () => __classPrivateFieldGet2,
  __classPrivateFieldSet: () => __classPrivateFieldSet2,
  __createBinding: () => __createBinding2,
  __decorate: () => __decorate2,
  __exportStar: () => __exportStar2,
  __extends: () => __extends2,
  __generator: () => __generator2,
  __importDefault: () => __importDefault2,
  __importStar: () => __importStar2,
  __makeTemplateObject: () => __makeTemplateObject2,
  __metadata: () => __metadata2,
  __param: () => __param2,
  __read: () => __read2,
  __rest: () => __rest2,
  __spread: () => __spread2,
  __spreadArrays: () => __spreadArrays2,
  __values: () => __values2
});
function __extends2(d, b) {
  extendStatics2(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest2(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate2(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param2(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata2(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter2(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator2(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding2(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar2(m, exports2) {
  for (var p in m)
    if (p !== "default" && !exports2.hasOwnProperty(p))
      exports2[p] = m[p];
}
function __values2(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read2(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread2() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read2(arguments[i]));
  return ar;
}
function __spreadArrays2() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await2(v) {
  return this instanceof __await2 ? (this.v = v, this) : new __await2(v);
}
function __asyncGenerator2(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await2 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator2(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await2(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues2(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values2 === "function" ? __values2(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject2(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar2(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault2(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet2(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet2(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics2, __assign2;
var init_tslib_es62 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/node_modules/tslib/tslib.es6.js"() {
    extendStatics2 = function(d, b) {
      extendStatics2 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics2(d, b);
    };
    __assign2 = function() {
      __assign2 = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign2.apply(this, arguments);
    };
  }
});

var require_pureJs = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/pureJs.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var fromUtf8 = (input) => {
      const bytes = [];
      for (let i = 0, len = input.length; i < len; i++) {
        const value = input.charCodeAt(i);
        if (value < 128) {
          bytes.push(value);
        } else if (value < 2048) {
          bytes.push(value >> 6 | 192, value & 63 | 128);
        } else if (i + 1 < input.length && (value & 64512) === 55296 && (input.charCodeAt(i + 1) & 64512) === 56320) {
          const surrogatePair = 65536 + ((value & 1023) << 10) + (input.charCodeAt(++i) & 1023);
          bytes.push(surrogatePair >> 18 | 240, surrogatePair >> 12 & 63 | 128, surrogatePair >> 6 & 63 | 128, surrogatePair & 63 | 128);
        } else {
          bytes.push(value >> 12 | 224, value >> 6 & 63 | 128, value & 63 | 128);
        }
      }
      return Uint8Array.from(bytes);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => {
      let decoded = "";
      for (let i = 0, len = input.length; i < len; i++) {
        const byte = input[i];
        if (byte < 128) {
          decoded += String.fromCharCode(byte);
        } else if (192 <= byte && byte < 224) {
          const nextByte = input[++i];
          decoded += String.fromCharCode((byte & 31) << 6 | nextByte & 63);
        } else if (240 <= byte && byte < 365) {
          const surrogatePair = [byte, input[++i], input[++i], input[++i]];
          const encoded = "%" + surrogatePair.map((byteValue) => byteValue.toString(16)).join("%");
          decoded += decodeURIComponent(encoded);
        } else {
          decoded += String.fromCharCode((byte & 15) << 12 | (input[++i] & 63) << 6 | input[++i] & 63);
        }
      }
      return decoded;
    };
    exports2.toUtf8 = toUtf8;
  }
});

var require_whatwgEncodingApi = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/whatwgEncodingApi.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    function fromUtf8(input) {
      return new TextEncoder().encode(input);
    }
    exports2.fromUtf8 = fromUtf8;
    function toUtf8(input) {
      return new TextDecoder("utf-8").decode(input);
    }
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs15 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-browser/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var pureJs_1 = require_pureJs();
    var whatwgEncodingApi_1 = require_whatwgEncodingApi();
    var fromUtf8 = (input) => typeof TextEncoder === "function" ? (0, whatwgEncodingApi_1.fromUtf8)(input) : (0, pureJs_1.fromUtf8)(input);
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => typeof TextDecoder === "function" ? (0, whatwgEncodingApi_1.toUtf8)(input) : (0, pureJs_1.toUtf8)(input);
    exports2.toUtf8 = toUtf8;
  }
});

var require_convertToBuffer = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/convertToBuffer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.convertToBuffer = void 0;
    var util_utf8_browser_1 = require_dist_cjs15();
    var fromUtf8 = typeof Buffer !== "undefined" && Buffer.from ? function(input) {
      return Buffer.from(input, "utf8");
    } : util_utf8_browser_1.fromUtf8;
    function convertToBuffer(data) {
      if (data instanceof Uint8Array)
        return data;
      if (typeof data === "string") {
        return fromUtf8(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    }
    exports2.convertToBuffer = convertToBuffer;
  }
});

var require_isEmptyData = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/isEmptyData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isEmptyData = void 0;
    function isEmptyData(data) {
      if (typeof data === "string") {
        return data.length === 0;
      }
      return data.byteLength === 0;
    }
    exports2.isEmptyData = isEmptyData;
  }
});

var require_numToUint8 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/numToUint8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.numToUint8 = void 0;
    function numToUint8(num) {
      return new Uint8Array([
        (num & 4278190080) >> 24,
        (num & 16711680) >> 16,
        (num & 65280) >> 8,
        num & 255
      ]);
    }
    exports2.numToUint8 = numToUint8;
  }
});

var require_uint32ArrayFrom = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/uint32ArrayFrom.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = void 0;
    function uint32ArrayFrom(a_lookUpTable) {
      if (!Uint32Array.from) {
        var return_array = new Uint32Array(a_lookUpTable.length);
        var a_index = 0;
        while (a_index < a_lookUpTable.length) {
          return_array[a_index] = a_lookUpTable[a_index];
          a_index += 1;
        }
        return return_array;
      }
      return Uint32Array.from(a_lookUpTable);
    }
    exports2.uint32ArrayFrom = uint32ArrayFrom;
  }
});

var require_build = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/util/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uint32ArrayFrom = exports2.numToUint8 = exports2.isEmptyData = exports2.convertToBuffer = void 0;
    var convertToBuffer_1 = require_convertToBuffer();
    Object.defineProperty(exports2, "convertToBuffer", { enumerable: true, get: function() {
      return convertToBuffer_1.convertToBuffer;
    } });
    var isEmptyData_1 = require_isEmptyData();
    Object.defineProperty(exports2, "isEmptyData", { enumerable: true, get: function() {
      return isEmptyData_1.isEmptyData;
    } });
    var numToUint8_1 = require_numToUint8();
    Object.defineProperty(exports2, "numToUint8", { enumerable: true, get: function() {
      return numToUint8_1.numToUint8;
    } });
    var uint32ArrayFrom_1 = require_uint32ArrayFrom();
    Object.defineProperty(exports2, "uint32ArrayFrom", { enumerable: true, get: function() {
      return uint32ArrayFrom_1.uint32ArrayFrom;
    } });
  }
});

var require_aws_crc32 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/aws_crc32.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    var index_1 = require_build2();
    var AwsCrc32 = (
      /** @class */
      function() {
        function AwsCrc322() {
          this.crc32 = new index_1.Crc32();
        }
        AwsCrc322.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc322.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32.digest())];
            });
          });
        };
        AwsCrc322.prototype.reset = function() {
          this.crc32 = new index_1.Crc32();
        };
        return AwsCrc322;
      }()
    );
    exports2.AwsCrc32 = AwsCrc32;
  }
});

var require_build2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32 = exports2.Crc32 = exports2.crc32 = void 0;
    var tslib_1 = (init_tslib_es62(), __toCommonJS(tslib_es6_exports2));
    var util_1 = require_build();
    function crc32(data) {
      return new Crc32().update(data).digest();
    }
    exports2.crc32 = crc32;
    var Crc32 = (
      /** @class */
      function() {
        function Crc322() {
          this.checksum = 4294967295;
        }
        Crc322.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc322.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc322;
      }()
    );
    exports2.Crc32 = Crc32;
    var a_lookUpTable = [
      0,
      1996959894,
      3993919788,
      2567524794,
      124634137,
      1886057615,
      3915621685,
      2657392035,
      249268274,
      2044508324,
      3772115230,
      2547177864,
      162941995,
      2125561021,
      3887607047,
      2428444049,
      498536548,
      1789927666,
      4089016648,
      2227061214,
      450548861,
      1843258603,
      4107580753,
      2211677639,
      325883990,
      1684777152,
      4251122042,
      2321926636,
      335633487,
      1661365465,
      4195302755,
      2366115317,
      997073096,
      1281953886,
      3579855332,
      2724688242,
      1006888145,
      1258607687,
      3524101629,
      2768942443,
      901097722,
      1119000684,
      3686517206,
      2898065728,
      853044451,
      1172266101,
      3705015759,
      2882616665,
      651767980,
      1373503546,
      3369554304,
      3218104598,
      565507253,
      1454621731,
      3485111705,
      3099436303,
      671266974,
      1594198024,
      3322730930,
      2970347812,
      795835527,
      1483230225,
      3244367275,
      3060149565,
      1994146192,
      31158534,
      2563907772,
      4023717930,
      1907459465,
      112637215,
      2680153253,
      3904427059,
      2013776290,
      251722036,
      2517215374,
      3775830040,
      2137656763,
      141376813,
      2439277719,
      3865271297,
      1802195444,
      476864866,
      2238001368,
      4066508878,
      1812370925,
      453092731,
      2181625025,
      4111451223,
      1706088902,
      314042704,
      2344532202,
      4240017532,
      1658658271,
      366619977,
      2362670323,
      4224994405,
      1303535960,
      984961486,
      2747007092,
      3569037538,
      1256170817,
      1037604311,
      2765210733,
      3554079995,
      1131014506,
      879679996,
      2909243462,
      3663771856,
      1141124467,
      855842277,
      2852801631,
      3708648649,
      1342533948,
      654459306,
      3188396048,
      3373015174,
      1466479909,
      544179635,
      3110523913,
      3462522015,
      1591671054,
      702138776,
      2966460450,
      3352799412,
      1504918807,
      783551873,
      3082640443,
      3233442989,
      3988292384,
      2596254646,
      62317068,
      1957810842,
      3939845945,
      2647816111,
      81470997,
      1943803523,
      3814918930,
      2489596804,
      225274430,
      2053790376,
      3826175755,
      2466906013,
      167816743,
      2097651377,
      4027552580,
      2265490386,
      503444072,
      1762050814,
      4150417245,
      2154129355,
      426522225,
      1852507879,
      4275313526,
      2312317920,
      282753626,
      1742555852,
      4189708143,
      2394877945,
      397917763,
      1622183637,
      3604390888,
      2714866558,
      953729732,
      1340076626,
      3518719985,
      2797360999,
      1068828381,
      1219638859,
      3624741850,
      2936675148,
      906185462,
      1090812512,
      3747672003,
      2825379669,
      829329135,
      1181335161,
      3412177804,
      3160834842,
      628085408,
      1382605366,
      3423369109,
      3138078467,
      570562233,
      1426400815,
      3317316542,
      2998733608,
      733239954,
      1555261956,
      3268935591,
      3050360625,
      752459403,
      1541320221,
      2607071920,
      3965973030,
      1969922972,
      40735498,
      2617837225,
      3943577151,
      1913087877,
      83908371,
      2512341634,
      3803740692,
      2075208622,
      213261112,
      2463272603,
      3855990285,
      2094854071,
      198958881,
      2262029012,
      4057260610,
      1759359992,
      534414190,
      2176718541,
      4139329115,
      1873836001,
      414664567,
      2282248934,
      4279200368,
      1711684554,
      285281116,
      2405801727,
      4167216745,
      1634467795,
      376229701,
      2685067896,
      3608007406,
      1308918612,
      956543938,
      2808555105,
      3495958263,
      1231636301,
      1047427035,
      2932959818,
      3654703836,
      1088359270,
      936918e3,
      2847714899,
      3736837829,
      1202900863,
      817233897,
      3183342108,
      3401237130,
      1404277552,
      615818150,
      3134207493,
      3453421203,
      1423857449,
      601450431,
      3009837614,
      3294710456,
      1567103746,
      711928724,
      3020668471,
      3272380065,
      1510334235,
      755167117
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookUpTable);
    var aws_crc32_1 = require_aws_crc32();
    Object.defineProperty(exports2, "AwsCrc32", { enumerable: true, get: function() {
      return aws_crc32_1.AwsCrc32;
    } });
  }
});

var tslib_es6_exports3 = {};
__export(tslib_es6_exports3, {
  __assign: () => __assign3,
  __asyncDelegator: () => __asyncDelegator3,
  __asyncGenerator: () => __asyncGenerator3,
  __asyncValues: () => __asyncValues3,
  __await: () => __await3,
  __awaiter: () => __awaiter3,
  __classPrivateFieldGet: () => __classPrivateFieldGet3,
  __classPrivateFieldSet: () => __classPrivateFieldSet3,
  __createBinding: () => __createBinding3,
  __decorate: () => __decorate3,
  __exportStar: () => __exportStar3,
  __extends: () => __extends3,
  __generator: () => __generator3,
  __importDefault: () => __importDefault3,
  __importStar: () => __importStar3,
  __makeTemplateObject: () => __makeTemplateObject3,
  __metadata: () => __metadata3,
  __param: () => __param3,
  __read: () => __read3,
  __rest: () => __rest3,
  __spread: () => __spread3,
  __spreadArrays: () => __spreadArrays3,
  __values: () => __values3
});
function __extends3(d, b) {
  extendStatics3(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest3(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate3(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param3(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __metadata3(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter3(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator3(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (_)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
}
function __createBinding3(o, m, k, k2) {
  if (k2 === void 0)
    k2 = k;
  o[k2] = m[k];
}
function __exportStar3(m, exports2) {
  for (var p in m)
    if (p !== "default" && !exports2.hasOwnProperty(p))
      exports2[p] = m[p];
}
function __values3(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read3(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread3() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read3(arguments[i]));
  return ar;
}
function __spreadArrays3() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __await3(v) {
  return this instanceof __await3 ? (this.v = v, this) : new __await3(v);
}
function __asyncGenerator3(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await3 ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncDelegator3(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await3(o[n](v)), done: n === "return" } : f ? f(v) : v;
    } : f;
  }
}
function __asyncValues3(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values3 === "function" ? __values3(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}
function __makeTemplateObject3(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar3(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (Object.hasOwnProperty.call(mod, k))
        result[k] = mod[k];
  }
  result.default = mod;
  return result;
}
function __importDefault3(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet3(receiver, privateMap) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return privateMap.get(receiver);
}
function __classPrivateFieldSet3(receiver, privateMap, value) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to set private field on non-instance");
  }
  privateMap.set(receiver, value);
  return value;
}
var extendStatics3, __assign3;
var init_tslib_es63 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32c/node_modules/tslib/tslib.es6.js"() {
    extendStatics3 = function(d, b) {
      extendStatics3 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (b2.hasOwnProperty(p))
            d2[p] = b2[p];
      };
      return extendStatics3(d, b);
    };
    __assign3 = function() {
      __assign3 = Object.assign || function __assign4(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      };
      return __assign3.apply(this, arguments);
    };
  }
});

var require_aws_crc32c = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32c/build/aws_crc32c.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = void 0;
    var tslib_1 = (init_tslib_es63(), __toCommonJS(tslib_es6_exports3));
    var util_1 = require_build();
    var index_1 = require_build3();
    var AwsCrc32c = (
      /** @class */
      function() {
        function AwsCrc32c2() {
          this.crc32c = new index_1.Crc32c();
        }
        AwsCrc32c2.prototype.update = function(toHash) {
          if ((0, util_1.isEmptyData)(toHash))
            return;
          this.crc32c.update((0, util_1.convertToBuffer)(toHash));
        };
        AwsCrc32c2.prototype.digest = function() {
          return tslib_1.__awaiter(this, void 0, void 0, function() {
            return tslib_1.__generator(this, function(_a) {
              return [2, (0, util_1.numToUint8)(this.crc32c.digest())];
            });
          });
        };
        AwsCrc32c2.prototype.reset = function() {
          this.crc32c = new index_1.Crc32c();
        };
        return AwsCrc32c2;
      }()
    );
    exports2.AwsCrc32c = AwsCrc32c;
  }
});

var require_build3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-crypto/crc32c/build/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AwsCrc32c = exports2.Crc32c = exports2.crc32c = void 0;
    var tslib_1 = (init_tslib_es63(), __toCommonJS(tslib_es6_exports3));
    var util_1 = require_build();
    function crc32c(data) {
      return new Crc32c().update(data).digest();
    }
    exports2.crc32c = crc32c;
    var Crc32c = (
      /** @class */
      function() {
        function Crc32c2() {
          this.checksum = 4294967295;
        }
        Crc32c2.prototype.update = function(data) {
          var e_1, _a;
          try {
            for (var data_1 = tslib_1.__values(data), data_1_1 = data_1.next(); !data_1_1.done; data_1_1 = data_1.next()) {
              var byte = data_1_1.value;
              this.checksum = this.checksum >>> 8 ^ lookupTable[(this.checksum ^ byte) & 255];
            }
          } catch (e_1_1) {
            e_1 = { error: e_1_1 };
          } finally {
            try {
              if (data_1_1 && !data_1_1.done && (_a = data_1.return))
                _a.call(data_1);
            } finally {
              if (e_1)
                throw e_1.error;
            }
          }
          return this;
        };
        Crc32c2.prototype.digest = function() {
          return (this.checksum ^ 4294967295) >>> 0;
        };
        return Crc32c2;
      }()
    );
    exports2.Crc32c = Crc32c;
    var a_lookupTable = [
      0,
      4067132163,
      3778769143,
      324072436,
      3348797215,
      904991772,
      648144872,
      3570033899,
      2329499855,
      2024987596,
      1809983544,
      2575936315,
      1296289744,
      3207089363,
      2893594407,
      1578318884,
      274646895,
      3795141740,
      4049975192,
      51262619,
      3619967088,
      632279923,
      922689671,
      3298075524,
      2592579488,
      1760304291,
      2075979607,
      2312596564,
      1562183871,
      2943781820,
      3156637768,
      1313733451,
      549293790,
      3537243613,
      3246849577,
      871202090,
      3878099393,
      357341890,
      102525238,
      4101499445,
      2858735121,
      1477399826,
      1264559846,
      3107202533,
      1845379342,
      2677391885,
      2361733625,
      2125378298,
      820201905,
      3263744690,
      3520608582,
      598981189,
      4151959214,
      85089709,
      373468761,
      3827903834,
      3124367742,
      1213305469,
      1526817161,
      2842354314,
      2107672161,
      2412447074,
      2627466902,
      1861252501,
      1098587580,
      3004210879,
      2688576843,
      1378610760,
      2262928035,
      1955203488,
      1742404180,
      2511436119,
      3416409459,
      969524848,
      714683780,
      3639785095,
      205050476,
      4266873199,
      3976438427,
      526918040,
      1361435347,
      2739821008,
      2954799652,
      1114974503,
      2529119692,
      1691668175,
      2005155131,
      2247081528,
      3690758684,
      697762079,
      986182379,
      3366744552,
      476452099,
      3993867776,
      4250756596,
      255256311,
      1640403810,
      2477592673,
      2164122517,
      1922457750,
      2791048317,
      1412925310,
      1197962378,
      3037525897,
      3944729517,
      427051182,
      170179418,
      4165941337,
      746937522,
      3740196785,
      3451792453,
      1070968646,
      1905808397,
      2213795598,
      2426610938,
      1657317369,
      3053634322,
      1147748369,
      1463399397,
      2773627110,
      4215344322,
      153784257,
      444234805,
      3893493558,
      1021025245,
      3467647198,
      3722505002,
      797665321,
      2197175160,
      1889384571,
      1674398607,
      2443626636,
      1164749927,
      3070701412,
      2757221520,
      1446797203,
      137323447,
      4198817972,
      3910406976,
      461344835,
      3484808360,
      1037989803,
      781091935,
      3705997148,
      2460548119,
      1623424788,
      1939049696,
      2180517859,
      1429367560,
      2807687179,
      3020495871,
      1180866812,
      410100952,
      3927582683,
      4182430767,
      186734380,
      3756733383,
      763408580,
      1053836080,
      3434856499,
      2722870694,
      1344288421,
      1131464017,
      2971354706,
      1708204729,
      2545590714,
      2229949006,
      1988219213,
      680717673,
      3673779818,
      3383336350,
      1002577565,
      4010310262,
      493091189,
      238226049,
      4233660802,
      2987750089,
      1082061258,
      1395524158,
      2705686845,
      1972364758,
      2279892693,
      2494862625,
      1725896226,
      952904198,
      3399985413,
      3656866545,
      731699698,
      4283874585,
      222117402,
      510512622,
      3959836397,
      3280807620,
      837199303,
      582374963,
      3504198960,
      68661723,
      4135334616,
      3844915500,
      390545967,
      1230274059,
      3141532936,
      2825850620,
      1510247935,
      2395924756,
      2091215383,
      1878366691,
      2644384480,
      3553878443,
      565732008,
      854102364,
      3229815391,
      340358836,
      3861050807,
      4117890627,
      119113024,
      1493875044,
      2875275879,
      3090270611,
      1247431312,
      2660249211,
      1828433272,
      2141937292,
      2378227087,
      3811616794,
      291187481,
      34330861,
      4032846830,
      615137029,
      3603020806,
      3314634738,
      939183345,
      1776939221,
      2609017814,
      2295496738,
      2058945313,
      2926798794,
      1545135305,
      1330124605,
      3173225534,
      4084100981,
      17165430,
      307568514,
      3762199681,
      888469610,
      3332340585,
      3587147933,
      665062302,
      2042050490,
      2346497209,
      2559330125,
      1793573966,
      3190661285,
      1279665062,
      1595330642,
      2910671697
    ];
    var lookupTable = (0, util_1.uint32ArrayFrom)(a_lookupTable);
    var aws_crc32c_1 = require_aws_crc32c();
    Object.defineProperty(exports2, "AwsCrc32c", { enumerable: true, get: function() {
      return aws_crc32c_1.AwsCrc32c;
    } });
  }
});

var require_selectChecksumAlgorithmFunction = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/selectChecksumAlgorithmFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.selectChecksumAlgorithmFunction = void 0;
    var crc32_1 = require_build2();
    var crc32c_1 = require_build3();
    var constants_1 = require_constants2();
    var selectChecksumAlgorithmFunction = (checksumAlgorithm, config) => ({
      [constants_1.ChecksumAlgorithm.MD5]: config.md5,
      [constants_1.ChecksumAlgorithm.CRC32]: crc32_1.AwsCrc32,
      [constants_1.ChecksumAlgorithm.CRC32C]: crc32c_1.AwsCrc32c,
      [constants_1.ChecksumAlgorithm.SHA1]: config.sha1,
      [constants_1.ChecksumAlgorithm.SHA256]: config.sha256
    })[checksumAlgorithm];
    exports2.selectChecksumAlgorithmFunction = selectChecksumAlgorithmFunction;
  }
});

var require_dist_cjs16 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-buffer-from/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromString = exports2.fromArrayBuffer = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var buffer_1 = require("buffer");
    var fromArrayBuffer = (input, offset = 0, length = input.byteLength - offset) => {
      if (!(0, is_array_buffer_1.isArrayBuffer)(input)) {
        throw new TypeError(`The "input" argument must be ArrayBuffer. Received type ${typeof input} (${input})`);
      }
      return buffer_1.Buffer.from(input, offset, length);
    };
    exports2.fromArrayBuffer = fromArrayBuffer;
    var fromString = (input, encoding) => {
      if (typeof input !== "string") {
        throw new TypeError(`The "input" argument must be of type string. Received type ${typeof input} (${input})`);
      }
      return encoding ? buffer_1.Buffer.from(input, encoding) : buffer_1.Buffer.from(input);
    };
    exports2.fromString = fromString;
  }
});

var require_fromUtf8 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8/dist-cjs/fromUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
  }
});

var require_toUint8Array = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8/dist-cjs/toUint8Array.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUint8Array = void 0;
    var fromUtf8_1 = require_fromUtf8();
    var toUint8Array = (data) => {
      if (typeof data === "string") {
        return (0, fromUtf8_1.fromUtf8)(data);
      }
      if (ArrayBuffer.isView(data)) {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength / Uint8Array.BYTES_PER_ELEMENT);
      }
      return new Uint8Array(data);
    };
    exports2.toUint8Array = toUint8Array;
  }
});

var require_toUtf8 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8/dist-cjs/toUtf8.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

var require_dist_cjs17 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromUtf8(), exports2);
    tslib_1.__exportStar(require_toUint8Array(), exports2);
    tslib_1.__exportStar(require_toUtf8(), exports2);
  }
});

var require_stringHasher = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/stringHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringHasher = void 0;
    var util_utf8_1 = require_dist_cjs17();
    var stringHasher = (checksumAlgorithmFn, body) => {
      const hash = new checksumAlgorithmFn();
      hash.update((0, util_utf8_1.toUint8Array)(body || ""));
      return hash.digest();
    };
    exports2.stringHasher = stringHasher;
  }
});

var require_getChecksum = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksum = void 0;
    var isStreaming_1 = require_isStreaming();
    var stringHasher_1 = require_stringHasher();
    var getChecksum = async (body, { streamHasher, checksumAlgorithmFn, base64Encoder }) => {
      const digest = (0, isStreaming_1.isStreaming)(body) ? streamHasher(checksumAlgorithmFn, body) : (0, stringHasher_1.stringHasher)(checksumAlgorithmFn, body);
      return base64Encoder(await digest);
    };
    exports2.getChecksum = getChecksum;
  }
});

var require_getChecksumAlgorithmListForResponse = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getChecksumAlgorithmListForResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChecksumAlgorithmListForResponse = void 0;
    var types_1 = require_types2();
    var getChecksumAlgorithmListForResponse = (responseAlgorithms = []) => {
      const validChecksumAlgorithms = [];
      for (const algorithm of types_1.PRIORITY_ORDER_ALGORITHMS) {
        if (!responseAlgorithms.includes(algorithm) || !types_1.CLIENT_SUPPORTED_ALGORITHMS.includes(algorithm)) {
          continue;
        }
        validChecksumAlgorithms.push(algorithm);
      }
      return validChecksumAlgorithms;
    };
    exports2.getChecksumAlgorithmListForResponse = getChecksumAlgorithmListForResponse;
  }
});

var require_validateChecksumFromResponse = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/validateChecksumFromResponse.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateChecksumFromResponse = void 0;
    var getChecksum_1 = require_getChecksum();
    var getChecksumAlgorithmListForResponse_1 = require_getChecksumAlgorithmListForResponse();
    var getChecksumLocationName_1 = require_getChecksumLocationName();
    var selectChecksumAlgorithmFunction_1 = require_selectChecksumAlgorithmFunction();
    var validateChecksumFromResponse = async (response, { config, responseAlgorithms }) => {
      const checksumAlgorithms = (0, getChecksumAlgorithmListForResponse_1.getChecksumAlgorithmListForResponse)(responseAlgorithms);
      const { body: responseBody, headers: responseHeaders } = response;
      for (const algorithm of checksumAlgorithms) {
        const responseHeader = (0, getChecksumLocationName_1.getChecksumLocationName)(algorithm);
        const checksumFromResponse = responseHeaders[responseHeader];
        if (checksumFromResponse) {
          const checksumAlgorithmFn = (0, selectChecksumAlgorithmFunction_1.selectChecksumAlgorithmFunction)(algorithm, config);
          const { streamHasher, base64Encoder } = config;
          const checksum = await (0, getChecksum_1.getChecksum)(responseBody, { streamHasher, checksumAlgorithmFn, base64Encoder });
          if (checksum === checksumFromResponse) {
            break;
          }
          throw new Error(`Checksum mismatch: expected "${checksum}" but received "${checksumFromResponse}" in response header "${responseHeader}".`);
        }
      }
    };
    exports2.validateChecksumFromResponse = validateChecksumFromResponse;
  }
});

var require_flexibleChecksumsMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/flexibleChecksumsMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.flexibleChecksumsMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getChecksumAlgorithmForRequest_1 = require_getChecksumAlgorithmForRequest();
    var getChecksumLocationName_1 = require_getChecksumLocationName();
    var hasHeader_1 = require_hasHeader();
    var isStreaming_1 = require_isStreaming();
    var selectChecksumAlgorithmFunction_1 = require_selectChecksumAlgorithmFunction();
    var stringHasher_1 = require_stringHasher();
    var validateChecksumFromResponse_1 = require_validateChecksumFromResponse();
    var flexibleChecksumsMiddleware = (config, middlewareConfig) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request)) {
        return next(args);
      }
      const { request } = args;
      const { body: requestBody, headers } = request;
      const { base64Encoder, streamHasher } = config;
      const { input, requestChecksumRequired, requestAlgorithmMember } = middlewareConfig;
      const checksumAlgorithm = (0, getChecksumAlgorithmForRequest_1.getChecksumAlgorithmForRequest)(input, {
        requestChecksumRequired,
        requestAlgorithmMember
      });
      let updatedBody = requestBody;
      let updatedHeaders = headers;
      if (checksumAlgorithm) {
        const checksumLocationName = (0, getChecksumLocationName_1.getChecksumLocationName)(checksumAlgorithm);
        const checksumAlgorithmFn = (0, selectChecksumAlgorithmFunction_1.selectChecksumAlgorithmFunction)(checksumAlgorithm, config);
        if ((0, isStreaming_1.isStreaming)(requestBody)) {
          const { getAwsChunkedEncodingStream, bodyLengthChecker } = config;
          updatedBody = getAwsChunkedEncodingStream(requestBody, {
            base64Encoder,
            bodyLengthChecker,
            checksumLocationName,
            checksumAlgorithmFn,
            streamHasher
          });
          updatedHeaders = {
            ...headers,
            "content-encoding": "aws-chunked",
            "transfer-encoding": "chunked",
            "x-amz-decoded-content-length": headers["content-length"],
            "x-amz-content-sha256": "STREAMING-UNSIGNED-PAYLOAD-TRAILER",
            "x-amz-trailer": checksumLocationName
          };
          delete updatedHeaders["content-length"];
        } else if (!(0, hasHeader_1.hasHeader)(checksumLocationName, headers)) {
          const rawChecksum = await (0, stringHasher_1.stringHasher)(checksumAlgorithmFn, requestBody);
          updatedHeaders = {
            ...headers,
            [checksumLocationName]: base64Encoder(rawChecksum)
          };
        }
      }
      const result = await next({
        ...args,
        request: {
          ...request,
          headers: updatedHeaders,
          body: updatedBody
        }
      });
      const { requestValidationModeMember, responseAlgorithms } = middlewareConfig;
      if (requestValidationModeMember && input[requestValidationModeMember] === "ENABLED") {
        (0, validateChecksumFromResponse_1.validateChecksumFromResponse)(result.response, {
          config,
          responseAlgorithms
        });
      }
      return result;
    };
    exports2.flexibleChecksumsMiddleware = flexibleChecksumsMiddleware;
  }
});

var require_getFlexibleChecksumsPlugin = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/getFlexibleChecksumsPlugin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getFlexibleChecksumsPlugin = exports2.flexibleChecksumsMiddlewareOptions = void 0;
    var flexibleChecksumsMiddleware_1 = require_flexibleChecksumsMiddleware();
    exports2.flexibleChecksumsMiddlewareOptions = {
      name: "flexibleChecksumsMiddleware",
      step: "build",
      tags: ["BODY_CHECKSUM"],
      override: true
    };
    var getFlexibleChecksumsPlugin = (config, middlewareConfig) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, flexibleChecksumsMiddleware_1.flexibleChecksumsMiddleware)(config, middlewareConfig), exports2.flexibleChecksumsMiddlewareOptions);
      }
    });
    exports2.getFlexibleChecksumsPlugin = getFlexibleChecksumsPlugin;
  }
});

var require_dist_cjs18 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-flexible-checksums/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_constants2(), exports2);
    tslib_1.__exportStar(require_flexibleChecksumsMiddleware(), exports2);
    tslib_1.__exportStar(require_getFlexibleChecksumsPlugin(), exports2);
  }
});

var require_DeleteObjectsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteObjectsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteObjectsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteObjectsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteObjectsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteObjectsCommand)(output, context);
      }
    };
    exports2.DeleteObjectsCommand = DeleteObjectsCommand;
  }
});

var require_DeleteObjectTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeleteObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeleteObjectTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeleteObjectTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeleteObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeleteObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeleteObjectTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DeleteObjectTaggingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeleteObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeleteObjectTaggingCommand)(output, context);
      }
    };
    exports2.DeleteObjectTaggingCommand = DeleteObjectTaggingCommand;
  }
});

var require_DeletePublicAccessBlockCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/DeletePublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DeletePublicAccessBlockCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var DeletePublicAccessBlockCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DeletePublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "DeletePublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DeletePublicAccessBlockRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlDeletePublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlDeletePublicAccessBlockCommand)(output, context);
      }
    };
    exports2.DeletePublicAccessBlockCommand = DeletePublicAccessBlockCommand;
  }
});

var require_GetBucketAccelerateConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAccelerateConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAccelerateConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAccelerateConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketAccelerateConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketAccelerateConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketAccelerateConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketAccelerateConfigurationCommand = GetBucketAccelerateConfigurationCommand;
  }
});

var require_GetBucketAclCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAclCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAclCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketAclRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketAclOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketAclCommand)(output, context);
      }
    };
    exports2.GetBucketAclCommand = GetBucketAclCommand;
  }
});

var require_GetBucketAnalyticsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketAnalyticsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketAnalyticsConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketAnalyticsConfigurationCommand = GetBucketAnalyticsConfigurationCommand;
  }
});

var require_GetBucketCorsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketCorsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketCorsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketCorsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketCorsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketCorsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketCorsCommand)(output, context);
      }
    };
    exports2.GetBucketCorsCommand = GetBucketCorsCommand;
  }
});

var require_GetBucketEncryptionCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketEncryptionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketEncryptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketEncryptionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketEncryptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketEncryptionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketEncryptionCommand)(output, context);
      }
    };
    exports2.GetBucketEncryptionCommand = GetBucketEncryptionCommand;
  }
});

var require_GetBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketIntelligentTieringConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketIntelligentTieringConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketIntelligentTieringConfigurationCommand = GetBucketIntelligentTieringConfigurationCommand;
  }
});

var require_GetBucketInventoryConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketInventoryConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketInventoryConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketInventoryConfigurationCommand = GetBucketInventoryConfigurationCommand;
  }
});

var require_GetBucketLifecycleConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLifecycleConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLifecycleConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLifecycleConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketLifecycleConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketLifecycleConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketLifecycleConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketLifecycleConfigurationCommand = GetBucketLifecycleConfigurationCommand;
  }
});

var require_GetBucketLocationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLocationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLocationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLocationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketLocationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLocationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketLocationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketLocationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketLocationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketLocationCommand)(output, context);
      }
    };
    exports2.GetBucketLocationCommand = GetBucketLocationCommand;
  }
});

var require_GetBucketLoggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketLoggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketLoggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketLoggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketLoggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketLoggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketLoggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketLoggingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketLoggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketLoggingCommand)(output, context);
      }
    };
    exports2.GetBucketLoggingCommand = GetBucketLoggingCommand;
  }
});

var require_GetBucketMetricsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketMetricsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketMetricsConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketMetricsConfigurationCommand = GetBucketMetricsConfigurationCommand;
  }
});

var require_GetBucketNotificationConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketNotificationConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketNotificationConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketNotificationConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketNotificationConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.NotificationConfigurationFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketNotificationConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketNotificationConfigurationCommand)(output, context);
      }
    };
    exports2.GetBucketNotificationConfigurationCommand = GetBucketNotificationConfigurationCommand;
  }
});

var require_GetBucketOwnershipControlsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketOwnershipControlsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketOwnershipControlsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.GetBucketOwnershipControlsCommand = GetBucketOwnershipControlsCommand;
  }
});

var require_GetBucketPolicyCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketPolicyCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketPolicyOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyCommand)(output, context);
      }
    };
    exports2.GetBucketPolicyCommand = GetBucketPolicyCommand;
  }
});

var require_GetBucketPolicyStatusCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketPolicyStatusCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketPolicyStatusCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketPolicyStatusCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketPolicyStatusCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketPolicyStatusCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketPolicyStatusOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketPolicyStatusCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketPolicyStatusCommand)(output, context);
      }
    };
    exports2.GetBucketPolicyStatusCommand = GetBucketPolicyStatusCommand;
  }
});

var require_GetBucketReplicationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketReplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketReplicationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketReplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketReplicationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketReplicationCommand)(output, context);
      }
    };
    exports2.GetBucketReplicationCommand = GetBucketReplicationCommand;
  }
});

var require_GetBucketRequestPaymentCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketRequestPaymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketRequestPaymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketRequestPaymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketRequestPaymentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketRequestPaymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketRequestPaymentCommand)(output, context);
      }
    };
    exports2.GetBucketRequestPaymentCommand = GetBucketRequestPaymentCommand;
  }
});

var require_GetBucketTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketTaggingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketTaggingCommand)(output, context);
      }
    };
    exports2.GetBucketTaggingCommand = GetBucketTaggingCommand;
  }
});

var require_GetBucketVersioningCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketVersioningCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketVersioningCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketVersioningCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketVersioningCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketVersioningCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketVersioningRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketVersioningOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketVersioningCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketVersioningCommand)(output, context);
      }
    };
    exports2.GetBucketVersioningCommand = GetBucketVersioningCommand;
  }
});

var require_GetBucketWebsiteCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetBucketWebsiteCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetBucketWebsiteCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetBucketWebsiteCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetBucketWebsiteRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetBucketWebsiteOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetBucketWebsiteCommand)(output, context);
      }
    };
    exports2.GetBucketWebsiteCommand = GetBucketWebsiteCommand;
  }
});

var require_GetObjectAclCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectAclCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectAclCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectAclCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectAclRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectAclOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectAclCommand)(output, context);
      }
    };
    exports2.GetObjectAclCommand = GetObjectAclCommand;
  }
});

var require_GetObjectAttributesCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectAttributesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectAttributesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectAttributesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectAttributesCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectAttributesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectAttributesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectAttributesOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectAttributesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectAttributesCommand)(output, context);
      }
    };
    exports2.GetObjectAttributesCommand = GetObjectAttributesCommand;
  }
});

var require_GetObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestChecksumRequired: false,
          requestValidationModeMember: "ChecksumMode",
          responseAlgorithms: ["CRC32", "CRC32C", "SHA256", "SHA1"]
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectCommand)(output, context);
      }
    };
    exports2.GetObjectCommand = GetObjectCommand;
  }
});

var require_GetObjectLegalHoldCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLegalHoldCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectLegalHoldCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectLegalHoldCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectLegalHoldCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectLegalHoldRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectLegalHoldOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectLegalHoldCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectLegalHoldCommand)(output, context);
      }
    };
    exports2.GetObjectLegalHoldCommand = GetObjectLegalHoldCommand;
  }
});

var require_GetObjectLockConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectLockConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectLockConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectLockConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectLockConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectLockConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectLockConfigurationCommand)(output, context);
      }
    };
    exports2.GetObjectLockConfigurationCommand = GetObjectLockConfigurationCommand;
  }
});

var require_GetObjectRetentionCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectRetentionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectRetentionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectRetentionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectRetentionCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectRetentionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectRetentionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectRetentionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectRetentionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectRetentionCommand)(output, context);
      }
    };
    exports2.GetObjectRetentionCommand = GetObjectRetentionCommand;
  }
});

var require_GetObjectTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectTaggingCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectTaggingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectTaggingCommand)(output, context);
      }
    };
    exports2.GetObjectTaggingCommand = GetObjectTaggingCommand;
  }
});

var require_GetObjectTorrentCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetObjectTorrentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetObjectTorrentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetObjectTorrentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetObjectTorrentCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetObjectTorrentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetObjectTorrentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetObjectTorrentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetObjectTorrentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetObjectTorrentCommand)(output, context);
      }
    };
    exports2.GetObjectTorrentCommand = GetObjectTorrentCommand;
  }
});

var require_GetPublicAccessBlockCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/GetPublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetPublicAccessBlockCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var GetPublicAccessBlockCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetPublicAccessBlockCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "GetPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetPublicAccessBlockRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetPublicAccessBlockOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlGetPublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlGetPublicAccessBlockCommand)(output, context);
      }
    };
    exports2.GetPublicAccessBlockCommand = GetPublicAccessBlockCommand;
  }
});

var require_HeadBucketCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadBucketCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeadBucketCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var HeadBucketCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, HeadBucketCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadBucketCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.HeadBucketRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlHeadBucketCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlHeadBucketCommand)(output, context);
      }
    };
    exports2.HeadBucketCommand = HeadBucketCommand;
  }
});

var require_HeadObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/HeadObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeadObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var HeadObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, HeadObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "HeadObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.HeadObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.HeadObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlHeadObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlHeadObjectCommand)(output, context);
      }
    };
    exports2.HeadObjectCommand = HeadObjectCommand;
  }
});

var require_ListBucketAnalyticsConfigurationsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketAnalyticsConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketAnalyticsConfigurationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketAnalyticsConfigurationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListBucketAnalyticsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketAnalyticsConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBucketAnalyticsConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListBucketAnalyticsConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketAnalyticsConfigurationsCommand = ListBucketAnalyticsConfigurationsCommand;
  }
});

var require_ListBucketIntelligentTieringConfigurationsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketIntelligentTieringConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketIntelligentTieringConfigurationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketIntelligentTieringConfigurationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListBucketIntelligentTieringConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketIntelligentTieringConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBucketIntelligentTieringConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListBucketIntelligentTieringConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketIntelligentTieringConfigurationsCommand = ListBucketIntelligentTieringConfigurationsCommand;
  }
});

var require_ListBucketInventoryConfigurationsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketInventoryConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketInventoryConfigurationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketInventoryConfigurationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListBucketInventoryConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketInventoryConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBucketInventoryConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListBucketInventoryConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListBucketInventoryConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketInventoryConfigurationsCommand = ListBucketInventoryConfigurationsCommand;
  }
});

var require_ListBucketMetricsConfigurationsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketMetricsConfigurationsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketMetricsConfigurationsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketMetricsConfigurationsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListBucketMetricsConfigurationsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketMetricsConfigurationsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListBucketMetricsConfigurationsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListBucketMetricsConfigurationsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListBucketMetricsConfigurationsCommand)(output, context);
      }
    };
    exports2.ListBucketMetricsConfigurationsCommand = ListBucketMetricsConfigurationsCommand;
  }
});

var require_ListBucketsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListBucketsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListBucketsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListBucketsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListBucketsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListBucketsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: (input) => input,
          outputFilterSensitiveLog: models_0_1.ListBucketsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListBucketsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListBucketsCommand)(output, context);
      }
    };
    exports2.ListBucketsCommand = ListBucketsCommand;
  }
});

var require_ListMultipartUploadsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListMultipartUploadsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListMultipartUploadsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListMultipartUploadsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListMultipartUploadsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListMultipartUploadsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListMultipartUploadsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListMultipartUploadsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListMultipartUploadsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListMultipartUploadsCommand)(output, context);
      }
    };
    exports2.ListMultipartUploadsCommand = ListMultipartUploadsCommand;
  }
});

var require_ListObjectsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListObjectsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListObjectsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListObjectsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListObjectsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListObjectsCommand)(output, context);
      }
    };
    exports2.ListObjectsCommand = ListObjectsCommand;
  }
});

var require_ListObjectsV2Command = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectsV2Command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectsV2Command = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectsV2Command = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListObjectsV2Command.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectsV2Command";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListObjectsV2RequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListObjectsV2OutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListObjectsV2Command)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListObjectsV2Command)(output, context);
      }
    };
    exports2.ListObjectsV2Command = ListObjectsV2Command;
  }
});

var require_ListObjectVersionsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListObjectVersionsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListObjectVersionsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListObjectVersionsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListObjectVersionsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListObjectVersionsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListObjectVersionsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListObjectVersionsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListObjectVersionsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListObjectVersionsCommand)(output, context);
      }
    };
    exports2.ListObjectVersionsCommand = ListObjectVersionsCommand;
  }
});

var require_ListPartsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/ListPartsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListPartsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var ListPartsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListPartsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "ListPartsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListPartsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListPartsOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlListPartsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlListPartsCommand)(output, context);
      }
    };
    exports2.ListPartsCommand = ListPartsCommand;
  }
});

var require_PutBucketAccelerateConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAccelerateConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAccelerateConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAccelerateConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketAccelerateConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAccelerateConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketAccelerateConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketAccelerateConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketAccelerateConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketAccelerateConfigurationCommand = PutBucketAccelerateConfigurationCommand;
  }
});

var require_PutBucketAclCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAclCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAclCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketAclRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketAclCommand)(output, context);
      }
    };
    exports2.PutBucketAclCommand = PutBucketAclCommand;
  }
});

var require_PutBucketAnalyticsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketAnalyticsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketAnalyticsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketAnalyticsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketAnalyticsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketAnalyticsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketAnalyticsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketAnalyticsConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketAnalyticsConfigurationCommand = PutBucketAnalyticsConfigurationCommand;
  }
});

var require_PutBucketCorsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketCorsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketCorsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketCorsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketCorsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketCorsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketCorsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketCorsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketCorsCommand)(output, context);
      }
    };
    exports2.PutBucketCorsCommand = PutBucketCorsCommand;
  }
});

var require_PutBucketEncryptionCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketEncryptionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketEncryptionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketEncryptionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketEncryptionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketEncryptionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketEncryptionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketEncryptionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketEncryptionCommand)(output, context);
      }
    };
    exports2.PutBucketEncryptionCommand = PutBucketEncryptionCommand;
  }
});

var require_PutBucketIntelligentTieringConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketIntelligentTieringConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketIntelligentTieringConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketIntelligentTieringConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketIntelligentTieringConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketIntelligentTieringConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketIntelligentTieringConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketIntelligentTieringConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketIntelligentTieringConfigurationCommand = PutBucketIntelligentTieringConfigurationCommand;
  }
});

var require_PutBucketInventoryConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketInventoryConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketInventoryConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketInventoryConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketInventoryConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketInventoryConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketInventoryConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketInventoryConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketInventoryConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketInventoryConfigurationCommand = PutBucketInventoryConfigurationCommand;
  }
});

var require_PutBucketLifecycleConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLifecycleConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketLifecycleConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketLifecycleConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketLifecycleConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLifecycleConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketLifecycleConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketLifecycleConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketLifecycleConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketLifecycleConfigurationCommand = PutBucketLifecycleConfigurationCommand;
  }
});

var require_PutBucketLoggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketLoggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketLoggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketLoggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketLoggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketLoggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketLoggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketLoggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketLoggingCommand)(output, context);
      }
    };
    exports2.PutBucketLoggingCommand = PutBucketLoggingCommand;
  }
});

var require_PutBucketMetricsConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketMetricsConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketMetricsConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketMetricsConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketMetricsConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketMetricsConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketMetricsConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketMetricsConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketMetricsConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketMetricsConfigurationCommand = PutBucketMetricsConfigurationCommand;
  }
});

var require_PutBucketNotificationConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketNotificationConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketNotificationConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketNotificationConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketNotificationConfigurationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketNotificationConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketNotificationConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketNotificationConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketNotificationConfigurationCommand)(output, context);
      }
    };
    exports2.PutBucketNotificationConfigurationCommand = PutBucketNotificationConfigurationCommand;
  }
});

var require_PutBucketOwnershipControlsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketOwnershipControlsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketOwnershipControlsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketOwnershipControlsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketOwnershipControlsCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, { input: this.input, requestChecksumRequired: true }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketOwnershipControlsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketOwnershipControlsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketOwnershipControlsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketOwnershipControlsCommand)(output, context);
      }
    };
    exports2.PutBucketOwnershipControlsCommand = PutBucketOwnershipControlsCommand;
  }
});

var require_PutBucketPolicyCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketPolicyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketPolicyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketPolicyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketPolicyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketPolicyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketPolicyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketPolicyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketPolicyCommand)(output, context);
      }
    };
    exports2.PutBucketPolicyCommand = PutBucketPolicyCommand;
  }
});

var require_PutBucketReplicationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketReplicationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketReplicationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketReplicationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketReplicationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketReplicationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketReplicationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketReplicationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketReplicationCommand)(output, context);
      }
    };
    exports2.PutBucketReplicationCommand = PutBucketReplicationCommand;
  }
});

var require_PutBucketRequestPaymentCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketRequestPaymentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketRequestPaymentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketRequestPaymentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketRequestPaymentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketRequestPaymentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketRequestPaymentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketRequestPaymentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketRequestPaymentCommand)(output, context);
      }
    };
    exports2.PutBucketRequestPaymentCommand = PutBucketRequestPaymentCommand;
  }
});

var require_PutBucketTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketTaggingCommand)(output, context);
      }
    };
    exports2.PutBucketTaggingCommand = PutBucketTaggingCommand;
  }
});

var require_PutBucketVersioningCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketVersioningCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketVersioningCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketVersioningCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketVersioningCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketVersioningCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketVersioningRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketVersioningCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketVersioningCommand)(output, context);
      }
    };
    exports2.PutBucketVersioningCommand = PutBucketVersioningCommand;
  }
});

var require_PutBucketWebsiteCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutBucketWebsiteCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutBucketWebsiteCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutBucketWebsiteCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutBucketWebsiteCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutBucketWebsiteCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutBucketWebsiteRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutBucketWebsiteCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutBucketWebsiteCommand)(output, context);
      }
    };
    exports2.PutBucketWebsiteCommand = PutBucketWebsiteCommand;
  }
});

var require_PutObjectAclCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectAclCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectAclCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectAclCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectAclCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectAclCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutObjectAclRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutObjectAclOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectAclCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectAclCommand)(output, context);
      }
    };
    exports2.PutObjectAclCommand = PutObjectAclCommand;
  }
});

var require_PutObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_sdk_s3_1 = require_dist_cjs11();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getCheckContentLengthHeaderPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectCommand)(output, context);
      }
    };
    exports2.PutObjectCommand = PutObjectCommand;
  }
});

var require_PutObjectLegalHoldCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLegalHoldCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectLegalHoldCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectLegalHoldCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectLegalHoldCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLegalHoldCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutObjectLegalHoldRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutObjectLegalHoldOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectLegalHoldCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectLegalHoldCommand)(output, context);
      }
    };
    exports2.PutObjectLegalHoldCommand = PutObjectLegalHoldCommand;
  }
});

var require_PutObjectLockConfigurationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectLockConfigurationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectLockConfigurationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_0();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectLockConfigurationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectLockConfigurationCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectLockConfigurationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.PutObjectLockConfigurationOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectLockConfigurationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectLockConfigurationCommand)(output, context);
      }
    };
    exports2.PutObjectLockConfigurationCommand = PutObjectLockConfigurationCommand;
  }
});

var require_PutObjectRetentionCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectRetentionCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectRetentionCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectRetentionCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectRetentionCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectRetentionCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutObjectRetentionRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutObjectRetentionOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectRetentionCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectRetentionCommand)(output, context);
      }
    };
    exports2.PutObjectRetentionCommand = PutObjectRetentionCommand;
  }
});

var require_PutObjectTaggingCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutObjectTaggingCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutObjectTaggingCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutObjectTaggingCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutObjectTaggingCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutObjectTaggingCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutObjectTaggingRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.PutObjectTaggingOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutObjectTaggingCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutObjectTaggingCommand)(output, context);
      }
    };
    exports2.PutObjectTaggingCommand = PutObjectTaggingCommand;
  }
});

var require_PutPublicAccessBlockCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/PutPublicAccessBlockCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.PutPublicAccessBlockCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var PutPublicAccessBlockCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, PutPublicAccessBlockCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: true
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "PutPublicAccessBlockCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.PutPublicAccessBlockRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlPutPublicAccessBlockCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlPutPublicAccessBlockCommand)(output, context);
      }
    };
    exports2.PutPublicAccessBlockCommand = PutPublicAccessBlockCommand;
  }
});

var require_RestoreObjectCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/RestoreObjectCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RestoreObjectCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var RestoreObjectCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RestoreObjectCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "RestoreObjectCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.RestoreObjectRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.RestoreObjectOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlRestoreObjectCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlRestoreObjectCommand)(output, context);
      }
    };
    exports2.RestoreObjectCommand = RestoreObjectCommand;
  }
});

var require_SelectObjectContentCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/SelectObjectContentCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SelectObjectContentCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var SelectObjectContentCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, SelectObjectContentCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "SelectObjectContentCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.SelectObjectContentRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.SelectObjectContentOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlSelectObjectContentCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlSelectObjectContentCommand)(output, context);
      }
    };
    exports2.SelectObjectContentCommand = SelectObjectContentCommand;
  }
});

var require_UploadPartCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UploadPartCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_flexible_checksums_1 = require_dist_cjs18();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var UploadPartCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UploadPartCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        this.middlewareStack.use((0, middleware_flexible_checksums_1.getFlexibleChecksumsPlugin)(configuration, {
          input: this.input,
          requestAlgorithmMember: "ChecksumAlgorithm",
          requestChecksumRequired: false
        }));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadPartRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadPartOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlUploadPartCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlUploadPartCommand)(output, context);
      }
    };
    exports2.UploadPartCommand = UploadPartCommand;
  }
});

var require_UploadPartCopyCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/UploadPartCopyCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UploadPartCopyCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_sdk_s3_1 = require_dist_cjs11();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_ssec_1 = require_dist_cjs12();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var UploadPartCopyCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          Bucket: { type: "contextParams", name: "Bucket" },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, UploadPartCopyCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getThrow200ExceptionsPlugin)(configuration));
        this.middlewareStack.use((0, middleware_ssec_1.getSsecPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "UploadPartCopyCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.UploadPartCopyRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_1_1.UploadPartCopyOutputFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlUploadPartCopyCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlUploadPartCopyCommand)(output, context);
      }
    };
    exports2.UploadPartCopyCommand = UploadPartCopyCommand;
  }
});

var require_WriteGetObjectResponseCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/WriteGetObjectResponseCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.WriteGetObjectResponseCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_1_1 = require_models_1();
    var Aws_restXml_1 = require_Aws_restXml();
    var WriteGetObjectResponseCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseObjectLambdaEndpoint: { type: "staticContextParams", value: true },
          ForcePathStyle: { type: "clientContextParams", name: "forcePathStyle" },
          UseArnRegion: { type: "clientContextParams", name: "useArnRegion" },
          DisableMultiRegionAccessPoints: { type: "clientContextParams", name: "disableMultiregionAccessPoints" },
          Accelerate: { type: "clientContextParams", name: "useAccelerateEndpoint" },
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, WriteGetObjectResponseCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "S3Client";
        const commandName = "WriteGetObjectResponseCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_1_1.WriteGetObjectResponseRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restXml_1.serializeAws_restXmlWriteGetObjectResponseCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restXml_1.deserializeAws_restXmlWriteGetObjectResponseCommand)(output, context);
      }
    };
    exports2.WriteGetObjectResponseCommand = WriteGetObjectResponseCommand;
  }
});

var require_booleanSelector = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-config-provider/dist-cjs/booleanSelector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanSelector = exports2.SelectorType = void 0;
    var SelectorType;
    (function(SelectorType2) {
      SelectorType2["ENV"] = "env";
      SelectorType2["CONFIG"] = "shared config entry";
    })(SelectorType = exports2.SelectorType || (exports2.SelectorType = {}));
    var booleanSelector = (obj, key, type) => {
      if (!(key in obj))
        return void 0;
      if (obj[key] === "true")
        return true;
      if (obj[key] === "false")
        return false;
      throw new Error(`Cannot load ${type} "${key}". Expected "true" or "false", got ${obj[key]}.`);
    };
    exports2.booleanSelector = booleanSelector;
  }
});

var require_dist_cjs19 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_booleanSelector(), exports2);
  }
});

var require_NodeUseDualstackEndpointConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseDualstackEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = exports2.CONFIG_USE_DUALSTACK_ENDPOINT = exports2.ENV_USE_DUALSTACK_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs19();
    exports2.ENV_USE_DUALSTACK_ENDPOINT = "AWS_USE_DUALSTACK_ENDPOINT";
    exports2.CONFIG_USE_DUALSTACK_ENDPOINT = "use_dualstack_endpoint";
    exports2.DEFAULT_USE_DUALSTACK_ENDPOINT = false;
    exports2.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_DUALSTACK_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_NodeUseFipsEndpointConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/NodeUseFipsEndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = exports2.DEFAULT_USE_FIPS_ENDPOINT = exports2.CONFIG_USE_FIPS_ENDPOINT = exports2.ENV_USE_FIPS_ENDPOINT = void 0;
    var util_config_provider_1 = require_dist_cjs19();
    exports2.ENV_USE_FIPS_ENDPOINT = "AWS_USE_FIPS_ENDPOINT";
    exports2.CONFIG_USE_FIPS_ENDPOINT = "use_fips_endpoint";
    exports2.DEFAULT_USE_FIPS_ENDPOINT = false;
    exports2.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.ENV_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.CONFIG_USE_FIPS_ENDPOINT, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_resolveCustomEndpointsConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveCustomEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCustomEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var resolveCustomEndpointsConfig = (input) => {
      var _a, _b;
      const { endpoint, urlParser } = input;
      return {
        ...input,
        tls: (_a = input.tls) !== null && _a !== void 0 ? _a : true,
        endpoint: (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint),
        isCustomEndpoint: true,
        useDualstackEndpoint: (0, util_middleware_1.normalizeProvider)((_b = input.useDualstackEndpoint) !== null && _b !== void 0 ? _b : false)
      };
    };
    exports2.resolveCustomEndpointsConfig = resolveCustomEndpointsConfig;
  }
});

var require_getEndpointFromRegion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/utils/getEndpointFromRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointFromRegion = void 0;
    var getEndpointFromRegion = async (input) => {
      var _a;
      const { tls = true } = input;
      const region = await input.region();
      const dnsHostRegex = new RegExp(/^([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])$/);
      if (!dnsHostRegex.test(region)) {
        throw new Error("Invalid region in client config");
      }
      const useDualstackEndpoint = await input.useDualstackEndpoint();
      const useFipsEndpoint = await input.useFipsEndpoint();
      const { hostname } = (_a = await input.regionInfoProvider(region, { useDualstackEndpoint, useFipsEndpoint })) !== null && _a !== void 0 ? _a : {};
      if (!hostname) {
        throw new Error("Cannot resolve hostname from client config");
      }
      return input.urlParser(`${tls ? "https:" : "http:"}//${hostname}`);
    };
    exports2.getEndpointFromRegion = getEndpointFromRegion;
  }
});

var require_resolveEndpointsConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/resolveEndpointsConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpointsConfig = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var getEndpointFromRegion_1 = require_getEndpointFromRegion();
    var resolveEndpointsConfig = (input) => {
      var _a, _b;
      const useDualstackEndpoint = (0, util_middleware_1.normalizeProvider)((_a = input.useDualstackEndpoint) !== null && _a !== void 0 ? _a : false);
      const { endpoint, useFipsEndpoint, urlParser } = input;
      return {
        ...input,
        tls: (_b = input.tls) !== null && _b !== void 0 ? _b : true,
        endpoint: endpoint ? (0, util_middleware_1.normalizeProvider)(typeof endpoint === "string" ? urlParser(endpoint) : endpoint) : () => (0, getEndpointFromRegion_1.getEndpointFromRegion)({ ...input, useDualstackEndpoint, useFipsEndpoint }),
        isCustomEndpoint: !!endpoint,
        useDualstackEndpoint
      };
    };
    exports2.resolveEndpointsConfig = resolveEndpointsConfig;
  }
});

var require_endpointsConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/endpointsConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeUseDualstackEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseFipsEndpointConfigOptions(), exports2);
    tslib_1.__exportStar(require_resolveCustomEndpointsConfig(), exports2);
    tslib_1.__exportStar(require_resolveEndpointsConfig(), exports2);
  }
});

var require_config = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = exports2.NODE_REGION_CONFIG_OPTIONS = exports2.REGION_INI_NAME = exports2.REGION_ENV_NAME = void 0;
    exports2.REGION_ENV_NAME = "AWS_REGION";
    exports2.REGION_INI_NAME = "region";
    exports2.NODE_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.REGION_ENV_NAME],
      configFileSelector: (profile) => profile[exports2.REGION_INI_NAME],
      default: () => {
        throw new Error("Region is missing");
      }
    };
    exports2.NODE_REGION_CONFIG_FILE_OPTIONS = {
      preferredFile: "credentials"
    };
  }
});

var require_isFipsRegion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/isFipsRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isFipsRegion = void 0;
    var isFipsRegion = (region) => typeof region === "string" && (region.startsWith("fips-") || region.endsWith("-fips"));
    exports2.isFipsRegion = isFipsRegion;
  }
});

var require_getRealRegion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/getRealRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRealRegion = void 0;
    var isFipsRegion_1 = require_isFipsRegion();
    var getRealRegion = (region) => (0, isFipsRegion_1.isFipsRegion)(region) ? ["fips-aws-global", "aws-fips"].includes(region) ? "us-east-1" : region.replace(/fips-(dkr-|prod-)?|-fips/, "") : region;
    exports2.getRealRegion = getRealRegion;
  }
});

var require_resolveRegionConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/resolveRegionConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveRegionConfig = void 0;
    var getRealRegion_1 = require_getRealRegion();
    var isFipsRegion_1 = require_isFipsRegion();
    var resolveRegionConfig = (input) => {
      const { region, useFipsEndpoint } = input;
      if (!region) {
        throw new Error("Region is missing");
      }
      return {
        ...input,
        region: async () => {
          if (typeof region === "string") {
            return (0, getRealRegion_1.getRealRegion)(region);
          }
          const providedRegion = await region();
          return (0, getRealRegion_1.getRealRegion)(providedRegion);
        },
        useFipsEndpoint: async () => {
          const providedRegion = typeof region === "string" ? region : await region();
          if ((0, isFipsRegion_1.isFipsRegion)(providedRegion)) {
            return true;
          }
          return typeof useFipsEndpoint !== "function" ? Promise.resolve(!!useFipsEndpoint) : useFipsEndpoint();
        }
      };
    };
    exports2.resolveRegionConfig = resolveRegionConfig;
  }
});

var require_regionConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionConfig/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_config(), exports2);
    tslib_1.__exportStar(require_resolveRegionConfig(), exports2);
  }
});

var require_PartitionHash = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/PartitionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RegionHash = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/RegionHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_getHostnameFromVariants = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getHostnameFromVariants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostnameFromVariants = void 0;
    var getHostnameFromVariants = (variants = [], { useFipsEndpoint, useDualstackEndpoint }) => {
      var _a;
      return (_a = variants.find(({ tags }) => useFipsEndpoint === tags.includes("fips") && useDualstackEndpoint === tags.includes("dualstack"))) === null || _a === void 0 ? void 0 : _a.hostname;
    };
    exports2.getHostnameFromVariants = getHostnameFromVariants;
  }
});

var require_getResolvedHostname = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedHostname = void 0;
    var getResolvedHostname = (resolvedRegion, { regionHostname, partitionHostname }) => regionHostname ? regionHostname : partitionHostname ? partitionHostname.replace("{region}", resolvedRegion) : void 0;
    exports2.getResolvedHostname = getResolvedHostname;
  }
});

var require_getResolvedPartition = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedPartition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedPartition = void 0;
    var getResolvedPartition = (region, { partitionHash }) => {
      var _a;
      return (_a = Object.keys(partitionHash || {}).find((key) => partitionHash[key].regions.includes(region))) !== null && _a !== void 0 ? _a : "aws";
    };
    exports2.getResolvedPartition = getResolvedPartition;
  }
});

var require_getResolvedSigningRegion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getResolvedSigningRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getResolvedSigningRegion = void 0;
    var getResolvedSigningRegion = (hostname, { signingRegion, regionRegex, useFipsEndpoint }) => {
      if (signingRegion) {
        return signingRegion;
      } else if (useFipsEndpoint) {
        const regionRegexJs = regionRegex.replace("\\\\", "\\").replace(/^\^/g, "\\.").replace(/\$$/g, "\\.");
        const regionRegexmatchArray = hostname.match(regionRegexJs);
        if (regionRegexmatchArray) {
          return regionRegexmatchArray[0].slice(1, -1);
        }
      }
    };
    exports2.getResolvedSigningRegion = getResolvedSigningRegion;
  }
});

var require_getRegionInfo = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/getRegionInfo.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRegionInfo = void 0;
    var getHostnameFromVariants_1 = require_getHostnameFromVariants();
    var getResolvedHostname_1 = require_getResolvedHostname();
    var getResolvedPartition_1 = require_getResolvedPartition();
    var getResolvedSigningRegion_1 = require_getResolvedSigningRegion();
    var getRegionInfo = (region, { useFipsEndpoint = false, useDualstackEndpoint = false, signingService, regionHash, partitionHash }) => {
      var _a, _b, _c, _d, _e, _f;
      const partition = (0, getResolvedPartition_1.getResolvedPartition)(region, { partitionHash });
      const resolvedRegion = region in regionHash ? region : (_b = (_a = partitionHash[partition]) === null || _a === void 0 ? void 0 : _a.endpoint) !== null && _b !== void 0 ? _b : region;
      const hostnameOptions = { useFipsEndpoint, useDualstackEndpoint };
      const regionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_c = regionHash[resolvedRegion]) === null || _c === void 0 ? void 0 : _c.variants, hostnameOptions);
      const partitionHostname = (0, getHostnameFromVariants_1.getHostnameFromVariants)((_d = partitionHash[partition]) === null || _d === void 0 ? void 0 : _d.variants, hostnameOptions);
      const hostname = (0, getResolvedHostname_1.getResolvedHostname)(resolvedRegion, { regionHostname, partitionHostname });
      if (hostname === void 0) {
        throw new Error(`Endpoint resolution failed for: ${{ resolvedRegion, useFipsEndpoint, useDualstackEndpoint }}`);
      }
      const signingRegion = (0, getResolvedSigningRegion_1.getResolvedSigningRegion)(hostname, {
        signingRegion: (_e = regionHash[resolvedRegion]) === null || _e === void 0 ? void 0 : _e.signingRegion,
        regionRegex: partitionHash[partition].regionRegex,
        useFipsEndpoint
      });
      return {
        partition,
        signingService,
        hostname,
        ...signingRegion && { signingRegion },
        ...((_f = regionHash[resolvedRegion]) === null || _f === void 0 ? void 0 : _f.signingService) && {
          signingService: regionHash[resolvedRegion].signingService
        }
      };
    };
    exports2.getRegionInfo = getRegionInfo;
  }
});

var require_regionInfo = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/regionInfo/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_PartitionHash(), exports2);
    tslib_1.__exportStar(require_RegionHash(), exports2);
    tslib_1.__exportStar(require_getRegionInfo(), exports2);
  }
});

var require_dist_cjs20 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_endpointsConfig(), exports2);
    tslib_1.__exportStar(require_regionConfig(), exports2);
    tslib_1.__exportStar(require_regionInfo(), exports2);
  }
});

var require_EventStreamSerdeConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-cjs/EventStreamSerdeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEventStreamSerdeConfig = void 0;
    var resolveEventStreamSerdeConfig = (input) => ({
      ...input,
      eventStreamMarshaller: input.eventStreamSerdeProvider(input)
    });
    exports2.resolveEventStreamSerdeConfig = resolveEventStreamSerdeConfig;
  }
});

var require_dist_cjs21 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-config-resolver/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamSerdeConfig(), exports2);
  }
});

var require_dist_cjs22 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-content-length/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getContentLengthPlugin = exports2.contentLengthMiddlewareOptions = exports2.contentLengthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var CONTENT_LENGTH_HEADER = "content-length";
    function contentLengthMiddleware(bodyLengthChecker) {
      return (next) => async (args) => {
        const request = args.request;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          const { body, headers } = request;
          if (body && Object.keys(headers).map((str) => str.toLowerCase()).indexOf(CONTENT_LENGTH_HEADER) === -1) {
            try {
              const length = bodyLengthChecker(body);
              request.headers = {
                ...request.headers,
                [CONTENT_LENGTH_HEADER]: String(length)
              };
            } catch (error) {
            }
          }
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.contentLengthMiddleware = contentLengthMiddleware;
    exports2.contentLengthMiddlewareOptions = {
      step: "build",
      tags: ["SET_CONTENT_LENGTH", "CONTENT_LENGTH"],
      name: "contentLengthMiddleware",
      override: true
    };
    var getContentLengthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(contentLengthMiddleware(options.bodyLengthChecker), exports2.contentLengthMiddlewareOptions);
      }
    });
    exports2.getContentLengthPlugin = getContentLengthPlugin;
  }
});

var require_dist_cjs23 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-expect-continue/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAddExpectContinuePlugin = exports2.addExpectContinueMiddlewareOptions = exports2.addExpectContinueMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    function addExpectContinueMiddleware(options) {
      return (next) => async (args) => {
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request) && request.body && options.runtime === "node") {
          request.headers = {
            ...request.headers,
            Expect: "100-continue"
          };
        }
        return next({
          ...args,
          request
        });
      };
    }
    exports2.addExpectContinueMiddleware = addExpectContinueMiddleware;
    exports2.addExpectContinueMiddlewareOptions = {
      step: "build",
      tags: ["SET_EXPECT_HEADER", "EXPECT_HEADER"],
      name: "addExpectContinueMiddleware",
      override: true
    };
    var getAddExpectContinuePlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add(addExpectContinueMiddleware(options), exports2.addExpectContinueMiddlewareOptions);
      }
    });
    exports2.getAddExpectContinuePlugin = getAddExpectContinuePlugin;
  }
});

var require_dist_cjs24 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-host-header/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHostHeaderPlugin = exports2.hostHeaderMiddlewareOptions = exports2.hostHeaderMiddleware = exports2.resolveHostHeaderConfig = void 0;
    var protocol_http_1 = require_dist_cjs8();
    function resolveHostHeaderConfig(input) {
      return input;
    }
    exports2.resolveHostHeaderConfig = resolveHostHeaderConfig;
    var hostHeaderMiddleware = (options) => (next) => async (args) => {
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const { request } = args;
      const { handlerProtocol = "" } = options.requestHandler.metadata || {};
      if (handlerProtocol.indexOf("h2") >= 0 && !request.headers[":authority"]) {
        delete request.headers["host"];
        request.headers[":authority"] = "";
      } else if (!request.headers["host"]) {
        request.headers["host"] = request.hostname;
      }
      return next(args);
    };
    exports2.hostHeaderMiddleware = hostHeaderMiddleware;
    exports2.hostHeaderMiddlewareOptions = {
      name: "hostHeaderMiddleware",
      step: "build",
      priority: "low",
      tags: ["HOST"],
      override: true
    };
    var getHostHeaderPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.hostHeaderMiddleware)(options), exports2.hostHeaderMiddlewareOptions);
      }
    });
    exports2.getHostHeaderPlugin = getHostHeaderPlugin;
  }
});

var require_loggerMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/loggerMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getLoggerPlugin = exports2.loggerMiddlewareOptions = exports2.loggerMiddleware = void 0;
    var loggerMiddleware = () => (next, context) => async (args) => {
      const response = await next(args);
      const { clientName, commandName, logger, inputFilterSensitiveLog, outputFilterSensitiveLog, dynamoDbDocumentClientOptions = {} } = context;
      const { overrideInputFilterSensitiveLog, overrideOutputFilterSensitiveLog } = dynamoDbDocumentClientOptions;
      if (!logger) {
        return response;
      }
      if (typeof logger.info === "function") {
        const { $metadata, ...outputWithoutMetadata } = response.output;
        logger.info({
          clientName,
          commandName,
          input: (overrideInputFilterSensitiveLog !== null && overrideInputFilterSensitiveLog !== void 0 ? overrideInputFilterSensitiveLog : inputFilterSensitiveLog)(args.input),
          output: (overrideOutputFilterSensitiveLog !== null && overrideOutputFilterSensitiveLog !== void 0 ? overrideOutputFilterSensitiveLog : outputFilterSensitiveLog)(outputWithoutMetadata),
          metadata: $metadata
        });
      }
      return response;
    };
    exports2.loggerMiddleware = loggerMiddleware;
    exports2.loggerMiddlewareOptions = {
      name: "loggerMiddleware",
      tags: ["LOGGER"],
      step: "initialize",
      override: true
    };
    var getLoggerPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.loggerMiddleware)(), exports2.loggerMiddlewareOptions);
      }
    });
    exports2.getLoggerPlugin = getLoggerPlugin;
  }
});

var require_dist_cjs25 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-logger/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_loggerMiddleware(), exports2);
  }
});

var require_dist_cjs26 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-recursion-detection/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRecursionDetectionPlugin = exports2.addRecursionDetectionMiddlewareOptions = exports2.recursionDetectionMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var TRACE_ID_HEADER_NAME = "X-Amzn-Trace-Id";
    var ENV_LAMBDA_FUNCTION_NAME = "AWS_LAMBDA_FUNCTION_NAME";
    var ENV_TRACE_ID = "_X_AMZN_TRACE_ID";
    var recursionDetectionMiddleware = (options) => (next) => async (args) => {
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request) || options.runtime !== "node" || request.headers.hasOwnProperty(TRACE_ID_HEADER_NAME)) {
        return next(args);
      }
      const functionName = process.env[ENV_LAMBDA_FUNCTION_NAME];
      const traceId = process.env[ENV_TRACE_ID];
      const nonEmptyString = (str) => typeof str === "string" && str.length > 0;
      if (nonEmptyString(functionName) && nonEmptyString(traceId)) {
        request.headers[TRACE_ID_HEADER_NAME] = traceId;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.recursionDetectionMiddleware = recursionDetectionMiddleware;
    exports2.addRecursionDetectionMiddlewareOptions = {
      step: "build",
      tags: ["RECURSION_DETECTION"],
      name: "recursionDetectionMiddleware",
      override: true,
      priority: "low"
    };
    var getRecursionDetectionPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.recursionDetectionMiddleware)(options), exports2.addRecursionDetectionMiddlewareOptions);
      }
    });
    exports2.getRecursionDetectionPlugin = getRecursionDetectionPlugin;
  }
});

var require_config2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/config.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DEFAULT_RETRY_MODE = exports2.DEFAULT_MAX_ATTEMPTS = exports2.RETRY_MODES = void 0;
    var RETRY_MODES;
    (function(RETRY_MODES2) {
      RETRY_MODES2["STANDARD"] = "standard";
      RETRY_MODES2["ADAPTIVE"] = "adaptive";
    })(RETRY_MODES = exports2.RETRY_MODES || (exports2.RETRY_MODES = {}));
    exports2.DEFAULT_MAX_ATTEMPTS = 3;
    exports2.DEFAULT_RETRY_MODE = "STANDARD";
  }
});

var require_constants3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/service-error-classification/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = exports2.TRANSIENT_ERROR_STATUS_CODES = exports2.TRANSIENT_ERROR_CODES = exports2.THROTTLING_ERROR_CODES = exports2.CLOCK_SKEW_ERROR_CODES = void 0;
    exports2.CLOCK_SKEW_ERROR_CODES = [
      "AuthFailure",
      "InvalidSignatureException",
      "RequestExpired",
      "RequestInTheFuture",
      "RequestTimeTooSkewed",
      "SignatureDoesNotMatch"
    ];
    exports2.THROTTLING_ERROR_CODES = [
      "BandwidthLimitExceeded",
      "EC2ThrottledException",
      "LimitExceededException",
      "PriorRequestNotComplete",
      "ProvisionedThroughputExceededException",
      "RequestLimitExceeded",
      "RequestThrottled",
      "RequestThrottledException",
      "SlowDown",
      "ThrottledException",
      "Throttling",
      "ThrottlingException",
      "TooManyRequestsException",
      "TransactionInProgressException"
    ];
    exports2.TRANSIENT_ERROR_CODES = ["AbortError", "TimeoutError", "RequestTimeout", "RequestTimeoutException"];
    exports2.TRANSIENT_ERROR_STATUS_CODES = [500, 502, 503, 504];
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

var require_dist_cjs27 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/service-error-classification/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isServerError = exports2.isTransientError = exports2.isThrottlingError = exports2.isClockSkewError = exports2.isRetryableByTrait = void 0;
    var constants_1 = require_constants3();
    var isRetryableByTrait = (error) => error.$retryable !== void 0;
    exports2.isRetryableByTrait = isRetryableByTrait;
    var isClockSkewError = (error) => constants_1.CLOCK_SKEW_ERROR_CODES.includes(error.name);
    exports2.isClockSkewError = isClockSkewError;
    var isThrottlingError = (error) => {
      var _a, _b;
      return ((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) === 429 || constants_1.THROTTLING_ERROR_CODES.includes(error.name) || ((_b = error.$retryable) === null || _b === void 0 ? void 0 : _b.throttling) == true;
    };
    exports2.isThrottlingError = isThrottlingError;
    var isTransientError = (error) => {
      var _a;
      return constants_1.TRANSIENT_ERROR_CODES.includes(error.name) || constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes((error === null || error === void 0 ? void 0 : error.code) || "") || constants_1.TRANSIENT_ERROR_STATUS_CODES.includes(((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) || 0);
    };
    exports2.isTransientError = isTransientError;
    var isServerError = (error) => {
      var _a;
      if (((_a = error.$metadata) === null || _a === void 0 ? void 0 : _a.httpStatusCode) !== void 0) {
        const statusCode = error.$metadata.httpStatusCode;
        if (500 <= statusCode && statusCode <= 599 && !(0, exports2.isTransientError)(error)) {
          return true;
        }
        return false;
      }
      return false;
    };
    exports2.isServerError = isServerError;
  }
});

var require_DefaultRateLimiter = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/DefaultRateLimiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DefaultRateLimiter = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var DefaultRateLimiter = class {
      constructor(options) {
        var _a, _b, _c, _d, _e;
        this.currentCapacity = 0;
        this.enabled = false;
        this.lastMaxRate = 0;
        this.measuredTxRate = 0;
        this.requestCount = 0;
        this.lastTimestamp = 0;
        this.timeWindow = 0;
        this.beta = (_a = options === null || options === void 0 ? void 0 : options.beta) !== null && _a !== void 0 ? _a : 0.7;
        this.minCapacity = (_b = options === null || options === void 0 ? void 0 : options.minCapacity) !== null && _b !== void 0 ? _b : 1;
        this.minFillRate = (_c = options === null || options === void 0 ? void 0 : options.minFillRate) !== null && _c !== void 0 ? _c : 0.5;
        this.scaleConstant = (_d = options === null || options === void 0 ? void 0 : options.scaleConstant) !== null && _d !== void 0 ? _d : 0.4;
        this.smooth = (_e = options === null || options === void 0 ? void 0 : options.smooth) !== null && _e !== void 0 ? _e : 0.8;
        const currentTimeInSeconds = this.getCurrentTimeInSeconds();
        this.lastThrottleTime = currentTimeInSeconds;
        this.lastTxRateBucket = Math.floor(this.getCurrentTimeInSeconds());
        this.fillRate = this.minFillRate;
        this.maxCapacity = this.minCapacity;
      }
      getCurrentTimeInSeconds() {
        return Date.now() / 1e3;
      }
      async getSendToken() {
        return this.acquireTokenBucket(1);
      }
      async acquireTokenBucket(amount) {
        if (!this.enabled) {
          return;
        }
        this.refillTokenBucket();
        if (amount > this.currentCapacity) {
          const delay = (amount - this.currentCapacity) / this.fillRate * 1e3;
          await new Promise((resolve) => setTimeout(resolve, delay));
        }
        this.currentCapacity = this.currentCapacity - amount;
      }
      refillTokenBucket() {
        const timestamp = this.getCurrentTimeInSeconds();
        if (!this.lastTimestamp) {
          this.lastTimestamp = timestamp;
          return;
        }
        const fillAmount = (timestamp - this.lastTimestamp) * this.fillRate;
        this.currentCapacity = Math.min(this.maxCapacity, this.currentCapacity + fillAmount);
        this.lastTimestamp = timestamp;
      }
      updateClientSendingRate(response) {
        let calculatedRate;
        this.updateMeasuredRate();
        if ((0, service_error_classification_1.isThrottlingError)(response)) {
          const rateToUse = !this.enabled ? this.measuredTxRate : Math.min(this.measuredTxRate, this.fillRate);
          this.lastMaxRate = rateToUse;
          this.calculateTimeWindow();
          this.lastThrottleTime = this.getCurrentTimeInSeconds();
          calculatedRate = this.cubicThrottle(rateToUse);
          this.enableTokenBucket();
        } else {
          this.calculateTimeWindow();
          calculatedRate = this.cubicSuccess(this.getCurrentTimeInSeconds());
        }
        const newRate = Math.min(calculatedRate, 2 * this.measuredTxRate);
        this.updateTokenBucketRate(newRate);
      }
      calculateTimeWindow() {
        this.timeWindow = this.getPrecise(Math.pow(this.lastMaxRate * (1 - this.beta) / this.scaleConstant, 1 / 3));
      }
      cubicThrottle(rateToUse) {
        return this.getPrecise(rateToUse * this.beta);
      }
      cubicSuccess(timestamp) {
        return this.getPrecise(this.scaleConstant * Math.pow(timestamp - this.lastThrottleTime - this.timeWindow, 3) + this.lastMaxRate);
      }
      enableTokenBucket() {
        this.enabled = true;
      }
      updateTokenBucketRate(newRate) {
        this.refillTokenBucket();
        this.fillRate = Math.max(newRate, this.minFillRate);
        this.maxCapacity = Math.max(newRate, this.minCapacity);
        this.currentCapacity = Math.min(this.currentCapacity, this.maxCapacity);
      }
      updateMeasuredRate() {
        const t = this.getCurrentTimeInSeconds();
        const timeBucket = Math.floor(t * 2) / 2;
        this.requestCount++;
        if (timeBucket > this.lastTxRateBucket) {
          const currentRate = this.requestCount / (timeBucket - this.lastTxRateBucket);
          this.measuredTxRate = this.getPrecise(currentRate * this.smooth + this.measuredTxRate * (1 - this.smooth));
          this.requestCount = 0;
          this.lastTxRateBucket = timeBucket;
        }
      }
      getPrecise(num) {
        return parseFloat(num.toFixed(8));
      }
    };
    exports2.DefaultRateLimiter = DefaultRateLimiter;
  }
});

var require_constants4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REQUEST_HEADER = exports2.INVOCATION_ID_HEADER = exports2.NO_RETRY_INCREMENT = exports2.TIMEOUT_RETRY_COST = exports2.RETRY_COST = exports2.INITIAL_RETRY_TOKENS = exports2.THROTTLING_RETRY_DELAY_BASE = exports2.MAXIMUM_RETRY_DELAY = exports2.DEFAULT_RETRY_DELAY_BASE = void 0;
    exports2.DEFAULT_RETRY_DELAY_BASE = 100;
    exports2.MAXIMUM_RETRY_DELAY = 20 * 1e3;
    exports2.THROTTLING_RETRY_DELAY_BASE = 500;
    exports2.INITIAL_RETRY_TOKENS = 500;
    exports2.RETRY_COST = 5;
    exports2.TIMEOUT_RETRY_COST = 10;
    exports2.NO_RETRY_INCREMENT = 1;
    exports2.INVOCATION_ID_HEADER = "amz-sdk-invocation-id";
    exports2.REQUEST_HEADER = "amz-sdk-request";
  }
});

var require_defaultRetryBackoffStrategy = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryBackoffStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryBackoffStrategy = void 0;
    var constants_1 = require_constants4();
    var getDefaultRetryBackoffStrategy = () => {
      let delayBase = constants_1.DEFAULT_RETRY_DELAY_BASE;
      const computeNextBackoffDelay = (attempts) => {
        return Math.floor(Math.min(constants_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
      };
      const setDelayBase = (delay) => {
        delayBase = delay;
      };
      return {
        computeNextBackoffDelay,
        setDelayBase
      };
    };
    exports2.getDefaultRetryBackoffStrategy = getDefaultRetryBackoffStrategy;
  }
});

var require_defaultRetryToken = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/defaultRetryToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryToken = void 0;
    var constants_1 = require_constants4();
    var defaultRetryBackoffStrategy_1 = require_defaultRetryBackoffStrategy();
    var getDefaultRetryToken = (initialRetryTokens, initialRetryDelay, initialRetryCount, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const retryCost = (_a = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _a !== void 0 ? _a : constants_1.RETRY_COST;
      const timeoutRetryCost = (_b = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _b !== void 0 ? _b : constants_1.TIMEOUT_RETRY_COST;
      const retryBackoffStrategy = (_c = options === null || options === void 0 ? void 0 : options.retryBackoffStrategy) !== null && _c !== void 0 ? _c : (0, defaultRetryBackoffStrategy_1.getDefaultRetryBackoffStrategy)();
      let availableCapacity = initialRetryTokens;
      let retryDelay = Math.min(constants_1.MAXIMUM_RETRY_DELAY, initialRetryDelay);
      let lastRetryCost = void 0;
      let retryCount = initialRetryCount !== null && initialRetryCount !== void 0 ? initialRetryCount : 0;
      const getCapacityAmount = (errorType) => errorType === "TRANSIENT" ? timeoutRetryCost : retryCost;
      const getRetryCount = () => retryCount;
      const getRetryDelay = () => retryDelay;
      const getLastRetryCost = () => lastRetryCost;
      const hasRetryTokens = (errorType) => getCapacityAmount(errorType) <= availableCapacity;
      const getRetryTokenCount = (errorInfo) => {
        const errorType = errorInfo.errorType;
        if (!hasRetryTokens(errorType)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(errorType);
        const delayBase = errorType === "THROTTLING" ? constants_1.THROTTLING_RETRY_DELAY_BASE : constants_1.DEFAULT_RETRY_DELAY_BASE;
        retryBackoffStrategy.setDelayBase(delayBase);
        const delayFromErrorType = retryBackoffStrategy.computeNextBackoffDelay(retryCount);
        if (errorInfo.retryAfterHint) {
          const delayFromRetryAfterHint = errorInfo.retryAfterHint.getTime() - Date.now();
          retryDelay = Math.max(delayFromRetryAfterHint || 0, delayFromErrorType);
        } else {
          retryDelay = delayFromErrorType;
        }
        retryCount++;
        lastRetryCost = capacityAmount;
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (releaseAmount) => {
        availableCapacity += releaseAmount !== null && releaseAmount !== void 0 ? releaseAmount : constants_1.NO_RETRY_INCREMENT;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return {
        getRetryCount,
        getRetryDelay,
        getLastRetryCost,
        hasRetryTokens,
        getRetryTokenCount,
        releaseRetryTokens
      };
    };
    exports2.getDefaultRetryToken = getDefaultRetryToken;
  }
});

var require_StandardRetryStrategy = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var config_1 = require_config2();
    var constants_1 = require_constants4();
    var defaultRetryToken_1 = require_defaultRetryToken();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.STANDARD;
        this.retryToken = (0, defaultRetryToken_1.getDefaultRetryToken)(constants_1.INITIAL_RETRY_TOKENS, constants_1.DEFAULT_RETRY_DELAY_BASE);
        this.maxAttemptsProvider = maxAttemptsProvider;
      }
      async acquireInitialRetryToken(retryTokenScope) {
        return this.retryToken;
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        const maxAttempts = await this.getMaxAttempts();
        if (this.shouldRetry(tokenToRenew, errorInfo, maxAttempts)) {
          tokenToRenew.getRetryTokenCount(errorInfo);
          return tokenToRenew;
        }
        throw new Error("No retry token available");
      }
      recordSuccess(token) {
        this.retryToken.releaseRetryTokens(token.getLastRetryCost());
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          return await this.maxAttemptsProvider();
        } catch (error) {
          console.warn(`Max attempts provider could not resolve. Using default of ${config_1.DEFAULT_MAX_ATTEMPTS}`);
          return config_1.DEFAULT_MAX_ATTEMPTS;
        }
      }
      shouldRetry(tokenToRenew, errorInfo, maxAttempts) {
        const attempts = tokenToRenew.getRetryCount();
        return attempts < maxAttempts && tokenToRenew.hasRetryTokens(errorInfo.errorType) && this.isRetryableError(errorInfo.errorType);
      }
      isRetryableError(errorType) {
        return errorType === "THROTTLING" || errorType === "TRANSIENT";
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
  }
});

var require_AdaptiveRetryStrategy = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var config_1 = require_config2();
    var DefaultRateLimiter_1 = require_DefaultRateLimiter();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy();
    var AdaptiveRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = config_1.RETRY_MODES.ADAPTIVE;
        const { rateLimiter } = options !== null && options !== void 0 ? options : {};
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new DefaultRateLimiter_1.DefaultRateLimiter();
        this.standardRetryStrategy = new StandardRetryStrategy_1.StandardRetryStrategy(maxAttemptsProvider);
      }
      async acquireInitialRetryToken(retryTokenScope) {
        await this.rateLimiter.getSendToken();
        return this.standardRetryStrategy.acquireInitialRetryToken(retryTokenScope);
      }
      async refreshRetryTokenForRetry(tokenToRenew, errorInfo) {
        this.rateLimiter.updateClientSendingRate(errorInfo);
        return this.standardRetryStrategy.refreshRetryTokenForRetry(tokenToRenew, errorInfo);
      }
      recordSuccess(token) {
        this.rateLimiter.updateClientSendingRate({});
        this.standardRetryStrategy.recordSuccess(token);
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_types3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs28 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy(), exports2);
    tslib_1.__exportStar(require_DefaultRateLimiter(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy(), exports2);
    tslib_1.__exportStar(require_config2(), exports2);
    tslib_1.__exportStar(require_constants4(), exports2);
    tslib_1.__exportStar(require_types3(), exports2);
  }
});

function rng() {
  if (poolPtr > rnds8Pool.length - 16) {
    import_crypto.default.randomFillSync(rnds8Pool);
    poolPtr = 0;
  }
  return rnds8Pool.slice(poolPtr, poolPtr += 16);
}
var import_crypto, rnds8Pool, poolPtr;
var init_rng = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/rng.js"() {
    import_crypto = __toESM(require("crypto"));
    rnds8Pool = new Uint8Array(256);
    poolPtr = rnds8Pool.length;
  }
});

var regex_default;
var init_regex = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/regex.js"() {
    regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;
  }
});

function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default;
var init_validate = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/validate.js"() {
    init_regex();
    validate_default = validate;
  }
});

function stringify(arr, offset = 0) {
  const uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var byteToHex, stringify_default;
var init_stringify = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/stringify.js"() {
    init_validate();
    byteToHex = [];
    for (let i = 0; i < 256; ++i) {
      byteToHex.push((i + 256).toString(16).substr(1));
    }
    stringify_default = stringify;
  }
});

function v1(options, buf, offset) {
  let i = buf && offset || 0;
  const b = buf || new Array(16);
  options = options || {};
  let node = options.node || _nodeId;
  let clockseq = options.clockseq !== void 0 ? options.clockseq : _clockseq;
  if (node == null || clockseq == null) {
    const seedBytes = options.random || (options.rng || rng)();
    if (node == null) {
      node = _nodeId = [seedBytes[0] | 1, seedBytes[1], seedBytes[2], seedBytes[3], seedBytes[4], seedBytes[5]];
    }
    if (clockseq == null) {
      clockseq = _clockseq = (seedBytes[6] << 8 | seedBytes[7]) & 16383;
    }
  }
  let msecs = options.msecs !== void 0 ? options.msecs : Date.now();
  let nsecs = options.nsecs !== void 0 ? options.nsecs : _lastNSecs + 1;
  const dt = msecs - _lastMSecs + (nsecs - _lastNSecs) / 1e4;
  if (dt < 0 && options.clockseq === void 0) {
    clockseq = clockseq + 1 & 16383;
  }
  if ((dt < 0 || msecs > _lastMSecs) && options.nsecs === void 0) {
    nsecs = 0;
  }
  if (nsecs >= 1e4) {
    throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");
  }
  _lastMSecs = msecs;
  _lastNSecs = nsecs;
  _clockseq = clockseq;
  msecs += 122192928e5;
  const tl = ((msecs & 268435455) * 1e4 + nsecs) % 4294967296;
  b[i++] = tl >>> 24 & 255;
  b[i++] = tl >>> 16 & 255;
  b[i++] = tl >>> 8 & 255;
  b[i++] = tl & 255;
  const tmh = msecs / 4294967296 * 1e4 & 268435455;
  b[i++] = tmh >>> 8 & 255;
  b[i++] = tmh & 255;
  b[i++] = tmh >>> 24 & 15 | 16;
  b[i++] = tmh >>> 16 & 255;
  b[i++] = clockseq >>> 8 | 128;
  b[i++] = clockseq & 255;
  for (let n = 0; n < 6; ++n) {
    b[i + n] = node[n];
  }
  return buf || stringify_default(b);
}
var _nodeId, _clockseq, _lastMSecs, _lastNSecs, v1_default;
var init_v1 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v1.js"() {
    init_rng();
    init_stringify();
    _lastMSecs = 0;
    _lastNSecs = 0;
    v1_default = v1;
  }
});

function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  let v;
  const arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default;
var init_parse = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/parse.js"() {
    init_validate();
    parse_default = parse;
  }
});

function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  const bytes = [];
  for (let i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
function v35_default(name, version2, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    let bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version2;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (let i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL2;
  return generateUUID;
}
var DNS, URL2;
var init_v35 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v35.js"() {
    init_stringify();
    init_parse();
    DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
    URL2 = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
  }
});

function md5(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto2.default.createHash("md5").update(bytes).digest();
}
var import_crypto2, md5_default;
var init_md5 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/md5.js"() {
    import_crypto2 = __toESM(require("crypto"));
    md5_default = md5;
  }
});

var v3, v3_default;
var init_v3 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v3.js"() {
    init_v35();
    init_md5();
    v3 = v35_default("v3", 48, md5_default);
    v3_default = v3;
  }
});

function v4(options, buf, offset) {
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default;
var init_v4 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v4.js"() {
    init_rng();
    init_stringify();
    v4_default = v4;
  }
});

function sha1(bytes) {
  if (Array.isArray(bytes)) {
    bytes = Buffer.from(bytes);
  } else if (typeof bytes === "string") {
    bytes = Buffer.from(bytes, "utf8");
  }
  return import_crypto3.default.createHash("sha1").update(bytes).digest();
}
var import_crypto3, sha1_default;
var init_sha1 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/sha1.js"() {
    import_crypto3 = __toESM(require("crypto"));
    sha1_default = sha1;
  }
});

var v5, v5_default;
var init_v5 = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/v5.js"() {
    init_v35();
    init_sha1();
    v5 = v35_default("v5", 80, sha1_default);
    v5_default = v5;
  }
});

var nil_default;
var init_nil = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/nil.js"() {
    nil_default = "00000000-0000-0000-0000-000000000000";
  }
});

function version(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  return parseInt(uuid.substr(14, 1), 16);
}
var version_default;
var init_version = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/version.js"() {
    init_validate();
    version_default = version;
  }
});

var esm_node_exports = {};
__export(esm_node_exports, {
  NIL: () => nil_default,
  parse: () => parse_default,
  stringify: () => stringify_default,
  v1: () => v1_default,
  v3: () => v3_default,
  v4: () => v4_default,
  v5: () => v5_default,
  validate: () => validate_default,
  version: () => version_default
});
var init_esm_node = __esm({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/uuid/dist/esm-node/index.js"() {
    init_v1();
    init_v3();
    init_v4();
    init_v5();
    init_nil();
    init_version();
    init_validate();
    init_stringify();
    init_parse();
  }
});

var require_defaultRetryQuota = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/defaultRetryQuota.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getDefaultRetryQuota = void 0;
    var util_retry_1 = require_dist_cjs28();
    var getDefaultRetryQuota = (initialRetryTokens, options) => {
      var _a, _b, _c;
      const MAX_CAPACITY = initialRetryTokens;
      const noRetryIncrement = (_a = options === null || options === void 0 ? void 0 : options.noRetryIncrement) !== null && _a !== void 0 ? _a : util_retry_1.NO_RETRY_INCREMENT;
      const retryCost = (_b = options === null || options === void 0 ? void 0 : options.retryCost) !== null && _b !== void 0 ? _b : util_retry_1.RETRY_COST;
      const timeoutRetryCost = (_c = options === null || options === void 0 ? void 0 : options.timeoutRetryCost) !== null && _c !== void 0 ? _c : util_retry_1.TIMEOUT_RETRY_COST;
      let availableCapacity = initialRetryTokens;
      const getCapacityAmount = (error) => error.name === "TimeoutError" ? timeoutRetryCost : retryCost;
      const hasRetryTokens = (error) => getCapacityAmount(error) <= availableCapacity;
      const retrieveRetryTokens = (error) => {
        if (!hasRetryTokens(error)) {
          throw new Error("No retry token available");
        }
        const capacityAmount = getCapacityAmount(error);
        availableCapacity -= capacityAmount;
        return capacityAmount;
      };
      const releaseRetryTokens = (capacityReleaseAmount) => {
        availableCapacity += capacityReleaseAmount !== null && capacityReleaseAmount !== void 0 ? capacityReleaseAmount : noRetryIncrement;
        availableCapacity = Math.min(availableCapacity, MAX_CAPACITY);
      };
      return Object.freeze({
        hasRetryTokens,
        retrieveRetryTokens,
        releaseRetryTokens
      });
    };
    exports2.getDefaultRetryQuota = getDefaultRetryQuota;
  }
});

var require_delayDecider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/delayDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultDelayDecider = void 0;
    var util_retry_1 = require_dist_cjs28();
    var defaultDelayDecider = (delayBase, attempts) => Math.floor(Math.min(util_retry_1.MAXIMUM_RETRY_DELAY, Math.random() * 2 ** attempts * delayBase));
    exports2.defaultDelayDecider = defaultDelayDecider;
  }
});

var require_retryDecider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryDecider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultRetryDecider = void 0;
    var service_error_classification_1 = require_dist_cjs27();
    var defaultRetryDecider = (error) => {
      if (!error) {
        return false;
      }
      return (0, service_error_classification_1.isRetryableByTrait)(error) || (0, service_error_classification_1.isClockSkewError)(error) || (0, service_error_classification_1.isThrottlingError)(error) || (0, service_error_classification_1.isTransientError)(error);
    };
    exports2.defaultRetryDecider = defaultRetryDecider;
  }
});

var require_util2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.asSdkError = void 0;
    var asSdkError = (error) => {
      if (error instanceof Error)
        return error;
      if (error instanceof Object)
        return Object.assign(new Error(), error);
      if (typeof error === "string")
        return new Error(error);
      return new Error(`AWS SDK error wrapper for ${error}`);
    };
    exports2.asSdkError = asSdkError;
  }
});

var require_StandardRetryStrategy2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/StandardRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StandardRetryStrategy = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var defaultRetryQuota_1 = require_defaultRetryQuota();
    var delayDecider_1 = require_delayDecider();
    var retryDecider_1 = require_retryDecider();
    var util_1 = require_util2();
    var StandardRetryStrategy = class {
      constructor(maxAttemptsProvider, options) {
        var _a, _b, _c;
        this.maxAttemptsProvider = maxAttemptsProvider;
        this.mode = util_retry_1.RETRY_MODES.STANDARD;
        this.retryDecider = (_a = options === null || options === void 0 ? void 0 : options.retryDecider) !== null && _a !== void 0 ? _a : retryDecider_1.defaultRetryDecider;
        this.delayDecider = (_b = options === null || options === void 0 ? void 0 : options.delayDecider) !== null && _b !== void 0 ? _b : delayDecider_1.defaultDelayDecider;
        this.retryQuota = (_c = options === null || options === void 0 ? void 0 : options.retryQuota) !== null && _c !== void 0 ? _c : (0, defaultRetryQuota_1.getDefaultRetryQuota)(util_retry_1.INITIAL_RETRY_TOKENS);
      }
      shouldRetry(error, attempts, maxAttempts) {
        return attempts < maxAttempts && this.retryDecider(error) && this.retryQuota.hasRetryTokens(error);
      }
      async getMaxAttempts() {
        let maxAttempts;
        try {
          maxAttempts = await this.maxAttemptsProvider();
        } catch (error) {
          maxAttempts = util_retry_1.DEFAULT_MAX_ATTEMPTS;
        }
        return maxAttempts;
      }
      async retry(next, args, options) {
        let retryTokenAmount;
        let attempts = 0;
        let totalDelay = 0;
        const maxAttempts = await this.getMaxAttempts();
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            if (options === null || options === void 0 ? void 0 : options.beforeRequest) {
              await options.beforeRequest();
            }
            const { response, output } = await next(args);
            if (options === null || options === void 0 ? void 0 : options.afterRequest) {
              options.afterRequest(response);
            }
            this.retryQuota.releaseRetryTokens(retryTokenAmount);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalDelay;
            return { response, output };
          } catch (e) {
            const err = (0, util_1.asSdkError)(e);
            attempts++;
            if (this.shouldRetry(err, attempts, maxAttempts)) {
              retryTokenAmount = this.retryQuota.retrieveRetryTokens(err);
              const delayFromDecider = this.delayDecider((0, service_error_classification_1.isThrottlingError)(err) ? util_retry_1.THROTTLING_RETRY_DELAY_BASE : util_retry_1.DEFAULT_RETRY_DELAY_BASE, attempts);
              const delayFromResponse = getDelayFromRetryAfterHeader(err.$response);
              const delay = Math.max(delayFromResponse || 0, delayFromDecider);
              totalDelay += delay;
              await new Promise((resolve) => setTimeout(resolve, delay));
              continue;
            }
            if (!err.$metadata) {
              err.$metadata = {};
            }
            err.$metadata.attempts = attempts;
            err.$metadata.totalRetryDelay = totalDelay;
            throw err;
          }
        }
      }
    };
    exports2.StandardRetryStrategy = StandardRetryStrategy;
    var getDelayFromRetryAfterHeader = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return retryAfterSeconds * 1e3;
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate.getTime() - Date.now();
    };
  }
});

var require_AdaptiveRetryStrategy2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/AdaptiveRetryStrategy.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AdaptiveRetryStrategy = void 0;
    var util_retry_1 = require_dist_cjs28();
    var StandardRetryStrategy_1 = require_StandardRetryStrategy2();
    var AdaptiveRetryStrategy = class extends StandardRetryStrategy_1.StandardRetryStrategy {
      constructor(maxAttemptsProvider, options) {
        const { rateLimiter, ...superOptions } = options !== null && options !== void 0 ? options : {};
        super(maxAttemptsProvider, superOptions);
        this.rateLimiter = rateLimiter !== null && rateLimiter !== void 0 ? rateLimiter : new util_retry_1.DefaultRateLimiter();
        this.mode = util_retry_1.RETRY_MODES.ADAPTIVE;
      }
      async retry(next, args) {
        return super.retry(next, args, {
          beforeRequest: async () => {
            return this.rateLimiter.getSendToken();
          },
          afterRequest: (response) => {
            this.rateLimiter.updateClientSendingRate(response);
          }
        });
      }
    };
    exports2.AdaptiveRetryStrategy = AdaptiveRetryStrategy;
  }
});

var require_configurations = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = exports2.CONFIG_RETRY_MODE = exports2.ENV_RETRY_MODE = exports2.resolveRetryConfig = exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = exports2.CONFIG_MAX_ATTEMPTS = exports2.ENV_MAX_ATTEMPTS = void 0;
    var util_middleware_1 = require_dist_cjs4();
    var util_retry_1 = require_dist_cjs28();
    exports2.ENV_MAX_ATTEMPTS = "AWS_MAX_ATTEMPTS";
    exports2.CONFIG_MAX_ATTEMPTS = "max_attempts";
    exports2.NODE_MAX_ATTEMPT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        const value = env[exports2.ENV_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Environment variable ${exports2.ENV_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      configFileSelector: (profile) => {
        const value = profile[exports2.CONFIG_MAX_ATTEMPTS];
        if (!value)
          return void 0;
        const maxAttempt = parseInt(value);
        if (Number.isNaN(maxAttempt)) {
          throw new Error(`Shared config file entry ${exports2.CONFIG_MAX_ATTEMPTS} mast be a number, got "${value}"`);
        }
        return maxAttempt;
      },
      default: util_retry_1.DEFAULT_MAX_ATTEMPTS
    };
    var resolveRetryConfig = (input) => {
      var _a;
      const { retryStrategy } = input;
      const maxAttempts = (0, util_middleware_1.normalizeProvider)((_a = input.maxAttempts) !== null && _a !== void 0 ? _a : util_retry_1.DEFAULT_MAX_ATTEMPTS);
      return {
        ...input,
        maxAttempts,
        retryStrategy: async () => {
          if (retryStrategy) {
            return retryStrategy;
          }
          const retryMode = await (0, util_middleware_1.normalizeProvider)(input.retryMode)();
          if (retryMode === util_retry_1.RETRY_MODES.ADAPTIVE) {
            return new util_retry_1.AdaptiveRetryStrategy(maxAttempts);
          }
          return new util_retry_1.StandardRetryStrategy(maxAttempts);
        }
      };
    };
    exports2.resolveRetryConfig = resolveRetryConfig;
    exports2.ENV_RETRY_MODE = "AWS_RETRY_MODE";
    exports2.CONFIG_RETRY_MODE = "retry_mode";
    exports2.NODE_RETRY_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_RETRY_MODE],
      configFileSelector: (profile) => profile[exports2.CONFIG_RETRY_MODE],
      default: util_retry_1.DEFAULT_RETRY_MODE
    };
  }
});

var require_omitRetryHeadersMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/omitRetryHeadersMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getOmitRetryHeadersPlugin = exports2.omitRetryHeadersMiddlewareOptions = exports2.omitRetryHeadersMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_retry_1 = require_dist_cjs28();
    var omitRetryHeadersMiddleware = () => (next) => async (args) => {
      const { request } = args;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        delete request.headers[util_retry_1.INVOCATION_ID_HEADER];
        delete request.headers[util_retry_1.REQUEST_HEADER];
      }
      return next(args);
    };
    exports2.omitRetryHeadersMiddleware = omitRetryHeadersMiddleware;
    exports2.omitRetryHeadersMiddlewareOptions = {
      name: "omitRetryHeadersMiddleware",
      tags: ["RETRY", "HEADERS", "OMIT_RETRY_HEADERS"],
      relation: "before",
      toMiddleware: "awsAuthMiddleware",
      override: true
    };
    var getOmitRetryHeadersPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.omitRetryHeadersMiddleware)(), exports2.omitRetryHeadersMiddlewareOptions);
      }
    });
    exports2.getOmitRetryHeadersPlugin = getOmitRetryHeadersPlugin;
  }
});

var require_retryMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/retryMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRetryAfterHint = exports2.getRetryPlugin = exports2.retryMiddlewareOptions = exports2.retryMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var service_error_classification_1 = require_dist_cjs27();
    var util_retry_1 = require_dist_cjs28();
    var uuid_1 = (init_esm_node(), __toCommonJS(esm_node_exports));
    var util_1 = require_util2();
    var retryMiddleware = (options) => (next, context) => async (args) => {
      let retryStrategy = await options.retryStrategy();
      const maxAttempts = await options.maxAttempts();
      if (isRetryStrategyV2(retryStrategy)) {
        retryStrategy = retryStrategy;
        let retryToken = await retryStrategy.acquireInitialRetryToken(context["partition_id"]);
        let lastError = new Error();
        let attempts = 0;
        let totalRetryDelay = 0;
        const { request } = args;
        if (protocol_http_1.HttpRequest.isInstance(request)) {
          request.headers[util_retry_1.INVOCATION_ID_HEADER] = (0, uuid_1.v4)();
        }
        while (true) {
          try {
            if (protocol_http_1.HttpRequest.isInstance(request)) {
              request.headers[util_retry_1.REQUEST_HEADER] = `attempt=${attempts + 1}; max=${maxAttempts}`;
            }
            const { response, output } = await next(args);
            retryStrategy.recordSuccess(retryToken);
            output.$metadata.attempts = attempts + 1;
            output.$metadata.totalRetryDelay = totalRetryDelay;
            return { response, output };
          } catch (e) {
            const retryErrorInfo = getRetyErrorInto(e);
            lastError = (0, util_1.asSdkError)(e);
            try {
              retryToken = await retryStrategy.refreshRetryTokenForRetry(retryToken, retryErrorInfo);
            } catch (refreshError) {
              if (!lastError.$metadata) {
                lastError.$metadata = {};
              }
              lastError.$metadata.attempts = attempts + 1;
              lastError.$metadata.totalRetryDelay = totalRetryDelay;
              throw lastError;
            }
            attempts = retryToken.getRetryCount();
            const delay = retryToken.getRetryDelay();
            totalRetryDelay += delay;
            await new Promise((resolve) => setTimeout(resolve, delay));
          }
        }
      } else {
        retryStrategy = retryStrategy;
        if (retryStrategy === null || retryStrategy === void 0 ? void 0 : retryStrategy.mode)
          context.userAgent = [...context.userAgent || [], ["cfg/retry-mode", retryStrategy.mode]];
        return retryStrategy.retry(next, args);
      }
    };
    exports2.retryMiddleware = retryMiddleware;
    var isRetryStrategyV2 = (retryStrategy) => typeof retryStrategy.acquireInitialRetryToken !== "undefined" && typeof retryStrategy.refreshRetryTokenForRetry !== "undefined" && typeof retryStrategy.recordSuccess !== "undefined";
    var getRetyErrorInto = (error) => {
      const errorInfo = {
        errorType: getRetryErrorType(error)
      };
      const retryAfterHint = (0, exports2.getRetryAfterHint)(error.$response);
      if (retryAfterHint) {
        errorInfo.retryAfterHint = retryAfterHint;
      }
      return errorInfo;
    };
    var getRetryErrorType = (error) => {
      if ((0, service_error_classification_1.isThrottlingError)(error))
        return "THROTTLING";
      if ((0, service_error_classification_1.isTransientError)(error))
        return "TRANSIENT";
      if ((0, service_error_classification_1.isServerError)(error))
        return "SERVER_ERROR";
      return "CLIENT_ERROR";
    };
    exports2.retryMiddlewareOptions = {
      name: "retryMiddleware",
      tags: ["RETRY"],
      step: "finalizeRequest",
      priority: "high",
      override: true
    };
    var getRetryPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.retryMiddleware)(options), exports2.retryMiddlewareOptions);
      }
    });
    exports2.getRetryPlugin = getRetryPlugin;
    var getRetryAfterHint = (response) => {
      if (!protocol_http_1.HttpResponse.isInstance(response))
        return;
      const retryAfterHeaderName = Object.keys(response.headers).find((key) => key.toLowerCase() === "retry-after");
      if (!retryAfterHeaderName)
        return;
      const retryAfter = response.headers[retryAfterHeaderName];
      const retryAfterSeconds = Number(retryAfter);
      if (!Number.isNaN(retryAfterSeconds))
        return new Date(retryAfterSeconds * 1e3);
      const retryAfterDate = new Date(retryAfter);
      return retryAfterDate;
    };
    exports2.getRetryAfterHint = getRetryAfterHint;
  }
});

var require_dist_cjs29 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-retry/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AdaptiveRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_StandardRetryStrategy2(), exports2);
    tslib_1.__exportStar(require_configurations(), exports2);
    tslib_1.__exportStar(require_delayDecider(), exports2);
    tslib_1.__exportStar(require_omitRetryHeadersMiddleware(), exports2);
    tslib_1.__exportStar(require_retryDecider(), exports2);
    tslib_1.__exportStar(require_retryMiddleware(), exports2);
  }
});

var require_ProviderError = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/ProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ProviderError = void 0;
    var ProviderError = class extends Error {
      constructor(message, tryNextLink = true) {
        super(message);
        this.tryNextLink = tryNextLink;
        this.name = "ProviderError";
        Object.setPrototypeOf(this, ProviderError.prototype);
      }
      static from(error, tryNextLink = true) {
        return Object.assign(new this(error.message, tryNextLink), error);
      }
    };
    exports2.ProviderError = ProviderError;
  }
});

var require_CredentialsProviderError = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/CredentialsProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CredentialsProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var CredentialsProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "CredentialsProviderError";
        Object.setPrototypeOf(this, CredentialsProviderError.prototype);
      }
    };
    exports2.CredentialsProviderError = CredentialsProviderError;
  }
});

var require_TokenProviderError = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/TokenProviderError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.TokenProviderError = void 0;
    var ProviderError_1 = require_ProviderError();
    var TokenProviderError = class extends ProviderError_1.ProviderError {
      constructor(message, tryNextLink = true) {
        super(message, tryNextLink);
        this.tryNextLink = tryNextLink;
        this.name = "TokenProviderError";
        Object.setPrototypeOf(this, TokenProviderError.prototype);
      }
    };
    exports2.TokenProviderError = TokenProviderError;
  }
});

var require_chain = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/chain.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.chain = void 0;
    var ProviderError_1 = require_ProviderError();
    function chain(...providers) {
      return () => {
        let promise = Promise.reject(new ProviderError_1.ProviderError("No providers in chain"));
        for (const provider of providers) {
          promise = promise.catch((err) => {
            if (err === null || err === void 0 ? void 0 : err.tryNextLink) {
              return provider();
            }
            throw err;
          });
        }
        return promise;
      };
    }
    exports2.chain = chain;
  }
});

var require_fromStatic = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var fromStatic = (staticValue) => () => Promise.resolve(staticValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_memoize = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/memoize.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.memoize = void 0;
    var memoize = (provider, isExpired, requiresRefresh) => {
      let resolved;
      let pending;
      let hasResult;
      let isConstant = false;
      const coalesceProvider = async () => {
        if (!pending) {
          pending = provider();
        }
        try {
          resolved = await pending;
          hasResult = true;
          isConstant = false;
        } finally {
          pending = void 0;
        }
        return resolved;
      };
      if (isExpired === void 0) {
        return async (options) => {
          if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
            resolved = await coalesceProvider();
          }
          return resolved;
        };
      }
      return async (options) => {
        if (!hasResult || (options === null || options === void 0 ? void 0 : options.forceRefresh)) {
          resolved = await coalesceProvider();
        }
        if (isConstant) {
          return resolved;
        }
        if (requiresRefresh && !requiresRefresh(resolved)) {
          isConstant = true;
          return resolved;
        }
        if (isExpired(resolved)) {
          await coalesceProvider();
          return resolved;
        }
        return resolved;
      };
    };
    exports2.memoize = memoize;
  }
});

var require_dist_cjs30 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/property-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CredentialsProviderError(), exports2);
    tslib_1.__exportStar(require_ProviderError(), exports2);
    tslib_1.__exportStar(require_TokenProviderError(), exports2);
    tslib_1.__exportStar(require_chain(), exports2);
    tslib_1.__exportStar(require_fromStatic(), exports2);
    tslib_1.__exportStar(require_memoize(), exports2);
  }
});

var require_dist_cjs31 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-hex-encoding/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toHex = exports2.fromHex = void 0;
    var SHORT_TO_HEX = {};
    var HEX_TO_SHORT = {};
    for (let i = 0; i < 256; i++) {
      let encodedByte = i.toString(16).toLowerCase();
      if (encodedByte.length === 1) {
        encodedByte = `0${encodedByte}`;
      }
      SHORT_TO_HEX[i] = encodedByte;
      HEX_TO_SHORT[encodedByte] = i;
    }
    function fromHex(encoded) {
      if (encoded.length % 2 !== 0) {
        throw new Error("Hex encoded strings must have an even number length");
      }
      const out = new Uint8Array(encoded.length / 2);
      for (let i = 0; i < encoded.length; i += 2) {
        const encodedByte = encoded.slice(i, i + 2).toLowerCase();
        if (encodedByte in HEX_TO_SHORT) {
          out[i / 2] = HEX_TO_SHORT[encodedByte];
        } else {
          throw new Error(`Cannot decode unrecognized sequence ${encodedByte} as hexadecimal`);
        }
      }
      return out;
    }
    exports2.fromHex = fromHex;
    function toHex(bytes) {
      let out = "";
      for (let i = 0; i < bytes.byteLength; i++) {
        out += SHORT_TO_HEX[bytes[i]];
      }
      return out;
    }
    exports2.toHex = toHex;
  }
});

var require_constants5 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.MAX_PRESIGNED_TTL = exports2.KEY_TYPE_IDENTIFIER = exports2.MAX_CACHE_SIZE = exports2.UNSIGNED_PAYLOAD = exports2.EVENT_ALGORITHM_IDENTIFIER = exports2.ALGORITHM_IDENTIFIER_V4A = exports2.ALGORITHM_IDENTIFIER = exports2.UNSIGNABLE_PATTERNS = exports2.SEC_HEADER_PATTERN = exports2.PROXY_HEADER_PATTERN = exports2.ALWAYS_UNSIGNABLE_HEADERS = exports2.HOST_HEADER = exports2.TOKEN_HEADER = exports2.SHA256_HEADER = exports2.SIGNATURE_HEADER = exports2.GENERATED_HEADERS = exports2.DATE_HEADER = exports2.AMZ_DATE_HEADER = exports2.AUTH_HEADER = exports2.REGION_SET_PARAM = exports2.TOKEN_QUERY_PARAM = exports2.SIGNATURE_QUERY_PARAM = exports2.EXPIRES_QUERY_PARAM = exports2.SIGNED_HEADERS_QUERY_PARAM = exports2.AMZ_DATE_QUERY_PARAM = exports2.CREDENTIAL_QUERY_PARAM = exports2.ALGORITHM_QUERY_PARAM = void 0;
    exports2.ALGORITHM_QUERY_PARAM = "X-Amz-Algorithm";
    exports2.CREDENTIAL_QUERY_PARAM = "X-Amz-Credential";
    exports2.AMZ_DATE_QUERY_PARAM = "X-Amz-Date";
    exports2.SIGNED_HEADERS_QUERY_PARAM = "X-Amz-SignedHeaders";
    exports2.EXPIRES_QUERY_PARAM = "X-Amz-Expires";
    exports2.SIGNATURE_QUERY_PARAM = "X-Amz-Signature";
    exports2.TOKEN_QUERY_PARAM = "X-Amz-Security-Token";
    exports2.REGION_SET_PARAM = "X-Amz-Region-Set";
    exports2.AUTH_HEADER = "authorization";
    exports2.AMZ_DATE_HEADER = exports2.AMZ_DATE_QUERY_PARAM.toLowerCase();
    exports2.DATE_HEADER = "date";
    exports2.GENERATED_HEADERS = [exports2.AUTH_HEADER, exports2.AMZ_DATE_HEADER, exports2.DATE_HEADER];
    exports2.SIGNATURE_HEADER = exports2.SIGNATURE_QUERY_PARAM.toLowerCase();
    exports2.SHA256_HEADER = "x-amz-content-sha256";
    exports2.TOKEN_HEADER = exports2.TOKEN_QUERY_PARAM.toLowerCase();
    exports2.HOST_HEADER = "host";
    exports2.ALWAYS_UNSIGNABLE_HEADERS = {
      authorization: true,
      "cache-control": true,
      connection: true,
      expect: true,
      from: true,
      "keep-alive": true,
      "max-forwards": true,
      pragma: true,
      referer: true,
      te: true,
      trailer: true,
      "transfer-encoding": true,
      upgrade: true,
      "user-agent": true,
      "x-amzn-trace-id": true
    };
    exports2.PROXY_HEADER_PATTERN = /^proxy-/;
    exports2.SEC_HEADER_PATTERN = /^sec-/;
    exports2.UNSIGNABLE_PATTERNS = [/^proxy-/i, /^sec-/i];
    exports2.ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256";
    exports2.ALGORITHM_IDENTIFIER_V4A = "AWS4-ECDSA-P256-SHA256";
    exports2.EVENT_ALGORITHM_IDENTIFIER = "AWS4-HMAC-SHA256-PAYLOAD";
    exports2.UNSIGNED_PAYLOAD = "UNSIGNED-PAYLOAD";
    exports2.MAX_CACHE_SIZE = 50;
    exports2.KEY_TYPE_IDENTIFIER = "aws4_request";
    exports2.MAX_PRESIGNED_TTL = 60 * 60 * 24 * 7;
  }
});

var require_credentialDerivation = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/credentialDerivation.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.clearCredentialCache = exports2.getSigningKey = exports2.createScope = void 0;
    var util_hex_encoding_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs17();
    var constants_1 = require_constants5();
    var signingKeyCache = {};
    var cacheQueue = [];
    var createScope = (shortDate, region, service) => `${shortDate}/${region}/${service}/${constants_1.KEY_TYPE_IDENTIFIER}`;
    exports2.createScope = createScope;
    var getSigningKey = async (sha256Constructor, credentials, shortDate, region, service) => {
      const credsHash = await hmac(sha256Constructor, credentials.secretAccessKey, credentials.accessKeyId);
      const cacheKey = `${shortDate}:${region}:${service}:${(0, util_hex_encoding_1.toHex)(credsHash)}:${credentials.sessionToken}`;
      if (cacheKey in signingKeyCache) {
        return signingKeyCache[cacheKey];
      }
      cacheQueue.push(cacheKey);
      while (cacheQueue.length > constants_1.MAX_CACHE_SIZE) {
        delete signingKeyCache[cacheQueue.shift()];
      }
      let key = `AWS4${credentials.secretAccessKey}`;
      for (const signable of [shortDate, region, service, constants_1.KEY_TYPE_IDENTIFIER]) {
        key = await hmac(sha256Constructor, key, signable);
      }
      return signingKeyCache[cacheKey] = key;
    };
    exports2.getSigningKey = getSigningKey;
    var clearCredentialCache = () => {
      cacheQueue.length = 0;
      Object.keys(signingKeyCache).forEach((cacheKey) => {
        delete signingKeyCache[cacheKey];
      });
    };
    exports2.clearCredentialCache = clearCredentialCache;
    var hmac = (ctor, secret, data) => {
      const hash = new ctor(secret);
      hash.update((0, util_utf8_1.toUint8Array)(data));
      return hash.digest();
    };
  }
});

var require_getCanonicalHeaders = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalHeaders = void 0;
    var constants_1 = require_constants5();
    var getCanonicalHeaders = ({ headers }, unsignableHeaders, signableHeaders) => {
      const canonical = {};
      for (const headerName of Object.keys(headers).sort()) {
        if (headers[headerName] == void 0) {
          continue;
        }
        const canonicalHeaderName = headerName.toLowerCase();
        if (canonicalHeaderName in constants_1.ALWAYS_UNSIGNABLE_HEADERS || (unsignableHeaders === null || unsignableHeaders === void 0 ? void 0 : unsignableHeaders.has(canonicalHeaderName)) || constants_1.PROXY_HEADER_PATTERN.test(canonicalHeaderName) || constants_1.SEC_HEADER_PATTERN.test(canonicalHeaderName)) {
          if (!signableHeaders || signableHeaders && !signableHeaders.has(canonicalHeaderName)) {
            continue;
          }
        }
        canonical[canonicalHeaderName] = headers[headerName].trim().replace(/\s+/g, " ");
      }
      return canonical;
    };
    exports2.getCanonicalHeaders = getCanonicalHeaders;
  }
});

var require_escape_uri = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUri = void 0;
    var escapeUri = (uri) => encodeURIComponent(uri).replace(/[!'()*]/g, hexEncode);
    exports2.escapeUri = escapeUri;
    var hexEncode = (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`;
  }
});

var require_escape_uri_path = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-uri-escape/dist-cjs/escape-uri-path.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.escapeUriPath = void 0;
    var escape_uri_1 = require_escape_uri();
    var escapeUriPath = (uri) => uri.split("/").map(escape_uri_1.escapeUri).join("/");
    exports2.escapeUriPath = escapeUriPath;
  }
});

var require_dist_cjs32 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-uri-escape/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_escape_uri(), exports2);
    tslib_1.__exportStar(require_escape_uri_path(), exports2);
  }
});

var require_getCanonicalQuery = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/getCanonicalQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCanonicalQuery = void 0;
    var util_uri_escape_1 = require_dist_cjs32();
    var constants_1 = require_constants5();
    var getCanonicalQuery = ({ query = {} }) => {
      const keys = [];
      const serialized = {};
      for (const key of Object.keys(query).sort()) {
        if (key.toLowerCase() === constants_1.SIGNATURE_HEADER) {
          continue;
        }
        keys.push(key);
        const value = query[key];
        if (typeof value === "string") {
          serialized[key] = `${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value)}`;
        } else if (Array.isArray(value)) {
          serialized[key] = value.slice(0).sort().reduce((encoded, value2) => encoded.concat([`${(0, util_uri_escape_1.escapeUri)(key)}=${(0, util_uri_escape_1.escapeUri)(value2)}`]), []).join("&");
        }
      }
      return keys.map((key) => serialized[key]).filter((serialized2) => serialized2).join("&");
    };
    exports2.getCanonicalQuery = getCanonicalQuery;
  }
});

var require_getPayloadHash = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/getPayloadHash.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getPayloadHash = void 0;
    var is_array_buffer_1 = require_dist_cjs14();
    var util_hex_encoding_1 = require_dist_cjs31();
    var util_utf8_1 = require_dist_cjs17();
    var constants_1 = require_constants5();
    var getPayloadHash = async ({ headers, body }, hashConstructor) => {
      for (const headerName of Object.keys(headers)) {
        if (headerName.toLowerCase() === constants_1.SHA256_HEADER) {
          return headers[headerName];
        }
      }
      if (body == void 0) {
        return "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855";
      } else if (typeof body === "string" || ArrayBuffer.isView(body) || (0, is_array_buffer_1.isArrayBuffer)(body)) {
        const hashCtor = new hashConstructor();
        hashCtor.update((0, util_utf8_1.toUint8Array)(body));
        return (0, util_hex_encoding_1.toHex)(await hashCtor.digest());
      }
      return constants_1.UNSIGNED_PAYLOAD;
    };
    exports2.getPayloadHash = getPayloadHash;
  }
});

var require_headerUtil = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/headerUtil.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deleteHeader = exports2.getHeaderValue = exports2.hasHeader = void 0;
    var hasHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return true;
        }
      }
      return false;
    };
    exports2.hasHeader = hasHeader;
    var getHeaderValue = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          return headers[headerName];
        }
      }
      return void 0;
    };
    exports2.getHeaderValue = getHeaderValue;
    var deleteHeader = (soughtHeader, headers) => {
      soughtHeader = soughtHeader.toLowerCase();
      for (const headerName of Object.keys(headers)) {
        if (soughtHeader === headerName.toLowerCase()) {
          delete headers[headerName];
        }
      }
    };
    exports2.deleteHeader = deleteHeader;
  }
});

var require_cloneRequest = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/cloneRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.cloneQuery = exports2.cloneRequest = void 0;
    var cloneRequest = ({ headers, query, ...rest }) => ({
      ...rest,
      headers: { ...headers },
      query: query ? (0, exports2.cloneQuery)(query) : void 0
    });
    exports2.cloneRequest = cloneRequest;
    var cloneQuery = (query) => Object.keys(query).reduce((carry, paramName) => {
      const param = query[paramName];
      return {
        ...carry,
        [paramName]: Array.isArray(param) ? [...param] : param
      };
    }, {});
    exports2.cloneQuery = cloneQuery;
  }
});

var require_moveHeadersToQuery = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/moveHeadersToQuery.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.moveHeadersToQuery = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var moveHeadersToQuery = (request, options = {}) => {
      var _a;
      const { headers, query = {} } = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const name of Object.keys(headers)) {
        const lname = name.toLowerCase();
        if (lname.slice(0, 6) === "x-amz-" && !((_a = options.unhoistableHeaders) === null || _a === void 0 ? void 0 : _a.has(lname))) {
          query[name] = headers[name];
          delete headers[name];
        }
      }
      return {
        ...request,
        headers,
        query
      };
    };
    exports2.moveHeadersToQuery = moveHeadersToQuery;
  }
});

var require_prepareRequest = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/prepareRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = void 0;
    var cloneRequest_1 = require_cloneRequest();
    var constants_1 = require_constants5();
    var prepareRequest = (request) => {
      request = typeof request.clone === "function" ? request.clone() : (0, cloneRequest_1.cloneRequest)(request);
      for (const headerName of Object.keys(request.headers)) {
        if (constants_1.GENERATED_HEADERS.indexOf(headerName.toLowerCase()) > -1) {
          delete request.headers[headerName];
        }
      }
      return request;
    };
    exports2.prepareRequest = prepareRequest;
  }
});

var require_utilDate = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/utilDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDate = exports2.iso8601 = void 0;
    var iso8601 = (time) => (0, exports2.toDate)(time).toISOString().replace(/\.\d{3}Z$/, "Z");
    exports2.iso8601 = iso8601;
    var toDate = (time) => {
      if (typeof time === "number") {
        return new Date(time * 1e3);
      }
      if (typeof time === "string") {
        if (Number(time)) {
          return new Date(Number(time) * 1e3);
        }
        return new Date(time);
      }
      return time;
    };
    exports2.toDate = toDate;
  }
});

var require_SignatureV4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/SignatureV4.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4 = void 0;
    var util_hex_encoding_1 = require_dist_cjs31();
    var util_middleware_1 = require_dist_cjs4();
    var util_utf8_1 = require_dist_cjs17();
    var constants_1 = require_constants5();
    var credentialDerivation_1 = require_credentialDerivation();
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    var getPayloadHash_1 = require_getPayloadHash();
    var headerUtil_1 = require_headerUtil();
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    var prepareRequest_1 = require_prepareRequest();
    var utilDate_1 = require_utilDate();
    var SignatureV4 = class {
      constructor({ applyChecksum, credentials, region, service, sha256, uriEscapePath = true }) {
        this.service = service;
        this.sha256 = sha256;
        this.uriEscapePath = uriEscapePath;
        this.applyChecksum = typeof applyChecksum === "boolean" ? applyChecksum : true;
        this.regionProvider = (0, util_middleware_1.normalizeProvider)(region);
        this.credentialProvider = (0, util_middleware_1.normalizeProvider)(credentials);
      }
      async presign(originalRequest, options = {}) {
        const { signingDate = /* @__PURE__ */ new Date(), expiresIn = 3600, unsignableHeaders, unhoistableHeaders, signableHeaders, signingRegion, signingService } = options;
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { longDate, shortDate } = formatDate(signingDate);
        if (expiresIn > constants_1.MAX_PRESIGNED_TTL) {
          return Promise.reject("Signature version 4 presigned URLs must have an expiration date less than one week in the future");
        }
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const request = (0, moveHeadersToQuery_1.moveHeadersToQuery)((0, prepareRequest_1.prepareRequest)(originalRequest), { unhoistableHeaders });
        if (credentials.sessionToken) {
          request.query[constants_1.TOKEN_QUERY_PARAM] = credentials.sessionToken;
        }
        request.query[constants_1.ALGORITHM_QUERY_PARAM] = constants_1.ALGORITHM_IDENTIFIER;
        request.query[constants_1.CREDENTIAL_QUERY_PARAM] = `${credentials.accessKeyId}/${scope}`;
        request.query[constants_1.AMZ_DATE_QUERY_PARAM] = longDate;
        request.query[constants_1.EXPIRES_QUERY_PARAM] = expiresIn.toString(10);
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        request.query[constants_1.SIGNED_HEADERS_QUERY_PARAM] = getCanonicalHeaderList(canonicalHeaders);
        request.query[constants_1.SIGNATURE_QUERY_PARAM] = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, await (0, getPayloadHash_1.getPayloadHash)(originalRequest, this.sha256)));
        return request;
      }
      async sign(toSign, options) {
        if (typeof toSign === "string") {
          return this.signString(toSign, options);
        } else if (toSign.headers && toSign.payload) {
          return this.signEvent(toSign, options);
        } else {
          return this.signRequest(toSign, options);
        }
      }
      async signEvent({ headers, payload }, { signingDate = /* @__PURE__ */ new Date(), priorSignature, signingRegion, signingService }) {
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate, longDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        const hashedPayload = await (0, getPayloadHash_1.getPayloadHash)({ headers: {}, body: payload }, this.sha256);
        const hash = new this.sha256();
        hash.update(headers);
        const hashedHeaders = (0, util_hex_encoding_1.toHex)(await hash.digest());
        const stringToSign = [
          constants_1.EVENT_ALGORITHM_IDENTIFIER,
          longDate,
          scope,
          priorSignature,
          hashedHeaders,
          hashedPayload
        ].join("\n");
        return this.signString(stringToSign, { signingDate, signingRegion: region, signingService });
      }
      async signString(stringToSign, { signingDate = /* @__PURE__ */ new Date(), signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const { shortDate } = formatDate(signingDate);
        const hash = new this.sha256(await this.getSigningKey(credentials, region, shortDate, signingService));
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      async signRequest(requestToSign, { signingDate = /* @__PURE__ */ new Date(), signableHeaders, unsignableHeaders, signingRegion, signingService } = {}) {
        const credentials = await this.credentialProvider();
        this.validateResolvedCredentials(credentials);
        const region = signingRegion !== null && signingRegion !== void 0 ? signingRegion : await this.regionProvider();
        const request = (0, prepareRequest_1.prepareRequest)(requestToSign);
        const { longDate, shortDate } = formatDate(signingDate);
        const scope = (0, credentialDerivation_1.createScope)(shortDate, region, signingService !== null && signingService !== void 0 ? signingService : this.service);
        request.headers[constants_1.AMZ_DATE_HEADER] = longDate;
        if (credentials.sessionToken) {
          request.headers[constants_1.TOKEN_HEADER] = credentials.sessionToken;
        }
        const payloadHash = await (0, getPayloadHash_1.getPayloadHash)(request, this.sha256);
        if (!(0, headerUtil_1.hasHeader)(constants_1.SHA256_HEADER, request.headers) && this.applyChecksum) {
          request.headers[constants_1.SHA256_HEADER] = payloadHash;
        }
        const canonicalHeaders = (0, getCanonicalHeaders_1.getCanonicalHeaders)(request, unsignableHeaders, signableHeaders);
        const signature = await this.getSignature(longDate, scope, this.getSigningKey(credentials, region, shortDate, signingService), this.createCanonicalRequest(request, canonicalHeaders, payloadHash));
        request.headers[constants_1.AUTH_HEADER] = `${constants_1.ALGORITHM_IDENTIFIER} Credential=${credentials.accessKeyId}/${scope}, SignedHeaders=${getCanonicalHeaderList(canonicalHeaders)}, Signature=${signature}`;
        return request;
      }
      createCanonicalRequest(request, canonicalHeaders, payloadHash) {
        const sortedHeaders = Object.keys(canonicalHeaders).sort();
        return `${request.method}
${this.getCanonicalPath(request)}
${(0, getCanonicalQuery_1.getCanonicalQuery)(request)}
${sortedHeaders.map((name) => `${name}:${canonicalHeaders[name]}`).join("\n")}

${sortedHeaders.join(";")}
${payloadHash}`;
      }
      async createStringToSign(longDate, credentialScope, canonicalRequest) {
        const hash = new this.sha256();
        hash.update((0, util_utf8_1.toUint8Array)(canonicalRequest));
        const hashedRequest = await hash.digest();
        return `${constants_1.ALGORITHM_IDENTIFIER}
${longDate}
${credentialScope}
${(0, util_hex_encoding_1.toHex)(hashedRequest)}`;
      }
      getCanonicalPath({ path }) {
        if (this.uriEscapePath) {
          const normalizedPathSegments = [];
          for (const pathSegment of path.split("/")) {
            if ((pathSegment === null || pathSegment === void 0 ? void 0 : pathSegment.length) === 0)
              continue;
            if (pathSegment === ".")
              continue;
            if (pathSegment === "..") {
              normalizedPathSegments.pop();
            } else {
              normalizedPathSegments.push(pathSegment);
            }
          }
          const normalizedPath = `${(path === null || path === void 0 ? void 0 : path.startsWith("/")) ? "/" : ""}${normalizedPathSegments.join("/")}${normalizedPathSegments.length > 0 && (path === null || path === void 0 ? void 0 : path.endsWith("/")) ? "/" : ""}`;
          const doubleEncoded = encodeURIComponent(normalizedPath);
          return doubleEncoded.replace(/%2F/g, "/");
        }
        return path;
      }
      async getSignature(longDate, credentialScope, keyPromise, canonicalRequest) {
        const stringToSign = await this.createStringToSign(longDate, credentialScope, canonicalRequest);
        const hash = new this.sha256(await keyPromise);
        hash.update((0, util_utf8_1.toUint8Array)(stringToSign));
        return (0, util_hex_encoding_1.toHex)(await hash.digest());
      }
      getSigningKey(credentials, region, shortDate, service) {
        return (0, credentialDerivation_1.getSigningKey)(this.sha256, credentials, shortDate, region, service || this.service);
      }
      validateResolvedCredentials(credentials) {
        if (typeof credentials !== "object" || typeof credentials.accessKeyId !== "string" || typeof credentials.secretAccessKey !== "string") {
          throw new Error("Resolved credential object is not valid");
        }
      }
    };
    exports2.SignatureV4 = SignatureV4;
    var formatDate = (now) => {
      const longDate = (0, utilDate_1.iso8601)(now).replace(/[\-:]/g, "");
      return {
        longDate,
        shortDate: longDate.slice(0, 8)
      };
    };
    var getCanonicalHeaderList = (headers) => Object.keys(headers).sort().join(";");
  }
});

var require_dist_cjs33 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.prepareRequest = exports2.moveHeadersToQuery = exports2.getPayloadHash = exports2.getCanonicalQuery = exports2.getCanonicalHeaders = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4(), exports2);
    var getCanonicalHeaders_1 = require_getCanonicalHeaders();
    Object.defineProperty(exports2, "getCanonicalHeaders", { enumerable: true, get: function() {
      return getCanonicalHeaders_1.getCanonicalHeaders;
    } });
    var getCanonicalQuery_1 = require_getCanonicalQuery();
    Object.defineProperty(exports2, "getCanonicalQuery", { enumerable: true, get: function() {
      return getCanonicalQuery_1.getCanonicalQuery;
    } });
    var getPayloadHash_1 = require_getPayloadHash();
    Object.defineProperty(exports2, "getPayloadHash", { enumerable: true, get: function() {
      return getPayloadHash_1.getPayloadHash;
    } });
    var moveHeadersToQuery_1 = require_moveHeadersToQuery();
    Object.defineProperty(exports2, "moveHeadersToQuery", { enumerable: true, get: function() {
      return moveHeadersToQuery_1.moveHeadersToQuery;
    } });
    var prepareRequest_1 = require_prepareRequest();
    Object.defineProperty(exports2, "prepareRequest", { enumerable: true, get: function() {
      return prepareRequest_1.prepareRequest;
    } });
    tslib_1.__exportStar(require_credentialDerivation(), exports2);
  }
});

var require_configurations2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSigV4AuthConfig = exports2.resolveAwsAuthConfig = void 0;
    var property_provider_1 = require_dist_cjs30();
    var signature_v4_1 = require_dist_cjs33();
    var util_middleware_1 = require_dist_cjs4();
    var CREDENTIAL_EXPIRE_WINDOW = 3e5;
    var resolveAwsAuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else if (input.regionInfoProvider) {
        signer = () => (0, util_middleware_1.normalizeProvider)(input.region)().then(async (region) => [
          await input.regionInfoProvider(region, {
            useFipsEndpoint: await input.useFipsEndpoint(),
            useDualstackEndpoint: await input.useDualstackEndpoint()
          }) || {},
          region
        ]).then(([regionInfo, region]) => {
          const { signingRegion, signingService } = regionInfo;
          input.signingRegion = input.signingRegion || signingRegion || region;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        });
      } else {
        signer = async (authScheme) => {
          authScheme = Object.assign({}, {
            name: "sigv4",
            signingName: input.signingName || input.defaultSigningName,
            signingRegion: await (0, util_middleware_1.normalizeProvider)(input.region)(),
            properties: {}
          }, authScheme);
          const signingRegion = authScheme.signingRegion;
          const signingService = authScheme.signingName;
          input.signingRegion = input.signingRegion || signingRegion;
          input.signingName = input.signingName || signingService || input.serviceId;
          const params = {
            ...input,
            credentials: normalizedCreds,
            region: input.signingRegion,
            service: input.signingName,
            sha256,
            uriEscapePath: signingEscapePath
          };
          const SignerCtor = input.signerConstructor || signature_v4_1.SignatureV4;
          return new SignerCtor(params);
        };
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveAwsAuthConfig = resolveAwsAuthConfig;
    var resolveSigV4AuthConfig = (input) => {
      const normalizedCreds = input.credentials ? normalizeCredentialProvider(input.credentials) : input.credentialDefaultProvider(input);
      const { signingEscapePath = true, systemClockOffset = input.systemClockOffset || 0, sha256 } = input;
      let signer;
      if (input.signer) {
        signer = (0, util_middleware_1.normalizeProvider)(input.signer);
      } else {
        signer = (0, util_middleware_1.normalizeProvider)(new signature_v4_1.SignatureV4({
          credentials: normalizedCreds,
          region: input.region,
          service: input.signingName,
          sha256,
          uriEscapePath: signingEscapePath
        }));
      }
      return {
        ...input,
        systemClockOffset,
        signingEscapePath,
        credentials: normalizedCreds,
        signer
      };
    };
    exports2.resolveSigV4AuthConfig = resolveSigV4AuthConfig;
    var normalizeCredentialProvider = (credentials) => {
      if (typeof credentials === "function") {
        return (0, property_provider_1.memoize)(credentials, (credentials2) => credentials2.expiration !== void 0 && credentials2.expiration.getTime() - Date.now() < CREDENTIAL_EXPIRE_WINDOW, (credentials2) => credentials2.expiration !== void 0);
      }
      return (0, util_middleware_1.normalizeProvider)(credentials);
    };
  }
});

var require_getSkewCorrectedDate = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getSkewCorrectedDate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSkewCorrectedDate = void 0;
    var getSkewCorrectedDate = (systemClockOffset) => new Date(Date.now() + systemClockOffset);
    exports2.getSkewCorrectedDate = getSkewCorrectedDate;
  }
});

var require_isClockSkewed = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/isClockSkewed.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isClockSkewed = void 0;
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var isClockSkewed = (clockTime, systemClockOffset) => Math.abs((0, getSkewCorrectedDate_1.getSkewCorrectedDate)(systemClockOffset).getTime() - clockTime) >= 3e5;
    exports2.isClockSkewed = isClockSkewed;
  }
});

var require_getUpdatedSystemClockOffset = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/utils/getUpdatedSystemClockOffset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUpdatedSystemClockOffset = void 0;
    var isClockSkewed_1 = require_isClockSkewed();
    var getUpdatedSystemClockOffset = (clockTime, currentSystemClockOffset) => {
      const clockTimeInMs = Date.parse(clockTime);
      if ((0, isClockSkewed_1.isClockSkewed)(clockTimeInMs, currentSystemClockOffset)) {
        return clockTimeInMs - Date.now();
      }
      return currentSystemClockOffset;
    };
    exports2.getUpdatedSystemClockOffset = getUpdatedSystemClockOffset;
  }
});

var require_middleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin = exports2.awsAuthMiddlewareOptions = exports2.awsAuthMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var getSkewCorrectedDate_1 = require_getSkewCorrectedDate();
    var getUpdatedSystemClockOffset_1 = require_getUpdatedSystemClockOffset();
    var awsAuthMiddleware = (options) => (next, context) => async function(args) {
      var _a, _b, _c, _d;
      if (!protocol_http_1.HttpRequest.isInstance(args.request))
        return next(args);
      const authScheme = (_c = (_b = (_a = context.endpointV2) === null || _a === void 0 ? void 0 : _a.properties) === null || _b === void 0 ? void 0 : _b.authSchemes) === null || _c === void 0 ? void 0 : _c[0];
      const multiRegionOverride = (authScheme === null || authScheme === void 0 ? void 0 : authScheme.name) === "sigv4a" ? (_d = authScheme === null || authScheme === void 0 ? void 0 : authScheme.signingRegionSet) === null || _d === void 0 ? void 0 : _d.join(",") : void 0;
      const signer = await options.signer(authScheme);
      const output = await next({
        ...args,
        request: await signer.sign(args.request, {
          signingDate: (0, getSkewCorrectedDate_1.getSkewCorrectedDate)(options.systemClockOffset),
          signingRegion: multiRegionOverride || context["signing_region"],
          signingService: context["signing_service"]
        })
      }).catch((error) => {
        var _a2;
        const serverTime = (_a2 = error.ServerTime) !== null && _a2 !== void 0 ? _a2 : getDateHeader(error.$response);
        if (serverTime) {
          options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(serverTime, options.systemClockOffset);
        }
        throw error;
      });
      const dateHeader = getDateHeader(output.response);
      if (dateHeader) {
        options.systemClockOffset = (0, getUpdatedSystemClockOffset_1.getUpdatedSystemClockOffset)(dateHeader, options.systemClockOffset);
      }
      return output;
    };
    exports2.awsAuthMiddleware = awsAuthMiddleware;
    var getDateHeader = (response) => {
      var _a, _b, _c;
      return protocol_http_1.HttpResponse.isInstance(response) ? (_b = (_a = response.headers) === null || _a === void 0 ? void 0 : _a.date) !== null && _b !== void 0 ? _b : (_c = response.headers) === null || _c === void 0 ? void 0 : _c.Date : void 0;
    };
    exports2.awsAuthMiddlewareOptions = {
      name: "awsAuthMiddleware",
      tags: ["SIGNATURE", "AWSAUTH"],
      relation: "after",
      toMiddleware: "retryMiddleware",
      override: true
    };
    var getAwsAuthPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.awsAuthMiddleware)(options), exports2.awsAuthMiddlewareOptions);
      }
    });
    exports2.getAwsAuthPlugin = getAwsAuthPlugin;
    exports2.getSigV4AuthPlugin = exports2.getAwsAuthPlugin;
  }
});

var require_dist_cjs34 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-signing/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations2(), exports2);
    tslib_1.__exportStar(require_middleware(), exports2);
  }
});

var require_configurations3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveUserAgentConfig = void 0;
    function resolveUserAgentConfig(input) {
      return {
        ...input,
        customUserAgent: typeof input.customUserAgent === "string" ? [[input.customUserAgent]] : input.customUserAgent
      };
    }
    exports2.resolveUserAgentConfig = resolveUserAgentConfig;
  }
});

var require_constants6 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.UA_ESCAPE_REGEX = exports2.SPACE = exports2.X_AMZ_USER_AGENT = exports2.USER_AGENT = void 0;
    exports2.USER_AGENT = "user-agent";
    exports2.X_AMZ_USER_AGENT = "x-amz-user-agent";
    exports2.SPACE = " ";
    exports2.UA_ESCAPE_REGEX = /[^\!\#\$\%\&\'\*\+\-\.\^\_\`\|\~\d\w]/g;
  }
});

var require_user_agent_middleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/user-agent-middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUserAgentPlugin = exports2.getUserAgentMiddlewareOptions = exports2.userAgentMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var constants_1 = require_constants6();
    var userAgentMiddleware = (options) => (next, context) => async (args) => {
      var _a, _b;
      const { request } = args;
      if (!protocol_http_1.HttpRequest.isInstance(request))
        return next(args);
      const { headers } = request;
      const userAgent = ((_a = context === null || context === void 0 ? void 0 : context.userAgent) === null || _a === void 0 ? void 0 : _a.map(escapeUserAgent)) || [];
      const defaultUserAgent = (await options.defaultUserAgentProvider()).map(escapeUserAgent);
      const customUserAgent = ((_b = options === null || options === void 0 ? void 0 : options.customUserAgent) === null || _b === void 0 ? void 0 : _b.map(escapeUserAgent)) || [];
      const sdkUserAgentValue = [...defaultUserAgent, ...userAgent, ...customUserAgent].join(constants_1.SPACE);
      const normalUAValue = [
        ...defaultUserAgent.filter((section) => section.startsWith("aws-sdk-")),
        ...customUserAgent
      ].join(constants_1.SPACE);
      if (options.runtime !== "browser") {
        if (normalUAValue) {
          headers[constants_1.X_AMZ_USER_AGENT] = headers[constants_1.X_AMZ_USER_AGENT] ? `${headers[constants_1.USER_AGENT]} ${normalUAValue}` : normalUAValue;
        }
        headers[constants_1.USER_AGENT] = sdkUserAgentValue;
      } else {
        headers[constants_1.X_AMZ_USER_AGENT] = sdkUserAgentValue;
      }
      return next({
        ...args,
        request
      });
    };
    exports2.userAgentMiddleware = userAgentMiddleware;
    var escapeUserAgent = ([name, version2]) => {
      const prefixSeparatorIndex = name.indexOf("/");
      const prefix = name.substring(0, prefixSeparatorIndex);
      let uaName = name.substring(prefixSeparatorIndex + 1);
      if (prefix === "api") {
        uaName = uaName.toLowerCase();
      }
      return [prefix, uaName, version2].filter((item) => item && item.length > 0).map((item) => item === null || item === void 0 ? void 0 : item.replace(constants_1.UA_ESCAPE_REGEX, "_")).join("/");
    };
    exports2.getUserAgentMiddlewareOptions = {
      name: "getUserAgentMiddleware",
      step: "build",
      priority: "low",
      tags: ["SET_USER_AGENT", "USER_AGENT"],
      override: true
    };
    var getUserAgentPlugin = (config) => ({
      applyToStack: (clientStack) => {
        clientStack.add((0, exports2.userAgentMiddleware)(config), exports2.getUserAgentMiddlewareOptions);
      }
    });
    exports2.getUserAgentPlugin = getUserAgentPlugin;
  }
});

var require_dist_cjs35 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-user-agent/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configurations3(), exports2);
    tslib_1.__exportStar(require_user_agent_middleware(), exports2);
  }
});

var require_EndpointParameters = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useAccelerateEndpoint: options.useAccelerateEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        disableMultiregionAccessPoints: options.disableMultiregionAccessPoints ?? false,
        defaultSigningName: "s3"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-s3",
      description: "AWS SDK for JavaScript S3 Client for Node.js, Browser and React Native",
      version: "3.256.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo s3",
        test: "yarn test:unit",
        "test:e2e": "ts-mocha test/**/*.ispec.ts && karma start karma.conf.js",
        "test:unit": "ts-mocha test/**/*.spec.ts"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha1-browser": "3.0.0",
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/client-sts": "3.256.0",
        "@aws-sdk/config-resolver": "3.254.0",
        "@aws-sdk/credential-provider-node": "3.256.0",
        "@aws-sdk/eventstream-serde-browser": "3.254.0",
        "@aws-sdk/eventstream-serde-config-resolver": "3.254.0",
        "@aws-sdk/eventstream-serde-node": "3.254.0",
        "@aws-sdk/fetch-http-handler": "3.254.0",
        "@aws-sdk/hash-blob-browser": "3.254.0",
        "@aws-sdk/hash-node": "3.254.0",
        "@aws-sdk/hash-stream-node": "3.254.0",
        "@aws-sdk/invalid-dependency": "3.254.0",
        "@aws-sdk/md5-js": "3.254.0",
        "@aws-sdk/middleware-bucket-endpoint": "3.254.0",
        "@aws-sdk/middleware-content-length": "3.254.0",
        "@aws-sdk/middleware-endpoint": "3.254.0",
        "@aws-sdk/middleware-expect-continue": "3.254.0",
        "@aws-sdk/middleware-flexible-checksums": "3.254.0",
        "@aws-sdk/middleware-host-header": "3.254.0",
        "@aws-sdk/middleware-location-constraint": "3.254.0",
        "@aws-sdk/middleware-logger": "3.254.0",
        "@aws-sdk/middleware-recursion-detection": "3.254.0",
        "@aws-sdk/middleware-retry": "3.254.0",
        "@aws-sdk/middleware-sdk-s3": "3.254.0",
        "@aws-sdk/middleware-serde": "3.254.0",
        "@aws-sdk/middleware-signing": "3.254.0",
        "@aws-sdk/middleware-ssec": "3.254.0",
        "@aws-sdk/middleware-stack": "3.254.0",
        "@aws-sdk/middleware-user-agent": "3.254.0",
        "@aws-sdk/node-config-provider": "3.254.0",
        "@aws-sdk/node-http-handler": "3.254.0",
        "@aws-sdk/protocol-http": "3.254.0",
        "@aws-sdk/signature-v4-multi-region": "3.254.0",
        "@aws-sdk/smithy-client": "3.254.0",
        "@aws-sdk/types": "3.254.0",
        "@aws-sdk/url-parser": "3.254.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.254.0",
        "@aws-sdk/util-defaults-mode-node": "3.254.0",
        "@aws-sdk/util-endpoints": "3.254.0",
        "@aws-sdk/util-retry": "3.254.0",
        "@aws-sdk/util-stream-browser": "3.254.0",
        "@aws-sdk/util-stream-node": "3.254.0",
        "@aws-sdk/util-user-agent-browser": "3.254.0",
        "@aws-sdk/util-user-agent-node": "3.254.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "@aws-sdk/util-waiter": "3.254.0",
        "@aws-sdk/xml-builder": "3.201.0",
        "fast-xml-parser": "4.0.11",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/chai": "^4.2.11",
        "@types/mocha": "^8.0.4",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-s3",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-s3"
      }
    };
  }
});

var require_STSServiceException = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/STSServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var STSServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, STSServiceException.prototype);
      }
    };
    exports2.STSServiceException = STSServiceException;
  }
});

var require_models_02 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenResponseFilterSensitiveLog = exports2.GetSessionTokenRequestFilterSensitiveLog = exports2.GetFederationTokenResponseFilterSensitiveLog = exports2.FederatedUserFilterSensitiveLog = exports2.GetFederationTokenRequestFilterSensitiveLog = exports2.GetCallerIdentityResponseFilterSensitiveLog = exports2.GetCallerIdentityRequestFilterSensitiveLog = exports2.GetAccessKeyInfoResponseFilterSensitiveLog = exports2.GetAccessKeyInfoRequestFilterSensitiveLog = exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = exports2.AssumeRoleResponseFilterSensitiveLog = exports2.CredentialsFilterSensitiveLog = exports2.AssumeRoleRequestFilterSensitiveLog = exports2.TagFilterSensitiveLog = exports2.PolicyDescriptorTypeFilterSensitiveLog = exports2.AssumedRoleUserFilterSensitiveLog = exports2.InvalidAuthorizationMessageException = exports2.IDPCommunicationErrorException = exports2.InvalidIdentityTokenException = exports2.IDPRejectedClaimException = exports2.RegionDisabledException = exports2.PackedPolicyTooLargeException = exports2.MalformedPolicyDocumentException = exports2.ExpiredTokenException = void 0;
    var STSServiceException_1 = require_STSServiceException();
    var ExpiredTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var MalformedPolicyDocumentException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "MalformedPolicyDocumentException",
          $fault: "client",
          ...opts
        });
        this.name = "MalformedPolicyDocumentException";
        this.$fault = "client";
        Object.setPrototypeOf(this, MalformedPolicyDocumentException.prototype);
      }
    };
    exports2.MalformedPolicyDocumentException = MalformedPolicyDocumentException;
    var PackedPolicyTooLargeException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "PackedPolicyTooLargeException",
          $fault: "client",
          ...opts
        });
        this.name = "PackedPolicyTooLargeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, PackedPolicyTooLargeException.prototype);
      }
    };
    exports2.PackedPolicyTooLargeException = PackedPolicyTooLargeException;
    var RegionDisabledException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "RegionDisabledException",
          $fault: "client",
          ...opts
        });
        this.name = "RegionDisabledException";
        this.$fault = "client";
        Object.setPrototypeOf(this, RegionDisabledException.prototype);
      }
    };
    exports2.RegionDisabledException = RegionDisabledException;
    var IDPRejectedClaimException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPRejectedClaimException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPRejectedClaimException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPRejectedClaimException.prototype);
      }
    };
    exports2.IDPRejectedClaimException = IDPRejectedClaimException;
    var InvalidIdentityTokenException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidIdentityTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidIdentityTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidIdentityTokenException.prototype);
      }
    };
    exports2.InvalidIdentityTokenException = InvalidIdentityTokenException;
    var IDPCommunicationErrorException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "IDPCommunicationErrorException",
          $fault: "client",
          ...opts
        });
        this.name = "IDPCommunicationErrorException";
        this.$fault = "client";
        Object.setPrototypeOf(this, IDPCommunicationErrorException.prototype);
      }
    };
    exports2.IDPCommunicationErrorException = IDPCommunicationErrorException;
    var InvalidAuthorizationMessageException = class extends STSServiceException_1.STSServiceException {
      constructor(opts) {
        super({
          name: "InvalidAuthorizationMessageException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidAuthorizationMessageException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidAuthorizationMessageException.prototype);
      }
    };
    exports2.InvalidAuthorizationMessageException = InvalidAuthorizationMessageException;
    var AssumedRoleUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumedRoleUserFilterSensitiveLog = AssumedRoleUserFilterSensitiveLog;
    var PolicyDescriptorTypeFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.PolicyDescriptorTypeFilterSensitiveLog = PolicyDescriptorTypeFilterSensitiveLog;
    var TagFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.TagFilterSensitiveLog = TagFilterSensitiveLog;
    var AssumeRoleRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleRequestFilterSensitiveLog = AssumeRoleRequestFilterSensitiveLog;
    var CredentialsFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CredentialsFilterSensitiveLog = CredentialsFilterSensitiveLog;
    var AssumeRoleResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleResponseFilterSensitiveLog = AssumeRoleResponseFilterSensitiveLog;
    var AssumeRoleWithSAMLRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLRequestFilterSensitiveLog = AssumeRoleWithSAMLRequestFilterSensitiveLog;
    var AssumeRoleWithSAMLResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithSAMLResponseFilterSensitiveLog = AssumeRoleWithSAMLResponseFilterSensitiveLog;
    var AssumeRoleWithWebIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityRequestFilterSensitiveLog = AssumeRoleWithWebIdentityRequestFilterSensitiveLog;
    var AssumeRoleWithWebIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AssumeRoleWithWebIdentityResponseFilterSensitiveLog = AssumeRoleWithWebIdentityResponseFilterSensitiveLog;
    var DecodeAuthorizationMessageRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageRequestFilterSensitiveLog = DecodeAuthorizationMessageRequestFilterSensitiveLog;
    var DecodeAuthorizationMessageResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.DecodeAuthorizationMessageResponseFilterSensitiveLog = DecodeAuthorizationMessageResponseFilterSensitiveLog;
    var GetAccessKeyInfoRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoRequestFilterSensitiveLog = GetAccessKeyInfoRequestFilterSensitiveLog;
    var GetAccessKeyInfoResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetAccessKeyInfoResponseFilterSensitiveLog = GetAccessKeyInfoResponseFilterSensitiveLog;
    var GetCallerIdentityRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityRequestFilterSensitiveLog = GetCallerIdentityRequestFilterSensitiveLog;
    var GetCallerIdentityResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetCallerIdentityResponseFilterSensitiveLog = GetCallerIdentityResponseFilterSensitiveLog;
    var GetFederationTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenRequestFilterSensitiveLog = GetFederationTokenRequestFilterSensitiveLog;
    var FederatedUserFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.FederatedUserFilterSensitiveLog = FederatedUserFilterSensitiveLog;
    var GetFederationTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetFederationTokenResponseFilterSensitiveLog = GetFederationTokenResponseFilterSensitiveLog;
    var GetSessionTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenRequestFilterSensitiveLog = GetSessionTokenRequestFilterSensitiveLog;
    var GetSessionTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.GetSessionTokenResponseFilterSensitiveLog = GetSessionTokenResponseFilterSensitiveLog;
  }
});

var require_Aws_query = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/protocols/Aws_query.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_queryGetSessionTokenCommand = exports2.deserializeAws_queryGetFederationTokenCommand = exports2.deserializeAws_queryGetCallerIdentityCommand = exports2.deserializeAws_queryGetAccessKeyInfoCommand = exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = exports2.deserializeAws_queryAssumeRoleCommand = exports2.serializeAws_queryGetSessionTokenCommand = exports2.serializeAws_queryGetFederationTokenCommand = exports2.serializeAws_queryGetCallerIdentityCommand = exports2.serializeAws_queryGetAccessKeyInfoCommand = exports2.serializeAws_queryDecodeAuthorizationMessageCommand = exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = exports2.serializeAws_queryAssumeRoleWithSAMLCommand = exports2.serializeAws_queryAssumeRoleCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var fast_xml_parser_1 = require_fxp();
    var models_0_1 = require_models_02();
    var STSServiceException_1 = require_STSServiceException();
    var serializeAws_queryAssumeRoleCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleRequest(input, context),
        Action: "AssumeRole",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleCommand = serializeAws_queryAssumeRoleCommand;
    var serializeAws_queryAssumeRoleWithSAMLCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithSAMLRequest(input, context),
        Action: "AssumeRoleWithSAML",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithSAMLCommand = serializeAws_queryAssumeRoleWithSAMLCommand;
    var serializeAws_queryAssumeRoleWithWebIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryAssumeRoleWithWebIdentityRequest(input, context),
        Action: "AssumeRoleWithWebIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryAssumeRoleWithWebIdentityCommand = serializeAws_queryAssumeRoleWithWebIdentityCommand;
    var serializeAws_queryDecodeAuthorizationMessageCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryDecodeAuthorizationMessageRequest(input, context),
        Action: "DecodeAuthorizationMessage",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryDecodeAuthorizationMessageCommand = serializeAws_queryDecodeAuthorizationMessageCommand;
    var serializeAws_queryGetAccessKeyInfoCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetAccessKeyInfoRequest(input, context),
        Action: "GetAccessKeyInfo",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetAccessKeyInfoCommand = serializeAws_queryGetAccessKeyInfoCommand;
    var serializeAws_queryGetCallerIdentityCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetCallerIdentityRequest(input, context),
        Action: "GetCallerIdentity",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetCallerIdentityCommand = serializeAws_queryGetCallerIdentityCommand;
    var serializeAws_queryGetFederationTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetFederationTokenRequest(input, context),
        Action: "GetFederationToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetFederationTokenCommand = serializeAws_queryGetFederationTokenCommand;
    var serializeAws_queryGetSessionTokenCommand = async (input, context) => {
      const headers = {
        "content-type": "application/x-www-form-urlencoded"
      };
      let body;
      body = buildFormUrlencodedString({
        ...serializeAws_queryGetSessionTokenRequest(input, context),
        Action: "GetSessionToken",
        Version: "2011-06-15"
      });
      return buildHttpRpcRequest(context, headers, "/", void 0, body);
    };
    exports2.serializeAws_queryGetSessionTokenCommand = serializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryAssumeRoleCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleResponse(data.AssumeRoleResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleCommand = deserializeAws_queryAssumeRoleCommand;
    var deserializeAws_queryAssumeRoleCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithSAMLCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithSAMLCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithSAMLResponse(data.AssumeRoleWithSAMLResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithSAMLCommand = deserializeAws_queryAssumeRoleWithSAMLCommand;
    var deserializeAws_queryAssumeRoleWithSAMLCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryAssumeRoleWithWebIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryAssumeRoleWithWebIdentityResponse(data.AssumeRoleWithWebIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryAssumeRoleWithWebIdentityCommand = deserializeAws_queryAssumeRoleWithWebIdentityCommand;
    var deserializeAws_queryAssumeRoleWithWebIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "ExpiredTokenException":
        case "com.amazonaws.sts#ExpiredTokenException":
          throw await deserializeAws_queryExpiredTokenExceptionResponse(parsedOutput, context);
        case "IDPCommunicationError":
        case "com.amazonaws.sts#IDPCommunicationErrorException":
          throw await deserializeAws_queryIDPCommunicationErrorExceptionResponse(parsedOutput, context);
        case "IDPRejectedClaim":
        case "com.amazonaws.sts#IDPRejectedClaimException":
          throw await deserializeAws_queryIDPRejectedClaimExceptionResponse(parsedOutput, context);
        case "InvalidIdentityToken":
        case "com.amazonaws.sts#InvalidIdentityTokenException":
          throw await deserializeAws_queryInvalidIdentityTokenExceptionResponse(parsedOutput, context);
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryDecodeAuthorizationMessageCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryDecodeAuthorizationMessageCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryDecodeAuthorizationMessageResponse(data.DecodeAuthorizationMessageResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryDecodeAuthorizationMessageCommand = deserializeAws_queryDecodeAuthorizationMessageCommand;
    var deserializeAws_queryDecodeAuthorizationMessageCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidAuthorizationMessageException":
        case "com.amazonaws.sts#InvalidAuthorizationMessageException":
          throw await deserializeAws_queryInvalidAuthorizationMessageExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetAccessKeyInfoCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetAccessKeyInfoCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetAccessKeyInfoResponse(data.GetAccessKeyInfoResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetAccessKeyInfoCommand = deserializeAws_queryGetAccessKeyInfoCommand;
    var deserializeAws_queryGetAccessKeyInfoCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetCallerIdentityCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetCallerIdentityCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetCallerIdentityResponse(data.GetCallerIdentityResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetCallerIdentityCommand = deserializeAws_queryGetCallerIdentityCommand;
    var deserializeAws_queryGetCallerIdentityCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      const parsedBody = parsedOutput.body;
      (0, smithy_client_1.throwDefaultError)({
        output,
        parsedBody: parsedBody.Error,
        exceptionCtor: STSServiceException_1.STSServiceException,
        errorCode
      });
    };
    var deserializeAws_queryGetFederationTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetFederationTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetFederationTokenResponse(data.GetFederationTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetFederationTokenCommand = deserializeAws_queryGetFederationTokenCommand;
    var deserializeAws_queryGetFederationTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "MalformedPolicyDocument":
        case "com.amazonaws.sts#MalformedPolicyDocumentException":
          throw await deserializeAws_queryMalformedPolicyDocumentExceptionResponse(parsedOutput, context);
        case "PackedPolicyTooLarge":
        case "com.amazonaws.sts#PackedPolicyTooLargeException":
          throw await deserializeAws_queryPackedPolicyTooLargeExceptionResponse(parsedOutput, context);
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryGetSessionTokenCommand = async (output, context) => {
      if (output.statusCode >= 300) {
        return deserializeAws_queryGetSessionTokenCommandError(output, context);
      }
      const data = await parseBody(output.body, context);
      let contents = {};
      contents = deserializeAws_queryGetSessionTokenResponse(data.GetSessionTokenResult, context);
      const response = {
        $metadata: deserializeMetadata(output),
        ...contents
      };
      return Promise.resolve(response);
    };
    exports2.deserializeAws_queryGetSessionTokenCommand = deserializeAws_queryGetSessionTokenCommand;
    var deserializeAws_queryGetSessionTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadQueryErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "RegionDisabledException":
        case "com.amazonaws.sts#RegionDisabledException":
          throw await deserializeAws_queryRegionDisabledExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody: parsedBody.Error,
            exceptionCtor: STSServiceException_1.STSServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_queryExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryExpiredTokenException(body.Error, context);
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPCommunicationErrorExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPCommunicationErrorException(body.Error, context);
      const exception = new models_0_1.IDPCommunicationErrorException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryIDPRejectedClaimExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryIDPRejectedClaimException(body.Error, context);
      const exception = new models_0_1.IDPRejectedClaimException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidAuthorizationMessageExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidAuthorizationMessageException(body.Error, context);
      const exception = new models_0_1.InvalidAuthorizationMessageException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryInvalidIdentityTokenExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryInvalidIdentityTokenException(body.Error, context);
      const exception = new models_0_1.InvalidIdentityTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryMalformedPolicyDocumentExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryMalformedPolicyDocumentException(body.Error, context);
      const exception = new models_0_1.MalformedPolicyDocumentException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryPackedPolicyTooLargeExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryPackedPolicyTooLargeException(body.Error, context);
      const exception = new models_0_1.PackedPolicyTooLargeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var deserializeAws_queryRegionDisabledExceptionResponse = async (parsedOutput, context) => {
      const body = parsedOutput.body;
      const deserialized = deserializeAws_queryRegionDisabledException(body.Error, context);
      const exception = new models_0_1.RegionDisabledException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized
      });
      return (0, smithy_client_1.decorateServiceException)(exception, body);
    };
    var serializeAws_queryAssumeRoleRequest = (input, context) => {
      var _a, _b, _c;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      if (input.TransitiveTagKeys != null) {
        const memberEntries = serializeAws_querytagKeyListType(input.TransitiveTagKeys, context);
        if (((_c = input.TransitiveTagKeys) == null ? void 0 : _c.length) === 0) {
          entries.TransitiveTagKeys = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `TransitiveTagKeys.${key}`;
          entries[loc] = value;
        });
      }
      if (input.ExternalId != null) {
        entries["ExternalId"] = input.ExternalId;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      if (input.SourceIdentity != null) {
        entries["SourceIdentity"] = input.SourceIdentity;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithSAMLRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.PrincipalArn != null) {
        entries["PrincipalArn"] = input.PrincipalArn;
      }
      if (input.SAMLAssertion != null) {
        entries["SAMLAssertion"] = input.SAMLAssertion;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryAssumeRoleWithWebIdentityRequest = (input, context) => {
      var _a;
      const entries = {};
      if (input.RoleArn != null) {
        entries["RoleArn"] = input.RoleArn;
      }
      if (input.RoleSessionName != null) {
        entries["RoleSessionName"] = input.RoleSessionName;
      }
      if (input.WebIdentityToken != null) {
        entries["WebIdentityToken"] = input.WebIdentityToken;
      }
      if (input.ProviderId != null) {
        entries["ProviderId"] = input.ProviderId;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      return entries;
    };
    var serializeAws_queryDecodeAuthorizationMessageRequest = (input, context) => {
      const entries = {};
      if (input.EncodedMessage != null) {
        entries["EncodedMessage"] = input.EncodedMessage;
      }
      return entries;
    };
    var serializeAws_queryGetAccessKeyInfoRequest = (input, context) => {
      const entries = {};
      if (input.AccessKeyId != null) {
        entries["AccessKeyId"] = input.AccessKeyId;
      }
      return entries;
    };
    var serializeAws_queryGetCallerIdentityRequest = (input, context) => {
      const entries = {};
      return entries;
    };
    var serializeAws_queryGetFederationTokenRequest = (input, context) => {
      var _a, _b;
      const entries = {};
      if (input.Name != null) {
        entries["Name"] = input.Name;
      }
      if (input.Policy != null) {
        entries["Policy"] = input.Policy;
      }
      if (input.PolicyArns != null) {
        const memberEntries = serializeAws_querypolicyDescriptorListType(input.PolicyArns, context);
        if (((_a = input.PolicyArns) == null ? void 0 : _a.length) === 0) {
          entries.PolicyArns = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `PolicyArns.${key}`;
          entries[loc] = value;
        });
      }
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.Tags != null) {
        const memberEntries = serializeAws_querytagListType(input.Tags, context);
        if (((_b = input.Tags) == null ? void 0 : _b.length) === 0) {
          entries.Tags = [];
        }
        Object.entries(memberEntries).forEach(([key, value]) => {
          const loc = `Tags.${key}`;
          entries[loc] = value;
        });
      }
      return entries;
    };
    var serializeAws_queryGetSessionTokenRequest = (input, context) => {
      const entries = {};
      if (input.DurationSeconds != null) {
        entries["DurationSeconds"] = input.DurationSeconds;
      }
      if (input.SerialNumber != null) {
        entries["SerialNumber"] = input.SerialNumber;
      }
      if (input.TokenCode != null) {
        entries["TokenCode"] = input.TokenCode;
      }
      return entries;
    };
    var serializeAws_querypolicyDescriptorListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryPolicyDescriptorType(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var serializeAws_queryPolicyDescriptorType = (input, context) => {
      const entries = {};
      if (input.arn != null) {
        entries["arn"] = input.arn;
      }
      return entries;
    };
    var serializeAws_queryTag = (input, context) => {
      const entries = {};
      if (input.Key != null) {
        entries["Key"] = input.Key;
      }
      if (input.Value != null) {
        entries["Value"] = input.Value;
      }
      return entries;
    };
    var serializeAws_querytagKeyListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        entries[`member.${counter}`] = entry;
        counter++;
      }
      return entries;
    };
    var serializeAws_querytagListType = (input, context) => {
      const entries = {};
      let counter = 1;
      for (const entry of input) {
        if (entry === null) {
          continue;
        }
        const memberEntries = serializeAws_queryTag(entry, context);
        Object.entries(memberEntries).forEach(([key, value]) => {
          entries[`member.${counter}.${key}`] = value;
        });
        counter++;
      }
      return entries;
    };
    var deserializeAws_queryAssumedRoleUser = (output, context) => {
      const contents = {
        AssumedRoleId: void 0,
        Arn: void 0
      };
      if (output["AssumedRoleId"] !== void 0) {
        contents.AssumedRoleId = (0, smithy_client_1.expectString)(output["AssumedRoleId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithSAMLResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Subject: void 0,
        SubjectType: void 0,
        Issuer: void 0,
        Audience: void 0,
        NameQualifier: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Subject"] !== void 0) {
        contents.Subject = (0, smithy_client_1.expectString)(output["Subject"]);
      }
      if (output["SubjectType"] !== void 0) {
        contents.SubjectType = (0, smithy_client_1.expectString)(output["SubjectType"]);
      }
      if (output["Issuer"] !== void 0) {
        contents.Issuer = (0, smithy_client_1.expectString)(output["Issuer"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["NameQualifier"] !== void 0) {
        contents.NameQualifier = (0, smithy_client_1.expectString)(output["NameQualifier"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryAssumeRoleWithWebIdentityResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        SubjectFromWebIdentityToken: void 0,
        AssumedRoleUser: void 0,
        PackedPolicySize: void 0,
        Provider: void 0,
        Audience: void 0,
        SourceIdentity: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["SubjectFromWebIdentityToken"] !== void 0) {
        contents.SubjectFromWebIdentityToken = (0, smithy_client_1.expectString)(output["SubjectFromWebIdentityToken"]);
      }
      if (output["AssumedRoleUser"] !== void 0) {
        contents.AssumedRoleUser = deserializeAws_queryAssumedRoleUser(output["AssumedRoleUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      if (output["Provider"] !== void 0) {
        contents.Provider = (0, smithy_client_1.expectString)(output["Provider"]);
      }
      if (output["Audience"] !== void 0) {
        contents.Audience = (0, smithy_client_1.expectString)(output["Audience"]);
      }
      if (output["SourceIdentity"] !== void 0) {
        contents.SourceIdentity = (0, smithy_client_1.expectString)(output["SourceIdentity"]);
      }
      return contents;
    };
    var deserializeAws_queryCredentials = (output, context) => {
      const contents = {
        AccessKeyId: void 0,
        SecretAccessKey: void 0,
        SessionToken: void 0,
        Expiration: void 0
      };
      if (output["AccessKeyId"] !== void 0) {
        contents.AccessKeyId = (0, smithy_client_1.expectString)(output["AccessKeyId"]);
      }
      if (output["SecretAccessKey"] !== void 0) {
        contents.SecretAccessKey = (0, smithy_client_1.expectString)(output["SecretAccessKey"]);
      }
      if (output["SessionToken"] !== void 0) {
        contents.SessionToken = (0, smithy_client_1.expectString)(output["SessionToken"]);
      }
      if (output["Expiration"] !== void 0) {
        contents.Expiration = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.parseRfc3339DateTime)(output["Expiration"]));
      }
      return contents;
    };
    var deserializeAws_queryDecodeAuthorizationMessageResponse = (output, context) => {
      const contents = {
        DecodedMessage: void 0
      };
      if (output["DecodedMessage"] !== void 0) {
        contents.DecodedMessage = (0, smithy_client_1.expectString)(output["DecodedMessage"]);
      }
      return contents;
    };
    var deserializeAws_queryExpiredTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryFederatedUser = (output, context) => {
      const contents = {
        FederatedUserId: void 0,
        Arn: void 0
      };
      if (output["FederatedUserId"] !== void 0) {
        contents.FederatedUserId = (0, smithy_client_1.expectString)(output["FederatedUserId"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetAccessKeyInfoResponse = (output, context) => {
      const contents = {
        Account: void 0
      };
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      return contents;
    };
    var deserializeAws_queryGetCallerIdentityResponse = (output, context) => {
      const contents = {
        UserId: void 0,
        Account: void 0,
        Arn: void 0
      };
      if (output["UserId"] !== void 0) {
        contents.UserId = (0, smithy_client_1.expectString)(output["UserId"]);
      }
      if (output["Account"] !== void 0) {
        contents.Account = (0, smithy_client_1.expectString)(output["Account"]);
      }
      if (output["Arn"] !== void 0) {
        contents.Arn = (0, smithy_client_1.expectString)(output["Arn"]);
      }
      return contents;
    };
    var deserializeAws_queryGetFederationTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0,
        FederatedUser: void 0,
        PackedPolicySize: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      if (output["FederatedUser"] !== void 0) {
        contents.FederatedUser = deserializeAws_queryFederatedUser(output["FederatedUser"], context);
      }
      if (output["PackedPolicySize"] !== void 0) {
        contents.PackedPolicySize = (0, smithy_client_1.strictParseInt32)(output["PackedPolicySize"]);
      }
      return contents;
    };
    var deserializeAws_queryGetSessionTokenResponse = (output, context) => {
      const contents = {
        Credentials: void 0
      };
      if (output["Credentials"] !== void 0) {
        contents.Credentials = deserializeAws_queryCredentials(output["Credentials"], context);
      }
      return contents;
    };
    var deserializeAws_queryIDPCommunicationErrorException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryIDPRejectedClaimException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidAuthorizationMessageException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryInvalidIdentityTokenException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryMalformedPolicyDocumentException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryPackedPolicyTooLargeException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeAws_queryRegionDisabledException = (output, context) => {
      const contents = {
        message: void 0
      };
      if (output["message"] !== void 0) {
        contents.message = (0, smithy_client_1.expectString)(output["message"]);
      }
      return contents;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers
      };
      if (resolvedHostname !== void 0) {
        contents.hostname = resolvedHostname;
      }
      if (body !== void 0) {
        contents.body = body;
      }
      return new protocol_http_1.HttpRequest(contents);
    };
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        const parser = new fast_xml_parser_1.XMLParser({
          attributeNamePrefix: "",
          htmlEntities: true,
          ignoreAttributes: false,
          ignoreDeclaration: true,
          parseTagValue: false,
          trimValues: false,
          tagValueProcessor: (_, val) => val.trim() === "" && val.includes("\n") ? "" : void 0
        });
        parser.addEntity("#xD", "\r");
        parser.addEntity("#10", "\n");
        const parsedObj = parser.parse(encoded);
        const textNodeName = "#text";
        const key = Object.keys(parsedObj)[0];
        const parsedObjToReturn = parsedObj[key];
        if (parsedObjToReturn[textNodeName]) {
          parsedObjToReturn[key] = parsedObjToReturn[textNodeName];
          delete parsedObjToReturn[textNodeName];
        }
        return (0, smithy_client_1.getValueFromTextNode)(parsedObjToReturn);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      if (value.Error) {
        value.Error.message = value.Error.message ?? value.Error.Message;
      }
      return value;
    };
    var buildFormUrlencodedString = (formEntries) => Object.entries(formEntries).map(([key, value]) => (0, smithy_client_1.extendedEncodeURIComponent)(key) + "=" + (0, smithy_client_1.extendedEncodeURIComponent)(value)).join("&");
    var loadQueryErrorCode = (output, data) => {
      if (data.Error.Code !== void 0) {
        return data.Error.Code;
      }
      if (output.statusCode == 404) {
        return "NotFound";
      }
    };
  }
});

var require_AssumeRoleCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleCommand)(output, context);
      }
    };
    exports2.AssumeRoleCommand = AssumeRoleCommand;
  }
});

var require_AssumeRoleWithSAMLCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithSAMLCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithSAMLCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithSAMLCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithSAMLCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithSAMLCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithSAMLResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithSAMLCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithSAMLCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithSAMLCommand = AssumeRoleWithSAMLCommand;
  }
});

var require_AssumeRoleWithWebIdentityCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/AssumeRoleWithWebIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.AssumeRoleWithWebIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var AssumeRoleWithWebIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, AssumeRoleWithWebIdentityCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "AssumeRoleWithWebIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.AssumeRoleWithWebIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryAssumeRoleWithWebIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryAssumeRoleWithWebIdentityCommand)(output, context);
      }
    };
    exports2.AssumeRoleWithWebIdentityCommand = AssumeRoleWithWebIdentityCommand;
  }
});

var require_DecodeAuthorizationMessageCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/DecodeAuthorizationMessageCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.DecodeAuthorizationMessageCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var DecodeAuthorizationMessageCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, DecodeAuthorizationMessageCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "DecodeAuthorizationMessageCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.DecodeAuthorizationMessageResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryDecodeAuthorizationMessageCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryDecodeAuthorizationMessageCommand)(output, context);
      }
    };
    exports2.DecodeAuthorizationMessageCommand = DecodeAuthorizationMessageCommand;
  }
});

var require_GetAccessKeyInfoCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetAccessKeyInfoCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetAccessKeyInfoCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetAccessKeyInfoCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetAccessKeyInfoCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetAccessKeyInfoCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetAccessKeyInfoRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetAccessKeyInfoResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetAccessKeyInfoCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetAccessKeyInfoCommand)(output, context);
      }
    };
    exports2.GetAccessKeyInfoCommand = GetAccessKeyInfoCommand;
  }
});

var require_GetCallerIdentityCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetCallerIdentityCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetCallerIdentityCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetCallerIdentityCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetCallerIdentityCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetCallerIdentityCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetCallerIdentityRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetCallerIdentityResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetCallerIdentityCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetCallerIdentityCommand)(output, context);
      }
    };
    exports2.GetCallerIdentityCommand = GetCallerIdentityCommand;
  }
});

var require_GetFederationTokenCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetFederationTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetFederationTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetFederationTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetFederationTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetFederationTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetFederationTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetFederationTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetFederationTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetFederationTokenCommand)(output, context);
      }
    };
    exports2.GetFederationTokenCommand = GetFederationTokenCommand;
  }
});

var require_GetSessionTokenCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/GetSessionTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetSessionTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var middleware_signing_1 = require_dist_cjs34();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_02();
    var Aws_query_1 = require_Aws_query();
    var GetSessionTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseGlobalEndpoint: { type: "builtInParams", name: "useGlobalEndpoint" },
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetSessionTokenCommand.getEndpointParameterInstructions()));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(configuration));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "STSClient";
        const commandName = "GetSessionTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetSessionTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetSessionTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_query_1.serializeAws_queryGetSessionTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_query_1.deserializeAws_queryGetSessionTokenCommand)(output, context);
      }
    };
    exports2.GetSessionTokenCommand = GetSessionTokenCommand;
  }
});

var require_dist_cjs36 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-sdk-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStsAuthConfig = void 0;
    var middleware_signing_1 = require_dist_cjs34();
    var resolveStsAuthConfig = (input, { stsClientCtor }) => (0, middleware_signing_1.resolveAwsAuthConfig)({
      ...input,
      stsClientCtor
    });
    exports2.resolveStsAuthConfig = resolveStsAuthConfig;
  }
});

var require_EndpointParameters2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        useGlobalEndpoint: options.useGlobalEndpoint ?? false,
        defaultSigningName: "sts"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sts",
      description: "AWS SDK for JavaScript Sts Client for Node.js, Browser and React Native",
      version: "3.256.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sts",
        test: "yarn test:unit",
        "test:unit": "jest"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.254.0",
        "@aws-sdk/credential-provider-node": "3.256.0",
        "@aws-sdk/fetch-http-handler": "3.254.0",
        "@aws-sdk/hash-node": "3.254.0",
        "@aws-sdk/invalid-dependency": "3.254.0",
        "@aws-sdk/middleware-content-length": "3.254.0",
        "@aws-sdk/middleware-endpoint": "3.254.0",
        "@aws-sdk/middleware-host-header": "3.254.0",
        "@aws-sdk/middleware-logger": "3.254.0",
        "@aws-sdk/middleware-recursion-detection": "3.254.0",
        "@aws-sdk/middleware-retry": "3.254.0",
        "@aws-sdk/middleware-sdk-sts": "3.254.0",
        "@aws-sdk/middleware-serde": "3.254.0",
        "@aws-sdk/middleware-signing": "3.254.0",
        "@aws-sdk/middleware-stack": "3.254.0",
        "@aws-sdk/middleware-user-agent": "3.254.0",
        "@aws-sdk/node-config-provider": "3.254.0",
        "@aws-sdk/node-http-handler": "3.254.0",
        "@aws-sdk/protocol-http": "3.254.0",
        "@aws-sdk/smithy-client": "3.254.0",
        "@aws-sdk/types": "3.254.0",
        "@aws-sdk/url-parser": "3.254.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.254.0",
        "@aws-sdk/util-defaults-mode-node": "3.254.0",
        "@aws-sdk/util-endpoints": "3.254.0",
        "@aws-sdk/util-retry": "3.254.0",
        "@aws-sdk/util-user-agent-browser": "3.254.0",
        "@aws-sdk/util-user-agent-node": "3.254.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        "fast-xml-parser": "4.0.11",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sts",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sts"
      }
    };
  }
});

var require_defaultStsRoleAssumers = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultStsRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var ASSUME_ROLE_DEFAULT_REGION = "us-east-1";
    var decorateDefaultRegion = (region) => {
      if (typeof region !== "function") {
        return region === void 0 ? ASSUME_ROLE_DEFAULT_REGION : region;
      }
      return async () => {
        try {
          return await region();
        } catch (e) {
          return ASSUME_ROLE_DEFAULT_REGION;
        }
      };
    };
    var getDefaultRoleAssumer = (stsOptions, stsClientCtor) => {
      let stsClient;
      let closureSourceCreds;
      return async (sourceCreds, params) => {
        closureSourceCreds = sourceCreds;
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            credentialDefaultProvider: () => async () => closureSourceCreds,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleCommand_1.AssumeRoleCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRole call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions, stsClientCtor) => {
      let stsClient;
      return async (params) => {
        if (!stsClient) {
          const { logger, region, requestHandler } = stsOptions;
          stsClient = new stsClientCtor({
            logger,
            region: decorateDefaultRegion(region || stsOptions.region),
            ...requestHandler ? { requestHandler } : {}
          });
        }
        const { Credentials } = await stsClient.send(new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(params));
        if (!Credentials || !Credentials.AccessKeyId || !Credentials.SecretAccessKey) {
          throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${params.RoleArn}`);
        }
        return {
          accessKeyId: Credentials.AccessKeyId,
          secretAccessKey: Credentials.SecretAccessKey,
          sessionToken: Credentials.SessionToken,
          expiration: Credentials.Expiration
        };
      };
    };
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input, input.stsClientCtor),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input, input.stsClientCtor),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_fromEnv = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = exports2.ENV_EXPIRATION = exports2.ENV_SESSION = exports2.ENV_SECRET = exports2.ENV_KEY = void 0;
    var property_provider_1 = require_dist_cjs30();
    exports2.ENV_KEY = "AWS_ACCESS_KEY_ID";
    exports2.ENV_SECRET = "AWS_SECRET_ACCESS_KEY";
    exports2.ENV_SESSION = "AWS_SESSION_TOKEN";
    exports2.ENV_EXPIRATION = "AWS_CREDENTIAL_EXPIRATION";
    var fromEnv = () => async () => {
      const accessKeyId = process.env[exports2.ENV_KEY];
      const secretAccessKey = process.env[exports2.ENV_SECRET];
      const sessionToken = process.env[exports2.ENV_SESSION];
      const expiry = process.env[exports2.ENV_EXPIRATION];
      if (accessKeyId && secretAccessKey) {
        return {
          accessKeyId,
          secretAccessKey,
          ...sessionToken && { sessionToken },
          ...expiry && { expiration: new Date(expiry) }
        };
      }
      throw new property_provider_1.CredentialsProviderError("Unable to find environment variable credentials.");
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_dist_cjs37 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-env/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromEnv(), exports2);
  }
});

var require_getHomeDir = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getHomeDir.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getHomeDir = void 0;
    var os_1 = require("os");
    var path_1 = require("path");
    var getHomeDir = () => {
      const { HOME, USERPROFILE, HOMEPATH, HOMEDRIVE = `C:${path_1.sep}` } = process.env;
      if (HOME)
        return HOME;
      if (USERPROFILE)
        return USERPROFILE;
      if (HOMEPATH)
        return `${HOMEDRIVE}${HOMEPATH}`;
      return (0, os_1.homedir)();
    };
    exports2.getHomeDir = getHomeDir;
  }
});

var require_getProfileName = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileName.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileName = exports2.DEFAULT_PROFILE = exports2.ENV_PROFILE = void 0;
    exports2.ENV_PROFILE = "AWS_PROFILE";
    exports2.DEFAULT_PROFILE = "default";
    var getProfileName = (init) => init.profile || process.env[exports2.ENV_PROFILE] || exports2.DEFAULT_PROFILE;
    exports2.getProfileName = getProfileName;
  }
});

var require_getSSOTokenFilepath = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFilepath = void 0;
    var crypto_1 = require("crypto");
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    var getSSOTokenFilepath = (id) => {
      const hasher = (0, crypto_1.createHash)("sha1");
      const cacheName = hasher.update(id).digest("hex");
      return (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "sso", "cache", `${cacheName}.json`);
    };
    exports2.getSSOTokenFilepath = getSSOTokenFilepath;
  }
});

var require_getSSOTokenFromFile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSSOTokenFromFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSSOTokenFromFile = void 0;
    var fs_1 = require("fs");
    var getSSOTokenFilepath_1 = require_getSSOTokenFilepath();
    var { readFile } = fs_1.promises;
    var getSSOTokenFromFile = async (id) => {
      const ssoTokenFilepath = (0, getSSOTokenFilepath_1.getSSOTokenFilepath)(id);
      const ssoTokenText = await readFile(ssoTokenFilepath, "utf8");
      return JSON.parse(ssoTokenText);
    };
    exports2.getSSOTokenFromFile = getSSOTokenFromFile;
  }
});

var require_getConfigFilepath = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getConfigFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getConfigFilepath = exports2.ENV_CONFIG_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CONFIG_PATH = "AWS_CONFIG_FILE";
    var getConfigFilepath = () => process.env[exports2.ENV_CONFIG_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "config");
    exports2.getConfigFilepath = getConfigFilepath;
  }
});

var require_getCredentialsFilepath = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getCredentialsFilepath.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getCredentialsFilepath = exports2.ENV_CREDENTIALS_PATH = void 0;
    var path_1 = require("path");
    var getHomeDir_1 = require_getHomeDir();
    exports2.ENV_CREDENTIALS_PATH = "AWS_SHARED_CREDENTIALS_FILE";
    var getCredentialsFilepath = () => process.env[exports2.ENV_CREDENTIALS_PATH] || (0, path_1.join)((0, getHomeDir_1.getHomeDir)(), ".aws", "credentials");
    exports2.getCredentialsFilepath = getCredentialsFilepath;
  }
});

var require_getProfileData = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getProfileData = void 0;
    var profileKeyRegex = /^profile\s(["'])?([^\1]+)\1$/;
    var getProfileData = (data) => Object.entries(data).filter(([key]) => profileKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [profileKeyRegex.exec(key)[2]]: value }), {
      ...data.default && { default: data.default }
    });
    exports2.getProfileData = getProfileData;
  }
});

var require_parseIni = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseIni = void 0;
    var profileNameBlockList = ["__proto__", "profile __proto__"];
    var parseIni = (iniData) => {
      const map = {};
      let currentSection;
      for (let line of iniData.split(/\r?\n/)) {
        line = line.split(/(^|\s)[;#]/)[0].trim();
        const isSection = line[0] === "[" && line[line.length - 1] === "]";
        if (isSection) {
          currentSection = line.substring(1, line.length - 1);
          if (profileNameBlockList.includes(currentSection)) {
            throw new Error(`Found invalid profile name "${currentSection}"`);
          }
        } else if (currentSection) {
          const indexOfEqualsSign = line.indexOf("=");
          const start = 0;
          const end = line.length - 1;
          const isAssignment = indexOfEqualsSign !== -1 && indexOfEqualsSign !== start && indexOfEqualsSign !== end;
          if (isAssignment) {
            const [name, value] = [
              line.substring(0, indexOfEqualsSign).trim(),
              line.substring(indexOfEqualsSign + 1).trim()
            ];
            map[currentSection] = map[currentSection] || {};
            map[currentSection][name] = value;
          }
        }
      }
      return map;
    };
    exports2.parseIni = parseIni;
  }
});

var require_slurpFile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/slurpFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.slurpFile = void 0;
    var fs_1 = require("fs");
    var { readFile } = fs_1.promises;
    var filePromisesHash = {};
    var slurpFile = (path) => {
      if (!filePromisesHash[path]) {
        filePromisesHash[path] = readFile(path, "utf8");
      }
      return filePromisesHash[path];
    };
    exports2.slurpFile = slurpFile;
  }
});

var require_loadSharedConfigFiles = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSharedConfigFiles = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getCredentialsFilepath_1 = require_getCredentialsFilepath();
    var getProfileData_1 = require_getProfileData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSharedConfigFiles = async (init = {}) => {
      const { filepath = (0, getCredentialsFilepath_1.getCredentialsFilepath)(), configFilepath = (0, getConfigFilepath_1.getConfigFilepath)() } = init;
      const parsedFiles = await Promise.all([
        (0, slurpFile_1.slurpFile)(configFilepath).then(parseIni_1.parseIni).then(getProfileData_1.getProfileData).catch(swallowError),
        (0, slurpFile_1.slurpFile)(filepath).then(parseIni_1.parseIni).catch(swallowError)
      ]);
      return {
        configFile: parsedFiles[0],
        credentialsFile: parsedFiles[1]
      };
    };
    exports2.loadSharedConfigFiles = loadSharedConfigFiles;
  }
});

var require_getSsoSessionData = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/getSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoSessionData = void 0;
    var ssoSessionKeyRegex = /^sso-session\s(["'])?([^\1]+)\1$/;
    var getSsoSessionData = (data) => Object.entries(data).filter(([key]) => ssoSessionKeyRegex.test(key)).reduce((acc, [key, value]) => ({ ...acc, [ssoSessionKeyRegex.exec(key)[2]]: value }), {});
    exports2.getSsoSessionData = getSsoSessionData;
  }
});

var require_loadSsoSessionData = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/loadSsoSessionData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadSsoSessionData = void 0;
    var getConfigFilepath_1 = require_getConfigFilepath();
    var getSsoSessionData_1 = require_getSsoSessionData();
    var parseIni_1 = require_parseIni();
    var slurpFile_1 = require_slurpFile();
    var swallowError = () => ({});
    var loadSsoSessionData = async (init = {}) => {
      var _a;
      return (0, slurpFile_1.slurpFile)((_a = init.configFilepath) !== null && _a !== void 0 ? _a : (0, getConfigFilepath_1.getConfigFilepath)()).then(parseIni_1.parseIni).then(getSsoSessionData_1.getSsoSessionData).catch(swallowError);
    };
    exports2.loadSsoSessionData = loadSsoSessionData;
  }
});

var require_parseKnownFiles = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/parseKnownFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseKnownFiles = void 0;
    var loadSharedConfigFiles_1 = require_loadSharedConfigFiles();
    var parseKnownFiles = async (init) => {
      const parsedFiles = await (0, loadSharedConfigFiles_1.loadSharedConfigFiles)(init);
      return {
        ...parsedFiles.configFile,
        ...parsedFiles.credentialsFile
      };
    };
    exports2.parseKnownFiles = parseKnownFiles;
  }
});

var require_types4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs38 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/shared-ini-file-loader/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getHomeDir(), exports2);
    tslib_1.__exportStar(require_getProfileName(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFilepath(), exports2);
    tslib_1.__exportStar(require_getSSOTokenFromFile(), exports2);
    tslib_1.__exportStar(require_loadSharedConfigFiles(), exports2);
    tslib_1.__exportStar(require_loadSsoSessionData(), exports2);
    tslib_1.__exportStar(require_parseKnownFiles(), exports2);
    tslib_1.__exportStar(require_types4(), exports2);
  }
});

var require_httpRequest2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/httpRequest.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.httpRequest = void 0;
    var property_provider_1 = require_dist_cjs30();
    var buffer_1 = require("buffer");
    var http_1 = require("http");
    function httpRequest(options) {
      return new Promise((resolve, reject) => {
        var _a;
        const req = (0, http_1.request)({
          method: "GET",
          ...options,
          hostname: (_a = options.hostname) === null || _a === void 0 ? void 0 : _a.replace(/^\[(.+)\]$/, "$1")
        });
        req.on("error", (err) => {
          reject(Object.assign(new property_provider_1.ProviderError("Unable to connect to instance metadata service"), err));
          req.destroy();
        });
        req.on("timeout", () => {
          reject(new property_provider_1.ProviderError("TimeoutError from instance metadata service"));
          req.destroy();
        });
        req.on("response", (res) => {
          const { statusCode = 400 } = res;
          if (statusCode < 200 || 300 <= statusCode) {
            reject(Object.assign(new property_provider_1.ProviderError("Error response received from instance metadata service"), { statusCode }));
            req.destroy();
          }
          const chunks = [];
          res.on("data", (chunk) => {
            chunks.push(chunk);
          });
          res.on("end", () => {
            resolve(buffer_1.Buffer.concat(chunks));
            req.destroy();
          });
        });
        req.end();
      });
    }
    exports2.httpRequest = httpRequest;
  }
});

var require_ImdsCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/ImdsCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromImdsCredentials = exports2.isImdsCredentials = void 0;
    var isImdsCredentials = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.AccessKeyId === "string" && typeof arg.SecretAccessKey === "string" && typeof arg.Token === "string" && typeof arg.Expiration === "string";
    exports2.isImdsCredentials = isImdsCredentials;
    var fromImdsCredentials = (creds) => ({
      accessKeyId: creds.AccessKeyId,
      secretAccessKey: creds.SecretAccessKey,
      sessionToken: creds.Token,
      expiration: new Date(creds.Expiration)
    });
    exports2.fromImdsCredentials = fromImdsCredentials;
  }
});

var require_RemoteProviderInit = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/RemoteProviderInit.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.providerConfigFromInit = exports2.DEFAULT_MAX_RETRIES = exports2.DEFAULT_TIMEOUT = void 0;
    exports2.DEFAULT_TIMEOUT = 1e3;
    exports2.DEFAULT_MAX_RETRIES = 0;
    var providerConfigFromInit = ({ maxRetries = exports2.DEFAULT_MAX_RETRIES, timeout = exports2.DEFAULT_TIMEOUT }) => ({ maxRetries, timeout });
    exports2.providerConfigFromInit = providerConfigFromInit;
  }
});

var require_retry = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/remoteProvider/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.retry = void 0;
    var retry = (toRetry, maxRetries) => {
      let promise = toRetry();
      for (let i = 0; i < maxRetries; i++) {
        promise = promise.catch(toRetry);
      }
      return promise;
    };
    exports2.retry = retry;
  }
});

var require_fromContainerMetadata = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromContainerMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromContainerMetadata = exports2.ENV_CMDS_AUTH_TOKEN = exports2.ENV_CMDS_RELATIVE_URI = exports2.ENV_CMDS_FULL_URI = void 0;
    var property_provider_1 = require_dist_cjs30();
    var url_1 = require("url");
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    exports2.ENV_CMDS_FULL_URI = "AWS_CONTAINER_CREDENTIALS_FULL_URI";
    exports2.ENV_CMDS_RELATIVE_URI = "AWS_CONTAINER_CREDENTIALS_RELATIVE_URI";
    exports2.ENV_CMDS_AUTH_TOKEN = "AWS_CONTAINER_AUTHORIZATION_TOKEN";
    var fromContainerMetadata = (init = {}) => {
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      return () => (0, retry_1.retry)(async () => {
        const requestOptions = await getCmdsUri();
        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));
        if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
          throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
        }
        return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
      }, maxRetries);
    };
    exports2.fromContainerMetadata = fromContainerMetadata;
    var requestFromEcsImds = async (timeout, options) => {
      if (process.env[exports2.ENV_CMDS_AUTH_TOKEN]) {
        options.headers = {
          ...options.headers,
          Authorization: process.env[exports2.ENV_CMDS_AUTH_TOKEN]
        };
      }
      const buffer = await (0, httpRequest_1.httpRequest)({
        ...options,
        timeout
      });
      return buffer.toString();
    };
    var CMDS_IP = "169.254.170.2";
    var GREENGRASS_HOSTS = {
      localhost: true,
      "127.0.0.1": true
    };
    var GREENGRASS_PROTOCOLS = {
      "http:": true,
      "https:": true
    };
    var getCmdsUri = async () => {
      if (process.env[exports2.ENV_CMDS_RELATIVE_URI]) {
        return {
          hostname: CMDS_IP,
          path: process.env[exports2.ENV_CMDS_RELATIVE_URI]
        };
      }
      if (process.env[exports2.ENV_CMDS_FULL_URI]) {
        const parsed = (0, url_1.parse)(process.env[exports2.ENV_CMDS_FULL_URI]);
        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, false);
        }
        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {
          throw new property_provider_1.CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, false);
        }
        return {
          ...parsed,
          port: parsed.port ? parseInt(parsed.port, 10) : void 0
        };
      }
      throw new property_provider_1.CredentialsProviderError(`The container metadata credential provider cannot be used unless the ${exports2.ENV_CMDS_RELATIVE_URI} or ${exports2.ENV_CMDS_FULL_URI} environment variable is set`, false);
    };
  }
});

var require_fromEnv2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromEnv.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromEnv = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fromEnv = (envVarSelector) => async () => {
      try {
        const config = envVarSelector(process.env);
        if (config === void 0) {
          throw new Error();
        }
        return config;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config from environment variables with getter: ${envVarSelector}`);
      }
    };
    exports2.fromEnv = fromEnv;
  }
});

var require_fromSharedConfigFiles = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromSharedConfigFiles.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSharedConfigFiles = void 0;
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fromSharedConfigFiles = (configSelector, { preferredFile = "config", ...init } = {}) => async () => {
      const profile = (0, shared_ini_file_loader_1.getProfileName)(init);
      const { configFile, credentialsFile } = await (0, shared_ini_file_loader_1.loadSharedConfigFiles)(init);
      const profileFromCredentials = credentialsFile[profile] || {};
      const profileFromConfig = configFile[profile] || {};
      const mergedProfile = preferredFile === "config" ? { ...profileFromCredentials, ...profileFromConfig } : { ...profileFromConfig, ...profileFromCredentials };
      try {
        const configValue = configSelector(mergedProfile);
        if (configValue === void 0) {
          throw new Error();
        }
        return configValue;
      } catch (e) {
        throw new property_provider_1.CredentialsProviderError(e.message || `Cannot load config for profile ${profile} in SDK configuration files with getter: ${configSelector}`);
      }
    };
    exports2.fromSharedConfigFiles = fromSharedConfigFiles;
  }
});

var require_fromStatic2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-config-provider/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs30();
    var isFunction = (func) => typeof func === "function";
    var fromStatic = (defaultValue) => isFunction(defaultValue) ? async () => await defaultValue() : (0, property_provider_1.fromStatic)(defaultValue);
    exports2.fromStatic = fromStatic;
  }
});

var require_configLoader = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-config-provider/dist-cjs/configLoader.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.loadConfig = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fromEnv_1 = require_fromEnv2();
    var fromSharedConfigFiles_1 = require_fromSharedConfigFiles();
    var fromStatic_1 = require_fromStatic2();
    var loadConfig = ({ environmentVariableSelector, configFileSelector, default: defaultValue }, configuration = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromEnv_1.fromEnv)(environmentVariableSelector), (0, fromSharedConfigFiles_1.fromSharedConfigFiles)(configFileSelector, configuration), (0, fromStatic_1.fromStatic)(defaultValue)));
    exports2.loadConfig = loadConfig;
  }
});

var require_dist_cjs39 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-config-provider/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_configLoader(), exports2);
  }
});

var require_Endpoint = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/Endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Endpoint = void 0;
    var Endpoint;
    (function(Endpoint2) {
      Endpoint2["IPv4"] = "http://169.254.169.254";
      Endpoint2["IPv6"] = "http://[fd00:ec2::254]";
    })(Endpoint = exports2.Endpoint || (exports2.Endpoint = {}));
  }
});

var require_EndpointConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_NAME = exports2.ENV_ENDPOINT_NAME = void 0;
    exports2.ENV_ENDPOINT_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT";
    exports2.CONFIG_ENDPOINT_NAME = "ec2_metadata_service_endpoint";
    exports2.ENDPOINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_NAME],
      default: void 0
    };
  }
});

var require_EndpointMode = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointMode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointMode = void 0;
    var EndpointMode;
    (function(EndpointMode2) {
      EndpointMode2["IPv4"] = "IPv4";
      EndpointMode2["IPv6"] = "IPv6";
    })(EndpointMode = exports2.EndpointMode || (exports2.EndpointMode = {}));
  }
});

var require_EndpointModeConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/config/EndpointModeConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = exports2.CONFIG_ENDPOINT_MODE_NAME = exports2.ENV_ENDPOINT_MODE_NAME = void 0;
    var EndpointMode_1 = require_EndpointMode();
    exports2.ENV_ENDPOINT_MODE_NAME = "AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE";
    exports2.CONFIG_ENDPOINT_MODE_NAME = "ec2_metadata_service_endpoint_mode";
    exports2.ENDPOINT_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => env[exports2.ENV_ENDPOINT_MODE_NAME],
      configFileSelector: (profile) => profile[exports2.CONFIG_ENDPOINT_MODE_NAME],
      default: EndpointMode_1.EndpointMode.IPv4
    };
  }
});

var require_getInstanceMetadataEndpoint = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getInstanceMetadataEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var url_parser_1 = require_dist_cjs2();
    var Endpoint_1 = require_Endpoint();
    var EndpointConfigOptions_1 = require_EndpointConfigOptions();
    var EndpointMode_1 = require_EndpointMode();
    var EndpointModeConfigOptions_1 = require_EndpointModeConfigOptions();
    var getInstanceMetadataEndpoint = async () => (0, url_parser_1.parseUrl)(await getFromEndpointConfig() || await getFromEndpointModeConfig());
    exports2.getInstanceMetadataEndpoint = getInstanceMetadataEndpoint;
    var getFromEndpointConfig = async () => (0, node_config_provider_1.loadConfig)(EndpointConfigOptions_1.ENDPOINT_CONFIG_OPTIONS)();
    var getFromEndpointModeConfig = async () => {
      const endpointMode = await (0, node_config_provider_1.loadConfig)(EndpointModeConfigOptions_1.ENDPOINT_MODE_CONFIG_OPTIONS)();
      switch (endpointMode) {
        case EndpointMode_1.EndpointMode.IPv4:
          return Endpoint_1.Endpoint.IPv4;
        case EndpointMode_1.EndpointMode.IPv6:
          return Endpoint_1.Endpoint.IPv6;
        default:
          throw new Error(`Unsupported endpoint mode: ${endpointMode}. Select from ${Object.values(EndpointMode_1.EndpointMode)}`);
      }
    };
  }
});

var require_getExtendedInstanceMetadataCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/getExtendedInstanceMetadataCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getExtendedInstanceMetadataCredentials = void 0;
    var STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;
    var STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;
    var STATIC_STABILITY_DOC_URL = "https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html";
    var getExtendedInstanceMetadataCredentials = (credentials, logger) => {
      var _a;
      const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS + Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);
      const newExpiration = new Date(Date.now() + refreshInterval * 1e3);
      logger.warn("Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(newExpiration)}.\nFor more information, please visit: " + STATIC_STABILITY_DOC_URL);
      const originalExpiration = (_a = credentials.originalExpiration) !== null && _a !== void 0 ? _a : credentials.expiration;
      return {
        ...credentials,
        ...originalExpiration ? { originalExpiration } : {},
        expiration: newExpiration
      };
    };
    exports2.getExtendedInstanceMetadataCredentials = getExtendedInstanceMetadataCredentials;
  }
});

var require_staticStabilityProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/utils/staticStabilityProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.staticStabilityProvider = void 0;
    var getExtendedInstanceMetadataCredentials_1 = require_getExtendedInstanceMetadataCredentials();
    var staticStabilityProvider = (provider, options = {}) => {
      const logger = (options === null || options === void 0 ? void 0 : options.logger) || console;
      let pastCredentials;
      return async () => {
        let credentials;
        try {
          credentials = await provider();
          if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(credentials, logger);
          }
        } catch (e) {
          if (pastCredentials) {
            logger.warn("Credential renew failed: ", e);
            credentials = (0, getExtendedInstanceMetadataCredentials_1.getExtendedInstanceMetadataCredentials)(pastCredentials, logger);
          } else {
            throw e;
          }
        }
        pastCredentials = credentials;
        return credentials;
      };
    };
    exports2.staticStabilityProvider = staticStabilityProvider;
  }
});

var require_fromInstanceMetadata = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/fromInstanceMetadata.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromInstanceMetadata = void 0;
    var property_provider_1 = require_dist_cjs30();
    var httpRequest_1 = require_httpRequest2();
    var ImdsCredentials_1 = require_ImdsCredentials();
    var RemoteProviderInit_1 = require_RemoteProviderInit();
    var retry_1 = require_retry();
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    var staticStabilityProvider_1 = require_staticStabilityProvider();
    var IMDS_PATH = "/latest/meta-data/iam/security-credentials/";
    var IMDS_TOKEN_PATH = "/latest/api/token";
    var fromInstanceMetadata = (init = {}) => (0, staticStabilityProvider_1.staticStabilityProvider)(getInstanceImdsProvider(init), { logger: init.logger });
    exports2.fromInstanceMetadata = fromInstanceMetadata;
    var getInstanceImdsProvider = (init) => {
      let disableFetchToken = false;
      const { timeout, maxRetries } = (0, RemoteProviderInit_1.providerConfigFromInit)(init);
      const getCredentials = async (maxRetries2, options) => {
        const profile = (await (0, retry_1.retry)(async () => {
          let profile2;
          try {
            profile2 = await getProfile(options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return profile2;
        }, maxRetries2)).trim();
        return (0, retry_1.retry)(async () => {
          let creds;
          try {
            creds = await getCredentialsFromProfile(profile, options);
          } catch (err) {
            if (err.statusCode === 401) {
              disableFetchToken = false;
            }
            throw err;
          }
          return creds;
        }, maxRetries2);
      };
      return async () => {
        const endpoint = await (0, getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint)();
        if (disableFetchToken) {
          return getCredentials(maxRetries, { ...endpoint, timeout });
        } else {
          let token;
          try {
            token = (await getMetadataToken({ ...endpoint, timeout })).toString();
          } catch (error) {
            if ((error === null || error === void 0 ? void 0 : error.statusCode) === 400) {
              throw Object.assign(error, {
                message: "EC2 Metadata token request returned error"
              });
            } else if (error.message === "TimeoutError" || [403, 404, 405].includes(error.statusCode)) {
              disableFetchToken = true;
            }
            return getCredentials(maxRetries, { ...endpoint, timeout });
          }
          return getCredentials(maxRetries, {
            ...endpoint,
            headers: {
              "x-aws-ec2-metadata-token": token
            },
            timeout
          });
        }
      };
    };
    var getMetadataToken = async (options) => (0, httpRequest_1.httpRequest)({
      ...options,
      path: IMDS_TOKEN_PATH,
      method: "PUT",
      headers: {
        "x-aws-ec2-metadata-token-ttl-seconds": "21600"
      }
    });
    var getProfile = async (options) => (await (0, httpRequest_1.httpRequest)({ ...options, path: IMDS_PATH })).toString();
    var getCredentialsFromProfile = async (profile, options) => {
      const credsResponse = JSON.parse((await (0, httpRequest_1.httpRequest)({
        ...options,
        path: IMDS_PATH + profile
      })).toString());
      if (!(0, ImdsCredentials_1.isImdsCredentials)(credsResponse)) {
        throw new property_provider_1.CredentialsProviderError("Invalid response received from instance metadata service.");
      }
      return (0, ImdsCredentials_1.fromImdsCredentials)(credsResponse);
    };
  }
});

var require_types5 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs40 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-imds/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getInstanceMetadataEndpoint = exports2.httpRequest = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromContainerMetadata(), exports2);
    tslib_1.__exportStar(require_fromInstanceMetadata(), exports2);
    tslib_1.__exportStar(require_RemoteProviderInit(), exports2);
    tslib_1.__exportStar(require_types5(), exports2);
    var httpRequest_1 = require_httpRequest2();
    Object.defineProperty(exports2, "httpRequest", { enumerable: true, get: function() {
      return httpRequest_1.httpRequest;
    } });
    var getInstanceMetadataEndpoint_1 = require_getInstanceMetadataEndpoint();
    Object.defineProperty(exports2, "getInstanceMetadataEndpoint", { enumerable: true, get: function() {
      return getInstanceMetadataEndpoint_1.getInstanceMetadataEndpoint;
    } });
  }
});

var require_resolveCredentialSource = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveCredentialSource.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveCredentialSource = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs30();
    var resolveCredentialSource = (credentialSource, profileName) => {
      const sourceProvidersMap = {
        EcsContainer: credential_provider_imds_1.fromContainerMetadata,
        Ec2InstanceMetadata: credential_provider_imds_1.fromInstanceMetadata,
        Environment: credential_provider_env_1.fromEnv
      };
      if (credentialSource in sourceProvidersMap) {
        return sourceProvidersMap[credentialSource]();
      } else {
        throw new property_provider_1.CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, expected EcsContainer or Ec2InstanceMetadata or Environment.`);
      }
    };
    exports2.resolveCredentialSource = resolveCredentialSource;
  }
});

var require_resolveAssumeRoleCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveAssumeRoleCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveAssumeRoleCredentials = exports2.isAssumeRoleProfile = void 0;
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveCredentialSource_1 = require_resolveCredentialSource();
    var resolveProfileData_1 = require_resolveProfileData();
    var isAssumeRoleProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1 && ["undefined", "string"].indexOf(typeof arg.external_id) > -1 && ["undefined", "string"].indexOf(typeof arg.mfa_serial) > -1 && (isAssumeRoleWithSourceProfile(arg) || isAssumeRoleWithProviderProfile(arg));
    exports2.isAssumeRoleProfile = isAssumeRoleProfile;
    var isAssumeRoleWithSourceProfile = (arg) => typeof arg.source_profile === "string" && typeof arg.credential_source === "undefined";
    var isAssumeRoleWithProviderProfile = (arg) => typeof arg.credential_source === "string" && typeof arg.source_profile === "undefined";
    var resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (!options.roleAssumer) {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires a role to be assumed, but no role assumption callback was provided.`, false);
      }
      const { source_profile } = data;
      if (source_profile && source_profile in visitedProfiles) {
        throw new property_provider_1.CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile ${(0, shared_ini_file_loader_1.getProfileName)(options)}. Profiles visited: ` + Object.keys(visitedProfiles).join(", "), false);
      }
      const sourceCredsProvider = source_profile ? (0, resolveProfileData_1.resolveProfileData)(source_profile, profiles, options, {
        ...visitedProfiles,
        [source_profile]: true
      }) : (0, resolveCredentialSource_1.resolveCredentialSource)(data.credential_source, profileName)();
      const params = {
        RoleArn: data.role_arn,
        RoleSessionName: data.role_session_name || `aws-sdk-js-${Date.now()}`,
        ExternalId: data.external_id
      };
      const { mfa_serial } = data;
      if (mfa_serial) {
        if (!options.mfaCodeProvider) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, false);
        }
        params.SerialNumber = mfa_serial;
        params.TokenCode = await options.mfaCodeProvider(mfa_serial);
      }
      const sourceCreds = await sourceCredsProvider;
      return options.roleAssumer(sourceCreds, params);
    };
    exports2.resolveAssumeRoleCredentials = resolveAssumeRoleCredentials;
  }
});

var require_getValidatedProcessCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/getValidatedProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getValidatedProcessCredentials = void 0;
    var getValidatedProcessCredentials = (profileName, data) => {
      if (data.Version !== 1) {
        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);
      }
      if (data.AccessKeyId === void 0 || data.SecretAccessKey === void 0) {
        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);
      }
      if (data.Expiration) {
        const currentTime = /* @__PURE__ */ new Date();
        const expireTime = new Date(data.Expiration);
        if (expireTime < currentTime) {
          throw Error(`Profile ${profileName} credential_process returned expired credentials.`);
        }
      }
      return {
        accessKeyId: data.AccessKeyId,
        secretAccessKey: data.SecretAccessKey,
        ...data.SessionToken && { sessionToken: data.SessionToken },
        ...data.Expiration && { expiration: new Date(data.Expiration) }
      };
    };
    exports2.getValidatedProcessCredentials = getValidatedProcessCredentials;
  }
});

var require_resolveProcessCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = void 0;
    var property_provider_1 = require_dist_cjs30();
    var child_process_1 = require("child_process");
    var util_1 = require("util");
    var getValidatedProcessCredentials_1 = require_getValidatedProcessCredentials();
    var resolveProcessCredentials = async (profileName, profiles) => {
      const profile = profiles[profileName];
      if (profiles[profileName]) {
        const credentialProcess = profile["credential_process"];
        if (credentialProcess !== void 0) {
          const execPromise = (0, util_1.promisify)(child_process_1.exec);
          try {
            const { stdout } = await execPromise(credentialProcess);
            let data;
            try {
              data = JSON.parse(stdout.trim());
            } catch (_a) {
              throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);
            }
            return (0, getValidatedProcessCredentials_1.getValidatedProcessCredentials)(profileName, data);
          } catch (error) {
            throw new property_provider_1.CredentialsProviderError(error.message);
          }
        } else {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`);
        }
      } else {
        throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`);
      }
    };
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_fromProcess = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/fromProcess.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromProcess = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials();
    var fromProcess = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProcessCredentials_1.resolveProcessCredentials)((0, shared_ini_file_loader_1.getProfileName)(init), profiles);
    };
    exports2.fromProcess = fromProcess;
  }
});

var require_dist_cjs41 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-process/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromProcess(), exports2);
  }
});

var require_resolveProcessCredentials2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProcessCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProcessCredentials = exports2.isProcessProfile = void 0;
    var credential_provider_process_1 = require_dist_cjs41();
    var isProcessProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.credential_process === "string";
    exports2.isProcessProfile = isProcessProfile;
    var resolveProcessCredentials = async (options, profile) => (0, credential_provider_process_1.fromProcess)({
      ...options,
      profile
    })();
    exports2.resolveProcessCredentials = resolveProcessCredentials;
  }
});

var require_isSsoProfile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/isSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSsoProfile = void 0;
    var isSsoProfile = (arg) => arg && (typeof arg.sso_start_url === "string" || typeof arg.sso_account_id === "string" || typeof arg.sso_session === "string" || typeof arg.sso_region === "string" || typeof arg.sso_role_name === "string");
    exports2.isSsoProfile = isSsoProfile;
  }
});

var require_SSOServiceException = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/SSOServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOServiceException.prototype);
      }
    };
    exports2.SSOServiceException = SSOServiceException;
  }
});

var require_models_03 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutRequestFilterSensitiveLog = exports2.ListAccountsResponseFilterSensitiveLog = exports2.ListAccountsRequestFilterSensitiveLog = exports2.ListAccountRolesResponseFilterSensitiveLog = exports2.RoleInfoFilterSensitiveLog = exports2.ListAccountRolesRequestFilterSensitiveLog = exports2.GetRoleCredentialsResponseFilterSensitiveLog = exports2.RoleCredentialsFilterSensitiveLog = exports2.GetRoleCredentialsRequestFilterSensitiveLog = exports2.AccountInfoFilterSensitiveLog = exports2.UnauthorizedException = exports2.TooManyRequestsException = exports2.ResourceNotFoundException = exports2.InvalidRequestException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOServiceException_1 = require_SSOServiceException();
    var InvalidRequestException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var ResourceNotFoundException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "ResourceNotFoundException",
          $fault: "client",
          ...opts
        });
        this.name = "ResourceNotFoundException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ResourceNotFoundException.prototype);
      }
    };
    exports2.ResourceNotFoundException = ResourceNotFoundException;
    var TooManyRequestsException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "TooManyRequestsException",
          $fault: "client",
          ...opts
        });
        this.name = "TooManyRequestsException";
        this.$fault = "client";
        Object.setPrototypeOf(this, TooManyRequestsException.prototype);
      }
    };
    exports2.TooManyRequestsException = TooManyRequestsException;
    var UnauthorizedException = class extends SSOServiceException_1.SSOServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedException.prototype);
      }
    };
    exports2.UnauthorizedException = UnauthorizedException;
    var AccountInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.AccountInfoFilterSensitiveLog = AccountInfoFilterSensitiveLog;
    var GetRoleCredentialsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.GetRoleCredentialsRequestFilterSensitiveLog = GetRoleCredentialsRequestFilterSensitiveLog;
    var RoleCredentialsFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.secretAccessKey && { secretAccessKey: smithy_client_1.SENSITIVE_STRING },
      ...obj.sessionToken && { sessionToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.RoleCredentialsFilterSensitiveLog = RoleCredentialsFilterSensitiveLog;
    var GetRoleCredentialsResponseFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.roleCredentials && { roleCredentials: (0, exports2.RoleCredentialsFilterSensitiveLog)(obj.roleCredentials) }
    });
    exports2.GetRoleCredentialsResponseFilterSensitiveLog = GetRoleCredentialsResponseFilterSensitiveLog;
    var ListAccountRolesRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountRolesRequestFilterSensitiveLog = ListAccountRolesRequestFilterSensitiveLog;
    var RoleInfoFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RoleInfoFilterSensitiveLog = RoleInfoFilterSensitiveLog;
    var ListAccountRolesResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountRolesResponseFilterSensitiveLog = ListAccountRolesResponseFilterSensitiveLog;
    var ListAccountsRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.ListAccountsRequestFilterSensitiveLog = ListAccountsRequestFilterSensitiveLog;
    var ListAccountsResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.ListAccountsResponseFilterSensitiveLog = ListAccountsResponseFilterSensitiveLog;
    var LogoutRequestFilterSensitiveLog = (obj) => ({
      ...obj,
      ...obj.accessToken && { accessToken: smithy_client_1.SENSITIVE_STRING }
    });
    exports2.LogoutRequestFilterSensitiveLog = LogoutRequestFilterSensitiveLog;
  }
});

var require_Aws_restJson1 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_restJson1LogoutCommand = exports2.deserializeAws_restJson1ListAccountsCommand = exports2.deserializeAws_restJson1ListAccountRolesCommand = exports2.deserializeAws_restJson1GetRoleCredentialsCommand = exports2.serializeAws_restJson1LogoutCommand = exports2.serializeAws_restJson1ListAccountsCommand = exports2.serializeAws_restJson1ListAccountRolesCommand = exports2.serializeAws_restJson1GetRoleCredentialsCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var SSOServiceException_1 = require_SSOServiceException();
    var serializeAws_restJson1GetRoleCredentialsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/federation/credentials`;
      const query = map({
        role_name: [, (0, smithy_client_1.expectNonNull)(input.roleName, `roleName`)],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1GetRoleCredentialsCommand = serializeAws_restJson1GetRoleCredentialsCommand;
    var serializeAws_restJson1ListAccountRolesCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/roles`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()],
        account_id: [, (0, smithy_client_1.expectNonNull)(input.accountId, `accountId`)]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountRolesCommand = serializeAws_restJson1ListAccountRolesCommand;
    var serializeAws_restJson1ListAccountsCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/assignment/accounts`;
      const query = map({
        next_token: [, input.nextToken],
        max_result: [() => input.maxResults !== void 0, () => input.maxResults.toString()]
      });
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "GET",
        headers,
        path: resolvedPath,
        query,
        body
      });
    };
    exports2.serializeAws_restJson1ListAccountsCommand = serializeAws_restJson1ListAccountsCommand;
    var serializeAws_restJson1LogoutCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = map({}, isSerializableHeaderValue, {
        "x-amz-sso_bearer_token": input.accessToken
      });
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/logout`;
      let body;
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1LogoutCommand = serializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1GetRoleCredentialsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.roleCredentials != null) {
        contents.roleCredentials = deserializeAws_restJson1RoleCredentials(data.roleCredentials, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1GetRoleCredentialsCommand = deserializeAws_restJson1GetRoleCredentialsCommand;
    var deserializeAws_restJson1GetRoleCredentialsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountRolesCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountRolesCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      if (data.roleList != null) {
        contents.roleList = deserializeAws_restJson1RoleListType(data.roleList, context);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountRolesCommand = deserializeAws_restJson1ListAccountRolesCommand;
    var deserializeAws_restJson1ListAccountRolesCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1ListAccountsCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1ListAccountsCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accountList != null) {
        contents.accountList = deserializeAws_restJson1AccountListType(data.accountList, context);
      }
      if (data.nextToken != null) {
        contents.nextToken = (0, smithy_client_1.expectString)(data.nextToken);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1ListAccountsCommand = deserializeAws_restJson1ListAccountsCommand;
    var deserializeAws_restJson1ListAccountsCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "ResourceNotFoundException":
        case "com.amazonaws.sso#ResourceNotFoundException":
          throw await deserializeAws_restJson1ResourceNotFoundExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1LogoutCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1LogoutCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      await collectBody(output.body, context);
      return contents;
    };
    exports2.deserializeAws_restJson1LogoutCommand = deserializeAws_restJson1LogoutCommand;
    var deserializeAws_restJson1LogoutCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InvalidRequestException":
        case "com.amazonaws.sso#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "TooManyRequestsException":
        case "com.amazonaws.sso#TooManyRequestsException":
          throw await deserializeAws_restJson1TooManyRequestsExceptionResponse(parsedOutput, context);
        case "UnauthorizedException":
        case "com.amazonaws.sso#UnauthorizedException":
          throw await deserializeAws_restJson1UnauthorizedExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOServiceException_1.SSOServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ResourceNotFoundExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.ResourceNotFoundException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1TooManyRequestsExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.TooManyRequestsException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.message != null) {
        contents.message = (0, smithy_client_1.expectString)(data.message);
      }
      const exception = new models_0_1.UnauthorizedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AccountInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        accountName: (0, smithy_client_1.expectString)(output.accountName),
        emailAddress: (0, smithy_client_1.expectString)(output.emailAddress)
      };
    };
    var deserializeAws_restJson1AccountListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1AccountInfo(entry, context);
      });
      return retVal;
    };
    var deserializeAws_restJson1RoleCredentials = (output, context) => {
      return {
        accessKeyId: (0, smithy_client_1.expectString)(output.accessKeyId),
        expiration: (0, smithy_client_1.expectLong)(output.expiration),
        secretAccessKey: (0, smithy_client_1.expectString)(output.secretAccessKey),
        sessionToken: (0, smithy_client_1.expectString)(output.sessionToken)
      };
    };
    var deserializeAws_restJson1RoleInfo = (output, context) => {
      return {
        accountId: (0, smithy_client_1.expectString)(output.accountId),
        roleName: (0, smithy_client_1.expectString)(output.roleName)
      };
    };
    var deserializeAws_restJson1RoleListType = (output, context) => {
      const retVal = (output || []).filter((e) => e != null).map((entry) => {
        if (entry === null) {
          return null;
        }
        return deserializeAws_restJson1RoleInfo(entry, context);
      });
      return retVal;
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var isSerializableHeaderValue = (value) => value !== void 0 && value !== null && value !== "" && (!Object.getOwnPropertyNames(value).includes("length") || value.length != 0) && (!Object.getOwnPropertyNames(value).includes("size") || value.size != 0);
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

var require_GetRoleCredentialsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/GetRoleCredentialsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.GetRoleCredentialsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var GetRoleCredentialsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, GetRoleCredentialsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "GetRoleCredentialsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.GetRoleCredentialsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.GetRoleCredentialsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1GetRoleCredentialsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1GetRoleCredentialsCommand)(output, context);
      }
    };
    exports2.GetRoleCredentialsCommand = GetRoleCredentialsCommand;
  }
});

var require_ListAccountRolesCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountRolesCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountRolesCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountRolesCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountRolesCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountRolesCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountRolesRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountRolesResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountRolesCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountRolesCommand)(output, context);
      }
    };
    exports2.ListAccountRolesCommand = ListAccountRolesCommand;
  }
});

var require_ListAccountsCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/ListAccountsCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ListAccountsCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var ListAccountsCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, ListAccountsCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "ListAccountsCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.ListAccountsRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.ListAccountsResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1ListAccountsCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1ListAccountsCommand)(output, context);
      }
    };
    exports2.ListAccountsCommand = ListAccountsCommand;
  }
});

var require_LogoutCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/LogoutCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.LogoutCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_03();
    var Aws_restJson1_1 = require_Aws_restJson1();
    var LogoutCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, LogoutCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOClient";
        const commandName = "LogoutCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.LogoutRequestFilterSensitiveLog,
          outputFilterSensitiveLog: (output) => output
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1LogoutCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1LogoutCommand)(output, context);
      }
    };
    exports2.LogoutCommand = LogoutCommand;
  }
});

var require_EndpointParameters3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssoportal"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso",
      description: "AWS SDK for JavaScript Sso Client for Node.js, Browser and React Native",
      version: "3.256.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.254.0",
        "@aws-sdk/fetch-http-handler": "3.254.0",
        "@aws-sdk/hash-node": "3.254.0",
        "@aws-sdk/invalid-dependency": "3.254.0",
        "@aws-sdk/middleware-content-length": "3.254.0",
        "@aws-sdk/middleware-endpoint": "3.254.0",
        "@aws-sdk/middleware-host-header": "3.254.0",
        "@aws-sdk/middleware-logger": "3.254.0",
        "@aws-sdk/middleware-recursion-detection": "3.254.0",
        "@aws-sdk/middleware-retry": "3.254.0",
        "@aws-sdk/middleware-serde": "3.254.0",
        "@aws-sdk/middleware-stack": "3.254.0",
        "@aws-sdk/middleware-user-agent": "3.254.0",
        "@aws-sdk/node-config-provider": "3.254.0",
        "@aws-sdk/node-http-handler": "3.254.0",
        "@aws-sdk/protocol-http": "3.254.0",
        "@aws-sdk/smithy-client": "3.254.0",
        "@aws-sdk/types": "3.254.0",
        "@aws-sdk/url-parser": "3.254.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.254.0",
        "@aws-sdk/util-defaults-mode-node": "3.254.0",
        "@aws-sdk/util-endpoints": "3.254.0",
        "@aws-sdk/util-retry": "3.254.0",
        "@aws-sdk/util-user-agent-browser": "3.254.0",
        "@aws-sdk/util-user-agent-node": "3.254.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso"
      }
    };
  }
});

var require_dist_cjs42 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/hash-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Hash = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var util_utf8_1 = require_dist_cjs17();
    var buffer_1 = require("buffer");
    var crypto_1 = require("crypto");
    var Hash = class {
      constructor(algorithmIdentifier, secret) {
        this.algorithmIdentifier = algorithmIdentifier;
        this.secret = secret;
        this.reset();
      }
      update(toHash, encoding) {
        this.hash.update((0, util_utf8_1.toUint8Array)(castSourceData(toHash, encoding)));
      }
      digest() {
        return Promise.resolve(this.hash.digest());
      }
      reset() {
        this.hash = this.secret ? (0, crypto_1.createHmac)(this.algorithmIdentifier, castSourceData(this.secret)) : (0, crypto_1.createHash)(this.algorithmIdentifier);
      }
    };
    exports2.Hash = Hash;
    function castSourceData(toCast, encoding) {
      if (buffer_1.Buffer.isBuffer(toCast)) {
        return toCast;
      }
      if (typeof toCast === "string") {
        return (0, util_buffer_from_1.fromString)(toCast, encoding);
      }
      if (ArrayBuffer.isView(toCast)) {
        return (0, util_buffer_from_1.fromArrayBuffer)(toCast.buffer, toCast.byteOffset, toCast.byteLength);
      }
      return (0, util_buffer_from_1.fromArrayBuffer)(toCast);
    }
  }
});

var require_dist_cjs43 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/querystring-builder/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.buildQueryString = void 0;
    var util_uri_escape_1 = require_dist_cjs32();
    function buildQueryString(query) {
      const parts = [];
      for (let key of Object.keys(query).sort()) {
        const value = query[key];
        key = (0, util_uri_escape_1.escapeUri)(key);
        if (Array.isArray(value)) {
          for (let i = 0, iLen = value.length; i < iLen; i++) {
            parts.push(`${key}=${(0, util_uri_escape_1.escapeUri)(value[i])}`);
          }
        } else {
          let qsEntry = key;
          if (value || typeof value === "string") {
            qsEntry += `=${(0, util_uri_escape_1.escapeUri)(value)}`;
          }
          parts.push(qsEntry);
        }
      }
      return parts.join("&");
    }
    exports2.buildQueryString = buildQueryString;
  }
});

var require_constants7 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODEJS_TIMEOUT_ERROR_CODES = void 0;
    exports2.NODEJS_TIMEOUT_ERROR_CODES = ["ECONNRESET", "EPIPE", "ETIMEDOUT"];
  }
});

var require_get_transformed_headers = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/get-transformed-headers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getTransformedHeaders = void 0;
    var getTransformedHeaders = (headers) => {
      const transformedHeaders = {};
      for (const name of Object.keys(headers)) {
        const headerValues = headers[name];
        transformedHeaders[name] = Array.isArray(headerValues) ? headerValues.join(",") : headerValues;
      }
      return transformedHeaders;
    };
    exports2.getTransformedHeaders = getTransformedHeaders;
  }
});

var require_set_connection_timeout = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-connection-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setConnectionTimeout = void 0;
    var setConnectionTimeout = (request, reject, timeoutInMs = 0) => {
      if (!timeoutInMs) {
        return;
      }
      request.on("socket", (socket) => {
        if (socket.connecting) {
          const timeoutId = setTimeout(() => {
            request.destroy();
            reject(Object.assign(new Error(`Socket timed out without establishing a connection within ${timeoutInMs} ms`), {
              name: "TimeoutError"
            }));
          }, timeoutInMs);
          socket.on("connect", () => {
            clearTimeout(timeoutId);
          });
        }
      });
    };
    exports2.setConnectionTimeout = setConnectionTimeout;
  }
});

var require_set_socket_timeout = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/set-socket-timeout.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.setSocketTimeout = void 0;
    var setSocketTimeout = (request, reject, timeoutInMs = 0) => {
      request.setTimeout(timeoutInMs, () => {
        request.destroy();
        reject(Object.assign(new Error(`Connection timed out after ${timeoutInMs} ms`), { name: "TimeoutError" }));
      });
    };
    exports2.setSocketTimeout = setSocketTimeout;
  }
});

var require_write_request_body = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/write-request-body.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeRequestBody = void 0;
    var stream_1 = require("stream");
    function writeRequestBody(httpRequest, request) {
      const expect = request.headers["Expect"] || request.headers["expect"];
      if (expect === "100-continue") {
        httpRequest.on("continue", () => {
          writeBody(httpRequest, request.body);
        });
      } else {
        writeBody(httpRequest, request.body);
      }
    }
    exports2.writeRequestBody = writeRequestBody;
    function writeBody(httpRequest, body) {
      if (body instanceof stream_1.Readable) {
        body.pipe(httpRequest);
      } else if (body) {
        httpRequest.end(Buffer.from(body));
      } else {
        httpRequest.end();
      }
    }
  }
});

var require_node_http_handler = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttpHandler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs43();
    var http_1 = require("http");
    var https_1 = require("https");
    var constants_1 = require_constants7();
    var get_transformed_headers_1 = require_get_transformed_headers();
    var set_connection_timeout_1 = require_set_connection_timeout();
    var set_socket_timeout_1 = require_set_socket_timeout();
    var write_request_body_1 = require_write_request_body();
    var NodeHttpHandler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "http/1.1" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((_options) => {
              resolve(this.resolveDefaultConfig(_options));
            }).catch(reject);
          } else {
            resolve(this.resolveDefaultConfig(options));
          }
        });
      }
      resolveDefaultConfig(options) {
        const { connectionTimeout, socketTimeout, httpAgent, httpsAgent } = options || {};
        const keepAlive = true;
        const maxSockets = 50;
        return {
          connectionTimeout,
          socketTimeout,
          httpAgent: httpAgent || new http_1.Agent({ keepAlive, maxSockets }),
          httpsAgent: httpsAgent || new https_1.Agent({ keepAlive, maxSockets })
        };
      }
      destroy() {
        var _a, _b, _c, _d;
        (_b = (_a = this.config) === null || _a === void 0 ? void 0 : _a.httpAgent) === null || _b === void 0 ? void 0 : _b.destroy();
        (_d = (_c = this.config) === null || _c === void 0 ? void 0 : _c.httpsAgent) === null || _d === void 0 ? void 0 : _d.destroy();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        return new Promise((resolve, reject) => {
          if (!this.config) {
            throw new Error("Node HTTP request handler config is not resolved");
          }
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            reject(abortError);
            return;
          }
          const isSSL = request.protocol === "https:";
          const queryString = (0, querystring_builder_1.buildQueryString)(request.query || {});
          const nodeHttpsOptions = {
            headers: request.headers,
            host: request.hostname,
            method: request.method,
            path: queryString ? `${request.path}?${queryString}` : request.path,
            port: request.port,
            agent: isSSL ? this.config.httpsAgent : this.config.httpAgent
          };
          const requestFunc = isSSL ? https_1.request : http_1.request;
          const req = requestFunc(nodeHttpsOptions, (res) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: res.statusCode || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(res.headers),
              body: res
            });
            resolve({ response: httpResponse });
          });
          req.on("error", (err) => {
            if (constants_1.NODEJS_TIMEOUT_ERROR_CODES.includes(err.code)) {
              reject(Object.assign(err, { name: "TimeoutError" }));
            } else {
              reject(err);
            }
          });
          (0, set_connection_timeout_1.setConnectionTimeout)(req, reject, this.config.connectionTimeout);
          (0, set_socket_timeout_1.setSocketTimeout)(req, reject, this.config.socketTimeout);
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.abort();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
    };
    exports2.NodeHttpHandler = NodeHttpHandler;
  }
});

var require_node_http2_handler = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/node-http2-handler.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NodeHttp2Handler = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var querystring_builder_1 = require_dist_cjs43();
    var http2_1 = require("http2");
    var get_transformed_headers_1 = require_get_transformed_headers();
    var write_request_body_1 = require_write_request_body();
    var NodeHttp2Handler = class {
      constructor(options) {
        this.metadata = { handlerProtocol: "h2" };
        this.configProvider = new Promise((resolve, reject) => {
          if (typeof options === "function") {
            options().then((opts) => {
              resolve(opts || {});
            }).catch(reject);
          } else {
            resolve(options || {});
          }
        });
        this.sessionCache = /* @__PURE__ */ new Map();
      }
      destroy() {
        for (const sessions of this.sessionCache.values()) {
          sessions.forEach((session) => this.destroySession(session));
        }
        this.sessionCache.clear();
      }
      async handle(request, { abortSignal } = {}) {
        if (!this.config) {
          this.config = await this.configProvider;
        }
        const { requestTimeout, disableConcurrentStreams } = this.config;
        return new Promise((resolve, rejectOriginal) => {
          let fulfilled = false;
          if (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted) {
            fulfilled = true;
            const abortError = new Error("Request aborted");
            abortError.name = "AbortError";
            rejectOriginal(abortError);
            return;
          }
          const { hostname, method, port, protocol, path, query } = request;
          const authority = `${protocol}//${hostname}${port ? `:${port}` : ""}`;
          const session = this.getSession(authority, disableConcurrentStreams || false);
          const reject = (err) => {
            if (disableConcurrentStreams) {
              this.destroySession(session);
            }
            fulfilled = true;
            rejectOriginal(err);
          };
          const queryString = (0, querystring_builder_1.buildQueryString)(query || {});
          const req = session.request({
            ...request.headers,
            [http2_1.constants.HTTP2_HEADER_PATH]: queryString ? `${path}?${queryString}` : path,
            [http2_1.constants.HTTP2_HEADER_METHOD]: method
          });
          session.ref();
          req.on("response", (headers) => {
            const httpResponse = new protocol_http_1.HttpResponse({
              statusCode: headers[":status"] || -1,
              headers: (0, get_transformed_headers_1.getTransformedHeaders)(headers),
              body: req
            });
            fulfilled = true;
            resolve({ response: httpResponse });
            if (disableConcurrentStreams) {
              session.close();
              this.deleteSessionFromCache(authority, session);
            }
          });
          if (requestTimeout) {
            req.setTimeout(requestTimeout, () => {
              req.close();
              const timeoutError = new Error(`Stream timed out because of no activity for ${requestTimeout} ms`);
              timeoutError.name = "TimeoutError";
              reject(timeoutError);
            });
          }
          if (abortSignal) {
            abortSignal.onabort = () => {
              req.close();
              const abortError = new Error("Request aborted");
              abortError.name = "AbortError";
              reject(abortError);
            };
          }
          req.on("frameError", (type, code, id) => {
            reject(new Error(`Frame type id ${type} in stream id ${id} has failed with code ${code}.`));
          });
          req.on("error", reject);
          req.on("aborted", () => {
            reject(new Error(`HTTP/2 stream is abnormally aborted in mid-communication with result code ${req.rstCode}.`));
          });
          req.on("close", () => {
            session.unref();
            if (disableConcurrentStreams) {
              session.destroy();
            }
            if (!fulfilled) {
              reject(new Error("Unexpected error: http2 request did not get a response"));
            }
          });
          (0, write_request_body_1.writeRequestBody)(req, request);
        });
      }
      getSession(authority, disableConcurrentStreams) {
        var _a;
        const sessionCache = this.sessionCache;
        const existingSessions = sessionCache.get(authority) || [];
        if (existingSessions.length > 0 && !disableConcurrentStreams)
          return existingSessions[0];
        const newSession = (0, http2_1.connect)(authority);
        newSession.unref();
        const destroySessionCb = () => {
          this.destroySession(newSession);
          this.deleteSessionFromCache(authority, newSession);
        };
        newSession.on("goaway", destroySessionCb);
        newSession.on("error", destroySessionCb);
        newSession.on("frameError", destroySessionCb);
        newSession.on("close", () => this.deleteSessionFromCache(authority, newSession));
        if ((_a = this.config) === null || _a === void 0 ? void 0 : _a.sessionTimeout) {
          newSession.setTimeout(this.config.sessionTimeout, destroySessionCb);
        }
        existingSessions.push(newSession);
        sessionCache.set(authority, existingSessions);
        return newSession;
      }
      destroySession(session) {
        if (!session.destroyed) {
          session.destroy();
        }
      }
      deleteSessionFromCache(authority, session) {
        const existingSessions = this.sessionCache.get(authority) || [];
        if (!existingSessions.includes(session)) {
          return;
        }
        this.sessionCache.set(authority, existingSessions.filter((s) => s !== session));
      }
    };
    exports2.NodeHttp2Handler = NodeHttp2Handler;
  }
});

var require_collector = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/collector.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Collector = void 0;
    var stream_1 = require("stream");
    var Collector = class extends stream_1.Writable {
      constructor() {
        super(...arguments);
        this.bufferedBytes = [];
      }
      _write(chunk, encoding, callback) {
        this.bufferedBytes.push(chunk);
        callback();
      }
    };
    exports2.Collector = Collector;
  }
});

var require_stream_collector = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/stream-collector/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.streamCollector = void 0;
    var collector_1 = require_collector();
    var streamCollector = (stream) => new Promise((resolve, reject) => {
      const collector = new collector_1.Collector();
      stream.pipe(collector);
      stream.on("error", (err) => {
        collector.end();
        reject(err);
      });
      collector.on("error", reject);
      collector.on("finish", function() {
        const bytes = new Uint8Array(Buffer.concat(this.bufferedBytes));
        resolve(bytes);
      });
    });
    exports2.streamCollector = streamCollector;
  }
});

var require_dist_cjs44 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/node-http-handler/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_node_http_handler(), exports2);
    tslib_1.__exportStar(require_node_http2_handler(), exports2);
    tslib_1.__exportStar(require_stream_collector(), exports2);
  }
});

var require_calculateBodyLength = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-body-length-node/dist-cjs/calculateBodyLength.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.calculateBodyLength = void 0;
    var fs_1 = require("fs");
    var calculateBodyLength = (body) => {
      if (!body) {
        return 0;
      }
      if (typeof body === "string") {
        return Buffer.from(body).length;
      } else if (typeof body.byteLength === "number") {
        return body.byteLength;
      } else if (typeof body.size === "number") {
        return body.size;
      } else if (typeof body.path === "string" || Buffer.isBuffer(body.path)) {
        return (0, fs_1.lstatSync)(body.path).size;
      } else if (typeof body.fd === "number") {
        return (0, fs_1.fstatSync)(body.fd).size;
      }
      throw new Error(`Body Length computation failed for ${body}`);
    };
    exports2.calculateBodyLength = calculateBodyLength;
  }
});

var require_dist_cjs45 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-body-length-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_calculateBodyLength(), exports2);
  }
});

var require_is_crt_available = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/is-crt-available.js"(exports2, module2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isCrtAvailable = void 0;
    var isCrtAvailable = () => {
      try {
        if (typeof require === "function" && typeof module2 !== "undefined" && module2.require && require("aws-crt")) {
          return ["md/crt-avail"];
        }
        return null;
      } catch (e) {
        return null;
      }
    };
    exports2.isCrtAvailable = isCrtAvailable;
  }
});

var require_dist_cjs46 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-user-agent-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultUserAgent = exports2.UA_APP_ID_INI_NAME = exports2.UA_APP_ID_ENV_NAME = void 0;
    var node_config_provider_1 = require_dist_cjs39();
    var os_1 = require("os");
    var process_1 = require("process");
    var is_crt_available_1 = require_is_crt_available();
    exports2.UA_APP_ID_ENV_NAME = "AWS_SDK_UA_APP_ID";
    exports2.UA_APP_ID_INI_NAME = "sdk-ua-app-id";
    var defaultUserAgent = ({ serviceId, clientVersion }) => {
      const sections = [
        ["aws-sdk-js", clientVersion],
        [`os/${(0, os_1.platform)()}`, (0, os_1.release)()],
        ["lang/js"],
        ["md/nodejs", `${process_1.versions.node}`]
      ];
      const crtAvailable = (0, is_crt_available_1.isCrtAvailable)();
      if (crtAvailable) {
        sections.push(crtAvailable);
      }
      if (serviceId) {
        sections.push([`api/${serviceId}`, clientVersion]);
      }
      if (process_1.env.AWS_EXECUTION_ENV) {
        sections.push([`exec-env/${process_1.env.AWS_EXECUTION_ENV}`]);
      }
      const appIdPromise = (0, node_config_provider_1.loadConfig)({
        environmentVariableSelector: (env) => env[exports2.UA_APP_ID_ENV_NAME],
        configFileSelector: (profile) => profile[exports2.UA_APP_ID_INI_NAME],
        default: void 0
      })();
      let resolvedUserAgent = void 0;
      return async () => {
        if (!resolvedUserAgent) {
          const appId = await appIdPromise;
          resolvedUserAgent = appId ? [...sections, [`app/${appId}`]] : [...sections];
        }
        return resolvedUserAgent;
      };
    };
    exports2.defaultUserAgent = defaultUserAgent;
  }
});

var require_dist_cjs47 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-utf8-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toUtf8 = exports2.fromUtf8 = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var fromUtf8 = (input) => {
      const buf = (0, util_buffer_from_1.fromString)(input, "utf8");
      return new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength / Uint8Array.BYTES_PER_ELEMENT);
    };
    exports2.fromUtf8 = fromUtf8;
    var toUtf8 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("utf8");
    exports2.toUtf8 = toUtf8;
  }
});

var require_fromBase64 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-base64/dist-cjs/fromBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var BASE64_REGEX = /^[A-Za-z0-9+/]*={0,2}$/;
    var fromBase64 = (input) => {
      if (input.length * 3 % 4 !== 0) {
        throw new TypeError(`Incorrect padding on base64 string.`);
      }
      if (!BASE64_REGEX.exec(input)) {
        throw new TypeError(`Invalid base64 string.`);
      }
      const buffer = (0, util_buffer_from_1.fromString)(input, "base64");
      return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);
    };
    exports2.fromBase64 = fromBase64;
  }
});

var require_toBase64 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-base64/dist-cjs/toBase64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toBase64 = void 0;
    var util_buffer_from_1 = require_dist_cjs16();
    var toBase64 = (input) => (0, util_buffer_from_1.fromArrayBuffer)(input.buffer, input.byteOffset, input.byteLength).toString("base64");
    exports2.toBase64 = toBase64;
  }
});

var require_dist_cjs48 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-base64/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromBase64(), exports2);
    tslib_1.__exportStar(require_toBase64(), exports2);
  }
});

var require_partitions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partitions.json"(exports2, module2) {
    module2.exports = {
      partitions: [{
        id: "aws",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^(us|eu|ap|sa|ca|me|af)\\-\\w+\\-\\d+$",
        regions: {
          "af-south-1": {
            description: "Africa (Cape Town)"
          },
          "ap-east-1": {
            description: "Asia Pacific (Hong Kong)"
          },
          "ap-northeast-1": {
            description: "Asia Pacific (Tokyo)"
          },
          "ap-northeast-2": {
            description: "Asia Pacific (Seoul)"
          },
          "ap-northeast-3": {
            description: "Asia Pacific (Osaka)"
          },
          "ap-south-1": {
            description: "Asia Pacific (Mumbai)"
          },
          "ap-south-2": {
            description: "Asia Pacific (Hyderabad)"
          },
          "ap-southeast-1": {
            description: "Asia Pacific (Singapore)"
          },
          "ap-southeast-2": {
            description: "Asia Pacific (Sydney)"
          },
          "ap-southeast-3": {
            description: "Asia Pacific (Jakarta)"
          },
          "aws-global": {
            description: "AWS Standard global region"
          },
          "ca-central-1": {
            description: "Canada (Central)"
          },
          "eu-central-1": {
            description: "Europe (Frankfurt)"
          },
          "eu-central-2": {
            description: "Europe (Zurich)"
          },
          "eu-north-1": {
            description: "Europe (Stockholm)"
          },
          "eu-south-1": {
            description: "Europe (Milan)"
          },
          "eu-south-2": {
            description: "Europe (Spain)"
          },
          "eu-west-1": {
            description: "Europe (Ireland)"
          },
          "eu-west-2": {
            description: "Europe (London)"
          },
          "eu-west-3": {
            description: "Europe (Paris)"
          },
          "me-central-1": {
            description: "Middle East (UAE)"
          },
          "me-south-1": {
            description: "Middle East (Bahrain)"
          },
          "sa-east-1": {
            description: "South America (Sao Paulo)"
          },
          "us-east-1": {
            description: "US East (N. Virginia)"
          },
          "us-east-2": {
            description: "US East (Ohio)"
          },
          "us-west-1": {
            description: "US West (N. California)"
          },
          "us-west-2": {
            description: "US West (Oregon)"
          }
        }
      }, {
        id: "aws-cn",
        outputs: {
          dnsSuffix: "amazonaws.com.cn",
          dualStackDnsSuffix: "api.amazonwebservices.com.cn",
          name: "aws-cn",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^cn\\-\\w+\\-\\d+$",
        regions: {
          "aws-cn-global": {
            description: "AWS China global region"
          },
          "cn-north-1": {
            description: "China (Beijing)"
          },
          "cn-northwest-1": {
            description: "China (Ningxia)"
          }
        }
      }, {
        id: "aws-us-gov",
        outputs: {
          dnsSuffix: "amazonaws.com",
          dualStackDnsSuffix: "api.aws",
          name: "aws-us-gov",
          supportsDualStack: true,
          supportsFIPS: true
        },
        regionRegex: "^us\\-gov\\-\\w+\\-\\d+$",
        regions: {
          "aws-us-gov-global": {
            description: "AWS GovCloud (US) global region"
          },
          "us-gov-east-1": {
            description: "AWS GovCloud (US-East)"
          },
          "us-gov-west-1": {
            description: "AWS GovCloud (US-West)"
          }
        }
      }, {
        id: "aws-iso",
        outputs: {
          dnsSuffix: "c2s.ic.gov",
          dualStackDnsSuffix: "c2s.ic.gov",
          name: "aws-iso",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-iso\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-global": {
            description: "AWS ISO (US) global region"
          },
          "us-iso-east-1": {
            description: "US ISO East"
          },
          "us-iso-west-1": {
            description: "US ISO WEST"
          }
        }
      }, {
        id: "aws-iso-b",
        outputs: {
          dnsSuffix: "sc2s.sgov.gov",
          dualStackDnsSuffix: "sc2s.sgov.gov",
          name: "aws-iso-b",
          supportsDualStack: false,
          supportsFIPS: true
        },
        regionRegex: "^us\\-isob\\-\\w+\\-\\d+$",
        regions: {
          "aws-iso-b-global": {
            description: "AWS ISOB (US) global region"
          },
          "us-isob-east-1": {
            description: "US ISOB East (Ohio)"
          }
        }
      }],
      version: "1.1"
    };
  }
});

var require_partition = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/partition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.partition = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var partitions_json_1 = tslib_1.__importDefault(require_partitions());
    var { partitions } = partitions_json_1.default;
    var DEFAULT_PARTITION = partitions.find((partition2) => partition2.id === "aws");
    var partition = (value) => {
      for (const partition2 of partitions) {
        const { regions, outputs } = partition2;
        for (const [region, regionData] of Object.entries(regions)) {
          if (region === value) {
            return {
              ...outputs,
              ...regionData
            };
          }
        }
      }
      for (const partition2 of partitions) {
        const { regionRegex, outputs } = partition2;
        if (new RegExp(regionRegex).test(value)) {
          return {
            ...outputs
          };
        }
      }
      if (!DEFAULT_PARTITION) {
        throw new Error("Provided region was not found in the partition array or regex, and default partition with id 'aws' doesn't exist.");
      }
      return {
        ...DEFAULT_PARTITION.outputs
      };
    };
    exports2.partition = partition;
  }
});

var require_debugId = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/debugId.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.debugId = void 0;
    exports2.debugId = "endpoints";
  }
});

var require_toDebugString = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/toDebugString.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.toDebugString = void 0;
    function toDebugString(input) {
      if (typeof input !== "object" || input == null) {
        return input;
      }
      if ("ref" in input) {
        return `$${toDebugString(input.ref)}`;
      }
      if ("fn" in input) {
        return `${input.fn}(${(input.argv || []).map(toDebugString).join(", ")})`;
      }
      return JSON.stringify(input, null, 2);
    }
    exports2.toDebugString = toDebugString;
  }
});

var require_debug = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/debug/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_debugId(), exports2);
    tslib_1.__exportStar(require_toDebugString(), exports2);
  }
});

var require_EndpointError = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointError.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointError = void 0;
    var EndpointError = class extends Error {
      constructor(message) {
        super(message);
        this.name = "EndpointError";
      }
    };
    exports2.EndpointError = EndpointError;
  }
});

var require_EndpointRuleObject = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/EndpointRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ErrorRuleObject = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/ErrorRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_RuleSetObject = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/RuleSetObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TreeRuleObject = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/TreeRuleObject.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shared = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_types6 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/types/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EndpointError(), exports2);
    tslib_1.__exportStar(require_EndpointRuleObject(), exports2);
    tslib_1.__exportStar(require_ErrorRuleObject(), exports2);
    tslib_1.__exportStar(require_RuleSetObject(), exports2);
    tslib_1.__exportStar(require_TreeRuleObject(), exports2);
    tslib_1.__exportStar(require_shared(), exports2);
  }
});

var require_isIpAddress = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isIpAddress.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isIpAddress = void 0;
    var IP_V4_REGEX = new RegExp(`^(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)(?:\\.(?:25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]\\d|\\d)){3}$`);
    var isIpAddress = (value) => IP_V4_REGEX.test(value) || value.startsWith("[") && value.endsWith("]");
    exports2.isIpAddress = isIpAddress;
  }
});

var require_isValidHostLabel = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isValidHostLabel.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isValidHostLabel = void 0;
    var VALID_HOST_LABEL_REGEX = new RegExp(`^(?!.*-$)(?!-)[a-zA-Z0-9-]{1,63}$`);
    var isValidHostLabel = (value, allowSubDomains = false) => {
      if (!allowSubDomains) {
        return VALID_HOST_LABEL_REGEX.test(value);
      }
      const labels = value.split(".");
      for (const label of labels) {
        if (!(0, exports2.isValidHostLabel)(label)) {
          return false;
        }
      }
      return true;
    };
    exports2.isValidHostLabel = isValidHostLabel;
  }
});

var require_isVirtualHostableS3Bucket = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/isVirtualHostableS3Bucket.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isVirtualHostableS3Bucket = void 0;
    var isIpAddress_1 = require_isIpAddress();
    var isValidHostLabel_1 = require_isValidHostLabel();
    var isVirtualHostableS3Bucket = (value, allowSubDomains = false) => {
      if (allowSubDomains) {
        for (const label of value.split(".")) {
          if (!(0, exports2.isVirtualHostableS3Bucket)(label)) {
            return false;
          }
        }
        return true;
      }
      if (!(0, isValidHostLabel_1.isValidHostLabel)(value)) {
        return false;
      }
      if (value.length < 3 || value.length > 63) {
        return false;
      }
      if (value !== value.toLowerCase()) {
        return false;
      }
      if ((0, isIpAddress_1.isIpAddress)(value)) {
        return false;
      }
      return true;
    };
    exports2.isVirtualHostableS3Bucket = isVirtualHostableS3Bucket;
  }
});

var require_parseArn = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/parseArn.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseArn = void 0;
    var parseArn = (value) => {
      const segments = value.split(":");
      if (segments.length < 6)
        return null;
      const [arn, partition, service, region, accountId, ...resourceId] = segments;
      if (arn !== "arn" || partition === "" || service === "" || resourceId[0] === "")
        return null;
      return {
        partition,
        service,
        region,
        accountId,
        resourceId: resourceId[0].includes("/") ? resourceId[0].split("/") : resourceId
      };
    };
    exports2.parseArn = parseArn;
  }
});

var require_aws = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/aws/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_isVirtualHostableS3Bucket(), exports2);
    tslib_1.__exportStar(require_parseArn(), exports2);
    tslib_1.__exportStar(require_partition(), exports2);
  }
});

var require_booleanEquals = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/booleanEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.booleanEquals = void 0;
    var booleanEquals = (value1, value2) => value1 === value2;
    exports2.booleanEquals = booleanEquals;
  }
});

var require_getAttrPathList = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttrPathList.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttrPathList = void 0;
    var types_1 = require_types6();
    var getAttrPathList = (path) => {
      const parts = path.split(".");
      const pathList = [];
      for (const part of parts) {
        const squareBracketIndex = part.indexOf("[");
        if (squareBracketIndex !== -1) {
          if (part.indexOf("]") !== part.length - 1) {
            throw new types_1.EndpointError(`Path: '${path}' does not end with ']'`);
          }
          const arrayIndex = part.slice(squareBracketIndex + 1, -1);
          if (Number.isNaN(parseInt(arrayIndex))) {
            throw new types_1.EndpointError(`Invalid array index: '${arrayIndex}' in path: '${path}'`);
          }
          if (squareBracketIndex !== 0) {
            pathList.push(part.slice(0, squareBracketIndex));
          }
          pathList.push(arrayIndex);
        } else {
          pathList.push(part);
        }
      }
      return pathList;
    };
    exports2.getAttrPathList = getAttrPathList;
  }
});

var require_getAttr = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/getAttr.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAttr = void 0;
    var types_1 = require_types6();
    var getAttrPathList_1 = require_getAttrPathList();
    var getAttr = (value, path) => (0, getAttrPathList_1.getAttrPathList)(path).reduce((acc, index) => {
      if (typeof acc !== "object") {
        throw new types_1.EndpointError(`Index '${index}' in '${path}' not found in '${JSON.stringify(value)}'`);
      } else if (Array.isArray(acc)) {
        return acc[parseInt(index)];
      }
      return acc[index];
    }, value);
    exports2.getAttr = getAttr;
  }
});

var require_isSet = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/isSet.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.isSet = void 0;
    var isSet = (value) => value != null;
    exports2.isSet = isSet;
  }
});

var require_not = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/not.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.not = void 0;
    var not = (value) => !value;
    exports2.not = not;
  }
});

var require_abort = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/abort.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_auth = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/auth.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_checksum = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/checksum.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_client2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_command2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/command.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_credentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/credentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_crypto = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/crypto.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_endpoint = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/endpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EndpointURLScheme = void 0;
    var EndpointURLScheme;
    (function(EndpointURLScheme2) {
      EndpointURLScheme2["HTTP"] = "http";
      EndpointURLScheme2["HTTPS"] = "https";
    })(EndpointURLScheme = exports2.EndpointURLScheme || (exports2.EndpointURLScheme = {}));
  }
});

var require_eventStream = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/eventStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_http = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/http.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AnonymousIdentity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AnonymousIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_AwsCredentialIdentity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/AwsCredentialIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_Identity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/Identity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_LoginIdentity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/LoginIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_TokenIdentity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/TokenIdentity.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_identity = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/identity/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AnonymousIdentity(), exports2);
    tslib_1.__exportStar(require_AwsCredentialIdentity(), exports2);
    tslib_1.__exportStar(require_Identity(), exports2);
    tslib_1.__exportStar(require_LoginIdentity(), exports2);
    tslib_1.__exportStar(require_TokenIdentity(), exports2);
  }
});

var require_logger = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/logger.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_middleware2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/middleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_pagination = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/pagination.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_profile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/profile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_response = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/response.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_retry2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/retry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_serde = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/serde.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_shapes = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/shapes.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_signature = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/signature.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_stream = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/stream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_token = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/token.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_transfer = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/transfer.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_util3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/util.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_waiter = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs49 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/types/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_abort(), exports2);
    tslib_1.__exportStar(require_auth(), exports2);
    tslib_1.__exportStar(require_checksum(), exports2);
    tslib_1.__exportStar(require_client2(), exports2);
    tslib_1.__exportStar(require_command2(), exports2);
    tslib_1.__exportStar(require_credentials(), exports2);
    tslib_1.__exportStar(require_crypto(), exports2);
    tslib_1.__exportStar(require_endpoint(), exports2);
    tslib_1.__exportStar(require_eventStream(), exports2);
    tslib_1.__exportStar(require_http(), exports2);
    tslib_1.__exportStar(require_identity(), exports2);
    tslib_1.__exportStar(require_logger(), exports2);
    tslib_1.__exportStar(require_middleware2(), exports2);
    tslib_1.__exportStar(require_pagination(), exports2);
    tslib_1.__exportStar(require_profile(), exports2);
    tslib_1.__exportStar(require_response(), exports2);
    tslib_1.__exportStar(require_retry2(), exports2);
    tslib_1.__exportStar(require_serde(), exports2);
    tslib_1.__exportStar(require_shapes(), exports2);
    tslib_1.__exportStar(require_signature(), exports2);
    tslib_1.__exportStar(require_stream(), exports2);
    tslib_1.__exportStar(require_token(), exports2);
    tslib_1.__exportStar(require_transfer(), exports2);
    tslib_1.__exportStar(require_util3(), exports2);
    tslib_1.__exportStar(require_waiter(), exports2);
  }
});

var require_parseURL = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/parseURL.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.parseURL = void 0;
    var types_1 = require_dist_cjs49();
    var isIpAddress_1 = require_isIpAddress();
    var DEFAULT_PORTS = {
      [types_1.EndpointURLScheme.HTTP]: 80,
      [types_1.EndpointURLScheme.HTTPS]: 443
    };
    var parseURL = (value) => {
      const whatwgURL = (() => {
        try {
          if (value instanceof URL) {
            return value;
          }
          if (typeof value === "object" && "hostname" in value) {
            const { hostname: hostname2, port, protocol: protocol2 = "", path = "", query = {} } = value;
            const url = new URL(`${protocol2}//${hostname2}${port ? `:${port}` : ""}${path}`);
            url.search = Object.entries(query).map(([k, v]) => `${k}=${v}`).join("&");
            return url;
          }
          return new URL(value);
        } catch (error) {
          return null;
        }
      })();
      if (!whatwgURL) {
        console.error(`Unable to parse ${JSON.stringify(value)} as a whatwg URL.`);
        return null;
      }
      const urlString = whatwgURL.href;
      const { host, hostname, pathname, protocol, search } = whatwgURL;
      if (search) {
        return null;
      }
      const scheme = protocol.slice(0, -1);
      if (!Object.values(types_1.EndpointURLScheme).includes(scheme)) {
        return null;
      }
      const isIp = (0, isIpAddress_1.isIpAddress)(hostname);
      const inputContainsDefaultPort = urlString.includes(`${host}:${DEFAULT_PORTS[scheme]}`) || typeof value === "string" && value.includes(`${host}:${DEFAULT_PORTS[scheme]}`);
      const authority = `${host}${inputContainsDefaultPort ? `:${DEFAULT_PORTS[scheme]}` : ``}`;
      return {
        scheme,
        authority,
        path: pathname,
        normalizedPath: pathname.endsWith("/") ? pathname : `${pathname}/`,
        isIp
      };
    };
    exports2.parseURL = parseURL;
  }
});

var require_stringEquals = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/stringEquals.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.stringEquals = void 0;
    var stringEquals = (value1, value2) => value1 === value2;
    exports2.stringEquals = stringEquals;
  }
});

var require_substring = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/substring.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.substring = void 0;
    var substring = (input, start, stop, reverse) => {
      if (start >= stop || input.length < stop) {
        return null;
      }
      if (!reverse) {
        return input.substring(start, stop);
      }
      return input.substring(input.length - stop, input.length - start);
    };
    exports2.substring = substring;
  }
});

var require_uriEncode = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/uriEncode.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.uriEncode = void 0;
    var uriEncode = (value) => encodeURIComponent(value).replace(/[!*'()]/g, (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`);
    exports2.uriEncode = uriEncode;
  }
});

var require_lib = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/lib/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.aws = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    exports2.aws = tslib_1.__importStar(require_aws());
    tslib_1.__exportStar(require_booleanEquals(), exports2);
    tslib_1.__exportStar(require_getAttr(), exports2);
    tslib_1.__exportStar(require_isSet(), exports2);
    tslib_1.__exportStar(require_isValidHostLabel(), exports2);
    tslib_1.__exportStar(require_not(), exports2);
    tslib_1.__exportStar(require_parseURL(), exports2);
    tslib_1.__exportStar(require_stringEquals(), exports2);
    tslib_1.__exportStar(require_substring(), exports2);
    tslib_1.__exportStar(require_uriEncode(), exports2);
  }
});

var require_evaluateTemplate = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTemplate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTemplate = void 0;
    var lib_1 = require_lib();
    var evaluateTemplate = (template, options) => {
      const evaluatedTemplateArr = [];
      const templateContext = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      let currentIndex = 0;
      while (currentIndex < template.length) {
        const openingBraceIndex = template.indexOf("{", currentIndex);
        if (openingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(currentIndex));
          break;
        }
        evaluatedTemplateArr.push(template.slice(currentIndex, openingBraceIndex));
        const closingBraceIndex = template.indexOf("}", openingBraceIndex);
        if (closingBraceIndex === -1) {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex));
          break;
        }
        if (template[openingBraceIndex + 1] === "{" && template[closingBraceIndex + 1] === "}") {
          evaluatedTemplateArr.push(template.slice(openingBraceIndex + 1, closingBraceIndex));
          currentIndex = closingBraceIndex + 2;
        }
        const parameterName = template.substring(openingBraceIndex + 1, closingBraceIndex);
        if (parameterName.includes("#")) {
          const [refName, attrName] = parameterName.split("#");
          evaluatedTemplateArr.push((0, lib_1.getAttr)(templateContext[refName], attrName));
        } else {
          evaluatedTemplateArr.push(templateContext[parameterName]);
        }
        currentIndex = closingBraceIndex + 1;
      }
      return evaluatedTemplateArr.join("");
    };
    exports2.evaluateTemplate = evaluateTemplate;
  }
});

var require_getReferenceValue = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getReferenceValue.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getReferenceValue = void 0;
    var getReferenceValue = ({ ref }, options) => {
      const referenceRecord = {
        ...options.endpointParams,
        ...options.referenceRecord
      };
      return referenceRecord[ref];
    };
    exports2.getReferenceValue = getReferenceValue;
  }
});

var require_evaluateExpression = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateExpression.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateExpression = void 0;
    var types_1 = require_types6();
    var callFunction_1 = require_callFunction();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getReferenceValue_1 = require_getReferenceValue();
    var evaluateExpression = (obj, keyName, options) => {
      if (typeof obj === "string") {
        return (0, evaluateTemplate_1.evaluateTemplate)(obj, options);
      } else if (obj["fn"]) {
        return (0, callFunction_1.callFunction)(obj, options);
      } else if (obj["ref"]) {
        return (0, getReferenceValue_1.getReferenceValue)(obj, options);
      }
      throw new types_1.EndpointError(`'${keyName}': ${String(obj)} is not a string, function or reference.`);
    };
    exports2.evaluateExpression = evaluateExpression;
  }
});

var require_callFunction = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/callFunction.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.callFunction = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var lib = tslib_1.__importStar(require_lib());
    var evaluateExpression_1 = require_evaluateExpression();
    var callFunction = ({ fn, argv }, options) => {
      const evaluatedArgs = argv.map((arg) => ["boolean", "number"].includes(typeof arg) ? arg : (0, evaluateExpression_1.evaluateExpression)(arg, "arg", options));
      return fn.split(".").reduce((acc, key) => acc[key], lib)(...evaluatedArgs);
    };
    exports2.callFunction = callFunction;
  }
});

var require_evaluateCondition = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateCondition.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateCondition = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types6();
    var callFunction_1 = require_callFunction();
    var evaluateCondition = ({ assign, ...fnArgs }, options) => {
      var _a, _b;
      if (assign && assign in options.referenceRecord) {
        throw new types_1.EndpointError(`'${assign}' is already defined in Reference Record.`);
      }
      const value = (0, callFunction_1.callFunction)(fnArgs, options);
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `evaluateCondition: ${(0, debug_1.toDebugString)(fnArgs)} = ${(0, debug_1.toDebugString)(value)}`);
      return {
        result: value === "" ? true : !!value,
        ...assign != null && { toAssign: { name: assign, value } }
      };
    };
    exports2.evaluateCondition = evaluateCondition;
  }
});

var require_evaluateConditions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateConditions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateConditions = void 0;
    var debug_1 = require_debug();
    var evaluateCondition_1 = require_evaluateCondition();
    var evaluateConditions = (conditions = [], options) => {
      var _a, _b;
      const conditionsReferenceRecord = {};
      for (const condition of conditions) {
        const { result, toAssign } = (0, evaluateCondition_1.evaluateCondition)(condition, {
          ...options,
          referenceRecord: {
            ...options.referenceRecord,
            ...conditionsReferenceRecord
          }
        });
        if (!result) {
          return { result };
        }
        if (toAssign) {
          conditionsReferenceRecord[toAssign.name] = toAssign.value;
          (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `assign: ${toAssign.name} := ${(0, debug_1.toDebugString)(toAssign.value)}`);
        }
      }
      return { result: true, referenceRecord: conditionsReferenceRecord };
    };
    exports2.evaluateConditions = evaluateConditions;
  }
});

var require_getEndpointHeaders = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointHeaders.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointHeaders = void 0;
    var types_1 = require_types6();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointHeaders = (headers, options) => Object.entries(headers).reduce((acc, [headerKey, headerVal]) => ({
      ...acc,
      [headerKey]: headerVal.map((headerValEntry) => {
        const processedExpr = (0, evaluateExpression_1.evaluateExpression)(headerValEntry, "Header value entry", options);
        if (typeof processedExpr !== "string") {
          throw new types_1.EndpointError(`Header '${headerKey}' value '${processedExpr}' is not a string`);
        }
        return processedExpr;
      })
    }), {});
    exports2.getEndpointHeaders = getEndpointHeaders;
  }
});

var require_getEndpointProperty = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperty.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperty = void 0;
    var types_1 = require_types6();
    var evaluateTemplate_1 = require_evaluateTemplate();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointProperty = (property, options) => {
      if (Array.isArray(property)) {
        return property.map((propertyEntry) => (0, exports2.getEndpointProperty)(propertyEntry, options));
      }
      switch (typeof property) {
        case "string":
          return (0, evaluateTemplate_1.evaluateTemplate)(property, options);
        case "object":
          if (property === null) {
            throw new types_1.EndpointError(`Unexpected endpoint property: ${property}`);
          }
          return (0, getEndpointProperties_1.getEndpointProperties)(property, options);
        case "boolean":
          return property;
        default:
          throw new types_1.EndpointError(`Unexpected endpoint property type: ${typeof property}`);
      }
    };
    exports2.getEndpointProperty = getEndpointProperty;
  }
});

var require_getEndpointProperties = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointProperties.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointProperties = void 0;
    var getEndpointProperty_1 = require_getEndpointProperty();
    var getEndpointProperties = (properties, options) => Object.entries(properties).reduce((acc, [propertyKey, propertyVal]) => ({
      ...acc,
      [propertyKey]: (0, getEndpointProperty_1.getEndpointProperty)(propertyVal, options)
    }), {});
    exports2.getEndpointProperties = getEndpointProperties;
  }
});

var require_getEndpointUrl = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/getEndpointUrl.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getEndpointUrl = void 0;
    var types_1 = require_types6();
    var evaluateExpression_1 = require_evaluateExpression();
    var getEndpointUrl = (endpointUrl, options) => {
      const expression = (0, evaluateExpression_1.evaluateExpression)(endpointUrl, "Endpoint URL", options);
      if (typeof expression === "string") {
        try {
          return new URL(expression);
        } catch (error) {
          console.error(`Failed to construct URL with ${expression}`, error);
          throw error;
        }
      }
      throw new types_1.EndpointError(`Endpoint URL must be a string, got ${typeof expression}`);
    };
    exports2.getEndpointUrl = getEndpointUrl;
  }
});

var require_evaluateEndpointRule = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateEndpointRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateEndpointRule = void 0;
    var debug_1 = require_debug();
    var evaluateConditions_1 = require_evaluateConditions();
    var getEndpointHeaders_1 = require_getEndpointHeaders();
    var getEndpointProperties_1 = require_getEndpointProperties();
    var getEndpointUrl_1 = require_getEndpointUrl();
    var evaluateEndpointRule = (endpointRule, options) => {
      var _a, _b;
      const { conditions, endpoint } = endpointRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      const endpointRuleOptions = {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      };
      const { url, properties, headers } = endpoint;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Resolving endpoint from template: ${(0, debug_1.toDebugString)(endpoint)}`);
      return {
        ...headers != void 0 && {
          headers: (0, getEndpointHeaders_1.getEndpointHeaders)(headers, endpointRuleOptions)
        },
        ...properties != void 0 && {
          properties: (0, getEndpointProperties_1.getEndpointProperties)(properties, endpointRuleOptions)
        },
        url: (0, getEndpointUrl_1.getEndpointUrl)(url, endpointRuleOptions)
      };
    };
    exports2.evaluateEndpointRule = evaluateEndpointRule;
  }
});

var require_evaluateErrorRule = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateErrorRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateErrorRule = void 0;
    var types_1 = require_types6();
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateExpression_1 = require_evaluateExpression();
    var evaluateErrorRule = (errorRule, options) => {
      const { conditions, error } = errorRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      throw new types_1.EndpointError((0, evaluateExpression_1.evaluateExpression)(error, "Error", {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      }));
    };
    exports2.evaluateErrorRule = evaluateErrorRule;
  }
});

var require_evaluateTreeRule = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateTreeRule.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateTreeRule = void 0;
    var evaluateConditions_1 = require_evaluateConditions();
    var evaluateRules_1 = require_evaluateRules();
    var evaluateTreeRule = (treeRule, options) => {
      const { conditions, rules } = treeRule;
      const { result, referenceRecord } = (0, evaluateConditions_1.evaluateConditions)(conditions, options);
      if (!result) {
        return;
      }
      return (0, evaluateRules_1.evaluateRules)(rules, {
        ...options,
        referenceRecord: { ...options.referenceRecord, ...referenceRecord }
      });
    };
    exports2.evaluateTreeRule = evaluateTreeRule;
  }
});

var require_evaluateRules = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/evaluateRules.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.evaluateRules = void 0;
    var types_1 = require_types6();
    var evaluateEndpointRule_1 = require_evaluateEndpointRule();
    var evaluateErrorRule_1 = require_evaluateErrorRule();
    var evaluateTreeRule_1 = require_evaluateTreeRule();
    var evaluateRules = (rules, options) => {
      for (const rule of rules) {
        if (rule.type === "endpoint") {
          const endpointOrUndefined = (0, evaluateEndpointRule_1.evaluateEndpointRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else if (rule.type === "error") {
          (0, evaluateErrorRule_1.evaluateErrorRule)(rule, options);
        } else if (rule.type === "tree") {
          const endpointOrUndefined = (0, evaluateTreeRule_1.evaluateTreeRule)(rule, options);
          if (endpointOrUndefined) {
            return endpointOrUndefined;
          }
        } else {
          throw new types_1.EndpointError(`Unknown endpoint rule: ${rule}`);
        }
      }
      throw new types_1.EndpointError(`Rules evaluation failed`);
    };
    exports2.evaluateRules = evaluateRules;
  }
});

var require_utils = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_evaluateRules(), exports2);
  }
});

var require_resolveEndpoint = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/resolveEndpoint.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveEndpoint = void 0;
    var debug_1 = require_debug();
    var types_1 = require_types6();
    var utils_1 = require_utils();
    var resolveEndpoint = (ruleSetObject, options) => {
      var _a, _b, _c, _d, _e, _f;
      const { endpointParams, logger } = options;
      const { parameters, rules } = ruleSetObject;
      (_b = (_a = options.logger) === null || _a === void 0 ? void 0 : _a.debug) === null || _b === void 0 ? void 0 : _b.call(_a, debug_1.debugId, `Initial EndpointParams: ${(0, debug_1.toDebugString)(endpointParams)}`);
      const paramsWithDefault = Object.entries(parameters).filter(([, v]) => v.default != null).map(([k, v]) => [k, v.default]);
      if (paramsWithDefault.length > 0) {
        for (const [paramKey, paramDefaultValue] of paramsWithDefault) {
          endpointParams[paramKey] = (_c = endpointParams[paramKey]) !== null && _c !== void 0 ? _c : paramDefaultValue;
        }
      }
      const requiredParams = Object.entries(parameters).filter(([, v]) => v.required).map(([k]) => k);
      for (const requiredParam of requiredParams) {
        if (endpointParams[requiredParam] == null) {
          throw new types_1.EndpointError(`Missing required parameter: '${requiredParam}'`);
        }
      }
      const endpoint = (0, utils_1.evaluateRules)(rules, { endpointParams, logger, referenceRecord: {} });
      if ((_d = options.endpointParams) === null || _d === void 0 ? void 0 : _d.Endpoint) {
        try {
          const givenEndpoint = new URL(options.endpointParams.Endpoint);
          const { protocol, port } = givenEndpoint;
          endpoint.url.protocol = protocol;
          endpoint.url.port = port;
        } catch (e) {
        }
      }
      (_f = (_e = options.logger) === null || _e === void 0 ? void 0 : _e.debug) === null || _f === void 0 ? void 0 : _f.call(_e, debug_1.debugId, `Resolved endpoint: ${(0, debug_1.toDebugString)(endpoint)}`);
      return endpoint;
    };
    exports2.resolveEndpoint = resolveEndpoint;
  }
});

var require_dist_cjs50 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-endpoints/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_partition(), exports2);
    tslib_1.__exportStar(require_resolveEndpoint(), exports2);
    tslib_1.__exportStar(require_types6(), exports2);
  }
});

var require_ruleset = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://portal.sso.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs50();
    var ruleset_1 = require_ruleset();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs48();
    var endpointResolver_1 = require_endpointResolver();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "SSO",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_constants8 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.IMDS_REGION_PATH = exports2.DEFAULTS_MODE_OPTIONS = exports2.ENV_IMDS_DISABLED = exports2.AWS_DEFAULT_REGION_ENV = exports2.AWS_REGION_ENV = exports2.AWS_EXECUTION_ENV = void 0;
    exports2.AWS_EXECUTION_ENV = "AWS_EXECUTION_ENV";
    exports2.AWS_REGION_ENV = "AWS_REGION";
    exports2.AWS_DEFAULT_REGION_ENV = "AWS_DEFAULT_REGION";
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    exports2.DEFAULTS_MODE_OPTIONS = ["in-region", "cross-region", "mobile", "standard", "legacy"];
    exports2.IMDS_REGION_PATH = "/latest/meta-data/placement/region";
  }
});

var require_defaultsModeConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/defaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = void 0;
    var AWS_DEFAULTS_MODE_ENV = "AWS_DEFAULTS_MODE";
    var AWS_DEFAULTS_MODE_CONFIG = "defaults_mode";
    exports2.NODE_DEFAULTS_MODE_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => {
        return env[AWS_DEFAULTS_MODE_ENV];
      },
      configFileSelector: (profile) => {
        return profile[AWS_DEFAULTS_MODE_CONFIG];
      },
      default: "legacy"
    };
  }
});

var require_resolveDefaultsModeConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/resolveDefaultsModeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveDefaultsModeConfig = void 0;
    var config_resolver_1 = require_dist_cjs20();
    var credential_provider_imds_1 = require_dist_cjs40();
    var node_config_provider_1 = require_dist_cjs39();
    var property_provider_1 = require_dist_cjs30();
    var constants_1 = require_constants8();
    var defaultsModeConfig_1 = require_defaultsModeConfig();
    var resolveDefaultsModeConfig = ({ region = (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS), defaultsMode = (0, node_config_provider_1.loadConfig)(defaultsModeConfig_1.NODE_DEFAULTS_MODE_CONFIG_OPTIONS) } = {}) => (0, property_provider_1.memoize)(async () => {
      const mode = typeof defaultsMode === "function" ? await defaultsMode() : defaultsMode;
      switch (mode === null || mode === void 0 ? void 0 : mode.toLowerCase()) {
        case "auto":
          return resolveNodeDefaultsModeAuto(region);
        case "in-region":
        case "cross-region":
        case "mobile":
        case "standard":
        case "legacy":
          return Promise.resolve(mode === null || mode === void 0 ? void 0 : mode.toLocaleLowerCase());
        case void 0:
          return Promise.resolve("legacy");
        default:
          throw new Error(`Invalid parameter for "defaultsMode", expect ${constants_1.DEFAULTS_MODE_OPTIONS.join(", ")}, got ${mode}`);
      }
    });
    exports2.resolveDefaultsModeConfig = resolveDefaultsModeConfig;
    var resolveNodeDefaultsModeAuto = async (clientRegion) => {
      if (clientRegion) {
        const resolvedRegion = typeof clientRegion === "function" ? await clientRegion() : clientRegion;
        const inferredRegion = await inferPhysicalRegion();
        if (!inferredRegion) {
          return "standard";
        }
        if (resolvedRegion === inferredRegion) {
          return "in-region";
        } else {
          return "cross-region";
        }
      }
      return "standard";
    };
    var inferPhysicalRegion = async () => {
      var _a;
      if (process.env[constants_1.AWS_EXECUTION_ENV] && (process.env[constants_1.AWS_REGION_ENV] || process.env[constants_1.AWS_DEFAULT_REGION_ENV])) {
        return (_a = process.env[constants_1.AWS_REGION_ENV]) !== null && _a !== void 0 ? _a : process.env[constants_1.AWS_DEFAULT_REGION_ENV];
      }
      if (!process.env[constants_1.ENV_IMDS_DISABLED]) {
        try {
          const endpoint = await (0, credential_provider_imds_1.getInstanceMetadataEndpoint)();
          return (await (0, credential_provider_imds_1.httpRequest)({ ...endpoint, path: constants_1.IMDS_REGION_PATH })).toString();
        } catch (e) {
        }
      }
    };
  }
});

var require_dist_cjs51 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-defaults-mode-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_resolveDefaultsModeConfig(), exports2);
  }
});

var require_runtimeConfig = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package3());
    var config_resolver_1 = require_dist_cjs20();
    var hash_node_1 = require_dist_cjs42();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs44();
    var util_body_length_node_1 = require_dist_cjs45();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs46();
    var util_utf8_node_1 = require_dist_cjs47();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs51();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_SSOClient = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSOClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOClient = void 0;
    var config_resolver_1 = require_dist_cjs20();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs24();
    var middleware_logger_1 = require_dist_cjs25();
    var middleware_recursion_detection_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var middleware_user_agent_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters3();
    var runtimeConfig_1 = require_runtimeConfig();
    var SSOClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOClient = SSOClient;
  }
});

var require_SSO = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/SSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSO = void 0;
    var GetRoleCredentialsCommand_1 = require_GetRoleCredentialsCommand();
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var LogoutCommand_1 = require_LogoutCommand();
    var SSOClient_1 = require_SSOClient();
    var SSO = class extends SSOClient_1.SSOClient {
      getRoleCredentials(args, optionsOrCb, cb) {
        const command = new GetRoleCredentialsCommand_1.GetRoleCredentialsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccountRoles(args, optionsOrCb, cb) {
        const command = new ListAccountRolesCommand_1.ListAccountRolesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listAccounts(args, optionsOrCb, cb) {
        const command = new ListAccountsCommand_1.ListAccountsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      logout(args, optionsOrCb, cb) {
        const command = new LogoutCommand_1.LogoutCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSO = SSO;
  }
});

var require_commands = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_GetRoleCredentialsCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesCommand(), exports2);
    tslib_1.__exportStar(require_ListAccountsCommand(), exports2);
    tslib_1.__exportStar(require_LogoutCommand(), exports2);
  }
});

var require_models = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_03(), exports2);
  }
});

var require_Interfaces = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListAccountRolesPaginator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountRolesPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccountRoles = void 0;
    var ListAccountRolesCommand_1 = require_ListAccountRolesCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountRolesCommand_1.ListAccountRolesCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccountRoles(input, ...args);
    };
    async function* paginateListAccountRoles(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccountRoles = paginateListAccountRoles;
  }
});

var require_ListAccountsPaginator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/ListAccountsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListAccounts = void 0;
    var ListAccountsCommand_1 = require_ListAccountsCommand();
    var SSO_1 = require_SSO();
    var SSOClient_1 = require_SSOClient();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListAccountsCommand_1.ListAccountsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listAccounts(input, ...args);
    };
    async function* paginateListAccounts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.nextToken = token;
        input["maxResults"] = config.pageSize;
        if (config.client instanceof SSO_1.SSO) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof SSOClient_1.SSOClient) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected SSO | SSOClient");
        }
        yield page;
        const prevToken = token;
        token = page.nextToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListAccounts = paginateListAccounts;
  }
});

var require_pagination2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces(), exports2);
    tslib_1.__exportStar(require_ListAccountRolesPaginator(), exports2);
    tslib_1.__exportStar(require_ListAccountsPaginator(), exports2);
  }
});

var require_dist_cjs52 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSO(), exports2);
    tslib_1.__exportStar(require_SSOClient(), exports2);
    tslib_1.__exportStar(require_commands(), exports2);
    tslib_1.__exportStar(require_models(), exports2);
    tslib_1.__exportStar(require_pagination2(), exports2);
    var SSOServiceException_1 = require_SSOServiceException();
    Object.defineProperty(exports2, "SSOServiceException", { enumerable: true, get: function() {
      return SSOServiceException_1.SSOServiceException;
    } });
  }
});

var require_constants9 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/constants.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.REFRESH_MESSAGE = exports2.EXPIRE_WINDOW_MS = void 0;
    exports2.EXPIRE_WINDOW_MS = 5 * 60 * 1e3;
    exports2.REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;
  }
});

var require_SSOOIDCServiceException = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/SSOOIDCServiceException.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCServiceException = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var SSOOIDCServiceException = class extends smithy_client_1.ServiceException {
      constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SSOOIDCServiceException.prototype);
      }
    };
    exports2.SSOOIDCServiceException = SSOOIDCServiceException;
  }
});

var require_models_04 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/models_0.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartDeviceAuthorizationResponseFilterSensitiveLog = exports2.StartDeviceAuthorizationRequestFilterSensitiveLog = exports2.RegisterClientResponseFilterSensitiveLog = exports2.RegisterClientRequestFilterSensitiveLog = exports2.CreateTokenResponseFilterSensitiveLog = exports2.CreateTokenRequestFilterSensitiveLog = exports2.InvalidClientMetadataException = exports2.UnsupportedGrantTypeException = exports2.UnauthorizedClientException = exports2.SlowDownException = exports2.InvalidScopeException = exports2.InvalidRequestException = exports2.InvalidGrantException = exports2.InvalidClientException = exports2.InternalServerException = exports2.ExpiredTokenException = exports2.AuthorizationPendingException = exports2.AccessDeniedException = void 0;
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var AccessDeniedException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AccessDeniedException",
          $fault: "client",
          ...opts
        });
        this.name = "AccessDeniedException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AccessDeniedException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AccessDeniedException = AccessDeniedException;
    var AuthorizationPendingException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "AuthorizationPendingException",
          $fault: "client",
          ...opts
        });
        this.name = "AuthorizationPendingException";
        this.$fault = "client";
        Object.setPrototypeOf(this, AuthorizationPendingException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.AuthorizationPendingException = AuthorizationPendingException;
    var ExpiredTokenException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "ExpiredTokenException",
          $fault: "client",
          ...opts
        });
        this.name = "ExpiredTokenException";
        this.$fault = "client";
        Object.setPrototypeOf(this, ExpiredTokenException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.ExpiredTokenException = ExpiredTokenException;
    var InternalServerException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InternalServerException",
          $fault: "server",
          ...opts
        });
        this.name = "InternalServerException";
        this.$fault = "server";
        Object.setPrototypeOf(this, InternalServerException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InternalServerException = InternalServerException;
    var InvalidClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientException = InvalidClientException;
    var InvalidGrantException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidGrantException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidGrantException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidGrantException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidGrantException = InvalidGrantException;
    var InvalidRequestException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidRequestException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidRequestException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidRequestException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidRequestException = InvalidRequestException;
    var InvalidScopeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidScopeException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidScopeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidScopeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidScopeException = InvalidScopeException;
    var SlowDownException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "SlowDownException",
          $fault: "client",
          ...opts
        });
        this.name = "SlowDownException";
        this.$fault = "client";
        Object.setPrototypeOf(this, SlowDownException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.SlowDownException = SlowDownException;
    var UnauthorizedClientException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnauthorizedClientException",
          $fault: "client",
          ...opts
        });
        this.name = "UnauthorizedClientException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnauthorizedClientException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnauthorizedClientException = UnauthorizedClientException;
    var UnsupportedGrantTypeException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "UnsupportedGrantTypeException",
          $fault: "client",
          ...opts
        });
        this.name = "UnsupportedGrantTypeException";
        this.$fault = "client";
        Object.setPrototypeOf(this, UnsupportedGrantTypeException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.UnsupportedGrantTypeException = UnsupportedGrantTypeException;
    var InvalidClientMetadataException = class extends SSOOIDCServiceException_1.SSOOIDCServiceException {
      constructor(opts) {
        super({
          name: "InvalidClientMetadataException",
          $fault: "client",
          ...opts
        });
        this.name = "InvalidClientMetadataException";
        this.$fault = "client";
        Object.setPrototypeOf(this, InvalidClientMetadataException.prototype);
        this.error = opts.error;
        this.error_description = opts.error_description;
      }
    };
    exports2.InvalidClientMetadataException = InvalidClientMetadataException;
    var CreateTokenRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTokenRequestFilterSensitiveLog = CreateTokenRequestFilterSensitiveLog;
    var CreateTokenResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.CreateTokenResponseFilterSensitiveLog = CreateTokenResponseFilterSensitiveLog;
    var RegisterClientRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterClientRequestFilterSensitiveLog = RegisterClientRequestFilterSensitiveLog;
    var RegisterClientResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.RegisterClientResponseFilterSensitiveLog = RegisterClientResponseFilterSensitiveLog;
    var StartDeviceAuthorizationRequestFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StartDeviceAuthorizationRequestFilterSensitiveLog = StartDeviceAuthorizationRequestFilterSensitiveLog;
    var StartDeviceAuthorizationResponseFilterSensitiveLog = (obj) => ({
      ...obj
    });
    exports2.StartDeviceAuthorizationResponseFilterSensitiveLog = StartDeviceAuthorizationResponseFilterSensitiveLog;
  }
});

var require_Aws_restJson12 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/protocols/Aws_restJson1.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.deserializeAws_restJson1StartDeviceAuthorizationCommand = exports2.deserializeAws_restJson1RegisterClientCommand = exports2.deserializeAws_restJson1CreateTokenCommand = exports2.serializeAws_restJson1StartDeviceAuthorizationCommand = exports2.serializeAws_restJson1RegisterClientCommand = exports2.serializeAws_restJson1CreateTokenCommand = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    var serializeAws_restJson1CreateTokenCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/token`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.code != null && { code: input.code },
        ...input.deviceCode != null && { deviceCode: input.deviceCode },
        ...input.grantType != null && { grantType: input.grantType },
        ...input.redirectUri != null && { redirectUri: input.redirectUri },
        ...input.refreshToken != null && { refreshToken: input.refreshToken },
        ...input.scope != null && { scope: serializeAws_restJson1Scopes(input.scope, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1CreateTokenCommand = serializeAws_restJson1CreateTokenCommand;
    var serializeAws_restJson1RegisterClientCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/client/register`;
      let body;
      body = JSON.stringify({
        ...input.clientName != null && { clientName: input.clientName },
        ...input.clientType != null && { clientType: input.clientType },
        ...input.scopes != null && { scopes: serializeAws_restJson1Scopes(input.scopes, context) }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1RegisterClientCommand = serializeAws_restJson1RegisterClientCommand;
    var serializeAws_restJson1StartDeviceAuthorizationCommand = async (input, context) => {
      const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
      const headers = {
        "content-type": "application/json"
      };
      const resolvedPath = `${(basePath == null ? void 0 : basePath.endsWith("/")) ? basePath.slice(0, -1) : basePath || ""}/device_authorization`;
      let body;
      body = JSON.stringify({
        ...input.clientId != null && { clientId: input.clientId },
        ...input.clientSecret != null && { clientSecret: input.clientSecret },
        ...input.startUrl != null && { startUrl: input.startUrl }
      });
      return new protocol_http_1.HttpRequest({
        protocol,
        hostname,
        port,
        method: "POST",
        headers,
        path: resolvedPath,
        body
      });
    };
    exports2.serializeAws_restJson1StartDeviceAuthorizationCommand = serializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1CreateTokenCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1CreateTokenCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.accessToken != null) {
        contents.accessToken = (0, smithy_client_1.expectString)(data.accessToken);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.idToken != null) {
        contents.idToken = (0, smithy_client_1.expectString)(data.idToken);
      }
      if (data.refreshToken != null) {
        contents.refreshToken = (0, smithy_client_1.expectString)(data.refreshToken);
      }
      if (data.tokenType != null) {
        contents.tokenType = (0, smithy_client_1.expectString)(data.tokenType);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1CreateTokenCommand = deserializeAws_restJson1CreateTokenCommand;
    var deserializeAws_restJson1CreateTokenCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "AccessDeniedException":
        case "com.amazonaws.ssooidc#AccessDeniedException":
          throw await deserializeAws_restJson1AccessDeniedExceptionResponse(parsedOutput, context);
        case "AuthorizationPendingException":
        case "com.amazonaws.ssooidc#AuthorizationPendingException":
          throw await deserializeAws_restJson1AuthorizationPendingExceptionResponse(parsedOutput, context);
        case "ExpiredTokenException":
        case "com.amazonaws.ssooidc#ExpiredTokenException":
          throw await deserializeAws_restJson1ExpiredTokenExceptionResponse(parsedOutput, context);
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidGrantException":
        case "com.amazonaws.ssooidc#InvalidGrantException":
          throw await deserializeAws_restJson1InvalidGrantExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        case "UnsupportedGrantTypeException":
        case "com.amazonaws.ssooidc#UnsupportedGrantTypeException":
          throw await deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1RegisterClientCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1RegisterClientCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.authorizationEndpoint != null) {
        contents.authorizationEndpoint = (0, smithy_client_1.expectString)(data.authorizationEndpoint);
      }
      if (data.clientId != null) {
        contents.clientId = (0, smithy_client_1.expectString)(data.clientId);
      }
      if (data.clientIdIssuedAt != null) {
        contents.clientIdIssuedAt = (0, smithy_client_1.expectLong)(data.clientIdIssuedAt);
      }
      if (data.clientSecret != null) {
        contents.clientSecret = (0, smithy_client_1.expectString)(data.clientSecret);
      }
      if (data.clientSecretExpiresAt != null) {
        contents.clientSecretExpiresAt = (0, smithy_client_1.expectLong)(data.clientSecretExpiresAt);
      }
      if (data.tokenEndpoint != null) {
        contents.tokenEndpoint = (0, smithy_client_1.expectString)(data.tokenEndpoint);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1RegisterClientCommand = deserializeAws_restJson1RegisterClientCommand;
    var deserializeAws_restJson1RegisterClientCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientMetadataException":
        case "com.amazonaws.ssooidc#InvalidClientMetadataException":
          throw await deserializeAws_restJson1InvalidClientMetadataExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "InvalidScopeException":
        case "com.amazonaws.ssooidc#InvalidScopeException":
          throw await deserializeAws_restJson1InvalidScopeExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var deserializeAws_restJson1StartDeviceAuthorizationCommand = async (output, context) => {
      if (output.statusCode !== 200 && output.statusCode >= 300) {
        return deserializeAws_restJson1StartDeviceAuthorizationCommandError(output, context);
      }
      const contents = map({
        $metadata: deserializeMetadata(output)
      });
      const data = (0, smithy_client_1.expectNonNull)((0, smithy_client_1.expectObject)(await parseBody(output.body, context)), "body");
      if (data.deviceCode != null) {
        contents.deviceCode = (0, smithy_client_1.expectString)(data.deviceCode);
      }
      if (data.expiresIn != null) {
        contents.expiresIn = (0, smithy_client_1.expectInt32)(data.expiresIn);
      }
      if (data.interval != null) {
        contents.interval = (0, smithy_client_1.expectInt32)(data.interval);
      }
      if (data.userCode != null) {
        contents.userCode = (0, smithy_client_1.expectString)(data.userCode);
      }
      if (data.verificationUri != null) {
        contents.verificationUri = (0, smithy_client_1.expectString)(data.verificationUri);
      }
      if (data.verificationUriComplete != null) {
        contents.verificationUriComplete = (0, smithy_client_1.expectString)(data.verificationUriComplete);
      }
      return contents;
    };
    exports2.deserializeAws_restJson1StartDeviceAuthorizationCommand = deserializeAws_restJson1StartDeviceAuthorizationCommand;
    var deserializeAws_restJson1StartDeviceAuthorizationCommandError = async (output, context) => {
      const parsedOutput = {
        ...output,
        body: await parseErrorBody(output.body, context)
      };
      const errorCode = loadRestJsonErrorCode(output, parsedOutput.body);
      switch (errorCode) {
        case "InternalServerException":
        case "com.amazonaws.ssooidc#InternalServerException":
          throw await deserializeAws_restJson1InternalServerExceptionResponse(parsedOutput, context);
        case "InvalidClientException":
        case "com.amazonaws.ssooidc#InvalidClientException":
          throw await deserializeAws_restJson1InvalidClientExceptionResponse(parsedOutput, context);
        case "InvalidRequestException":
        case "com.amazonaws.ssooidc#InvalidRequestException":
          throw await deserializeAws_restJson1InvalidRequestExceptionResponse(parsedOutput, context);
        case "SlowDownException":
        case "com.amazonaws.ssooidc#SlowDownException":
          throw await deserializeAws_restJson1SlowDownExceptionResponse(parsedOutput, context);
        case "UnauthorizedClientException":
        case "com.amazonaws.ssooidc#UnauthorizedClientException":
          throw await deserializeAws_restJson1UnauthorizedClientExceptionResponse(parsedOutput, context);
        default:
          const parsedBody = parsedOutput.body;
          (0, smithy_client_1.throwDefaultError)({
            output,
            parsedBody,
            exceptionCtor: SSOOIDCServiceException_1.SSOOIDCServiceException,
            errorCode
          });
      }
    };
    var map = smithy_client_1.map;
    var deserializeAws_restJson1AccessDeniedExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AccessDeniedException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1AuthorizationPendingExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.AuthorizationPendingException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1ExpiredTokenExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.ExpiredTokenException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InternalServerExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InternalServerException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidClientMetadataExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidClientMetadataException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidGrantExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidGrantException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidRequestExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidRequestException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1InvalidScopeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.InvalidScopeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1SlowDownExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.SlowDownException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnauthorizedClientExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnauthorizedClientException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var deserializeAws_restJson1UnsupportedGrantTypeExceptionResponse = async (parsedOutput, context) => {
      const contents = map({});
      const data = parsedOutput.body;
      if (data.error != null) {
        contents.error = (0, smithy_client_1.expectString)(data.error);
      }
      if (data.error_description != null) {
        contents.error_description = (0, smithy_client_1.expectString)(data.error_description);
      }
      const exception = new models_0_1.UnsupportedGrantTypeException({
        $metadata: deserializeMetadata(parsedOutput),
        ...contents
      });
      return (0, smithy_client_1.decorateServiceException)(exception, parsedOutput.body);
    };
    var serializeAws_restJson1Scopes = (input, context) => {
      return input.filter((e) => e != null).map((entry) => {
        return entry;
      });
    };
    var deserializeMetadata = (output) => ({
      httpStatusCode: output.statusCode,
      requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
      extendedRequestId: output.headers["x-amz-id-2"],
      cfId: output.headers["x-amz-cf-id"]
    });
    var collectBody = (streamBody = new Uint8Array(), context) => {
      if (streamBody instanceof Uint8Array) {
        return Promise.resolve(streamBody);
      }
      return context.streamCollector(streamBody) || Promise.resolve(new Uint8Array());
    };
    var collectBodyString = (streamBody, context) => collectBody(streamBody, context).then((body) => context.utf8Encoder(body));
    var parseBody = (streamBody, context) => collectBodyString(streamBody, context).then((encoded) => {
      if (encoded.length) {
        return JSON.parse(encoded);
      }
      return {};
    });
    var parseErrorBody = async (errorBody, context) => {
      const value = await parseBody(errorBody, context);
      value.message = value.message ?? value.Message;
      return value;
    };
    var loadRestJsonErrorCode = (output, data) => {
      const findKey = (object, key) => Object.keys(object).find((k) => k.toLowerCase() === key.toLowerCase());
      const sanitizeErrorCode = (rawValue) => {
        let cleanValue = rawValue;
        if (typeof cleanValue === "number") {
          cleanValue = cleanValue.toString();
        }
        if (cleanValue.indexOf(",") >= 0) {
          cleanValue = cleanValue.split(",")[0];
        }
        if (cleanValue.indexOf(":") >= 0) {
          cleanValue = cleanValue.split(":")[0];
        }
        if (cleanValue.indexOf("#") >= 0) {
          cleanValue = cleanValue.split("#")[1];
        }
        return cleanValue;
      };
      const headerKey = findKey(output.headers, "x-amzn-errortype");
      if (headerKey !== void 0) {
        return sanitizeErrorCode(output.headers[headerKey]);
      }
      if (data.code !== void 0) {
        return sanitizeErrorCode(data.code);
      }
      if (data["__type"] !== void 0) {
        return sanitizeErrorCode(data["__type"]);
      }
    };
  }
});

var require_CreateTokenCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/CreateTokenCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.CreateTokenCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var CreateTokenCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, CreateTokenCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "CreateTokenCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.CreateTokenRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.CreateTokenResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1CreateTokenCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1CreateTokenCommand)(output, context);
      }
    };
    exports2.CreateTokenCommand = CreateTokenCommand;
  }
});

var require_RegisterClientCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/RegisterClientCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.RegisterClientCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var RegisterClientCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, RegisterClientCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "RegisterClientCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.RegisterClientRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.RegisterClientResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1RegisterClientCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1RegisterClientCommand)(output, context);
      }
    };
    exports2.RegisterClientCommand = RegisterClientCommand;
  }
});

var require_StartDeviceAuthorizationCommand = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/StartDeviceAuthorizationCommand.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.StartDeviceAuthorizationCommand = void 0;
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_serde_1 = require_dist_cjs3();
    var smithy_client_1 = require_dist_cjs7();
    var models_0_1 = require_models_04();
    var Aws_restJson1_1 = require_Aws_restJson12();
    var StartDeviceAuthorizationCommand = class extends smithy_client_1.Command {
      constructor(input) {
        super();
        this.input = input;
      }
      static getEndpointParameterInstructions() {
        return {
          UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
          Endpoint: { type: "builtInParams", name: "endpoint" },
          Region: { type: "builtInParams", name: "region" },
          UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" }
        };
      }
      resolveMiddleware(clientStack, configuration, options) {
        this.middlewareStack.use((0, middleware_serde_1.getSerdePlugin)(configuration, this.serialize, this.deserialize));
        this.middlewareStack.use((0, middleware_endpoint_1.getEndpointPlugin)(configuration, StartDeviceAuthorizationCommand.getEndpointParameterInstructions()));
        const stack = clientStack.concat(this.middlewareStack);
        const { logger } = configuration;
        const clientName = "SSOOIDCClient";
        const commandName = "StartDeviceAuthorizationCommand";
        const handlerExecutionContext = {
          logger,
          clientName,
          commandName,
          inputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationRequestFilterSensitiveLog,
          outputFilterSensitiveLog: models_0_1.StartDeviceAuthorizationResponseFilterSensitiveLog
        };
        const { requestHandler } = configuration;
        return stack.resolve((request) => requestHandler.handle(request.request, options || {}), handlerExecutionContext);
      }
      serialize(input, context) {
        return (0, Aws_restJson1_1.serializeAws_restJson1StartDeviceAuthorizationCommand)(input, context);
      }
      deserialize(output, context) {
        return (0, Aws_restJson1_1.deserializeAws_restJson1StartDeviceAuthorizationCommand)(output, context);
      }
    };
    exports2.StartDeviceAuthorizationCommand = StartDeviceAuthorizationCommand;
  }
});

var require_EndpointParameters4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/EndpointParameters.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveClientEndpointParameters = void 0;
    var resolveClientEndpointParameters = (options) => {
      return {
        ...options,
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "awsssooidc"
      };
    };
    exports2.resolveClientEndpointParameters = resolveClientEndpointParameters;
  }
});

var require_package4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/package.json"(exports2, module2) {
    module2.exports = {
      name: "@aws-sdk/client-sso-oidc",
      description: "AWS SDK for JavaScript Sso Oidc Client for Node.js, Browser and React Native",
      version: "3.256.0",
      scripts: {
        build: "concurrently 'yarn:build:cjs' 'yarn:build:es' 'yarn:build:types'",
        "build:cjs": "tsc -p tsconfig.cjs.json",
        "build:docs": "typedoc",
        "build:es": "tsc -p tsconfig.es.json",
        "build:include:deps": "lerna run --scope $npm_package_name --include-dependencies build",
        "build:types": "tsc -p tsconfig.types.json",
        "build:types:downlevel": "downlevel-dts dist-types dist-types/ts3.4",
        clean: "rimraf ./dist-* && rimraf *.tsbuildinfo",
        "generate:client": "node ../../scripts/generate-clients/single-service --solo sso-oidc"
      },
      main: "./dist-cjs/index.js",
      types: "./dist-types/index.d.ts",
      module: "./dist-es/index.js",
      sideEffects: false,
      dependencies: {
        "@aws-crypto/sha256-browser": "3.0.0",
        "@aws-crypto/sha256-js": "3.0.0",
        "@aws-sdk/config-resolver": "3.254.0",
        "@aws-sdk/fetch-http-handler": "3.254.0",
        "@aws-sdk/hash-node": "3.254.0",
        "@aws-sdk/invalid-dependency": "3.254.0",
        "@aws-sdk/middleware-content-length": "3.254.0",
        "@aws-sdk/middleware-endpoint": "3.254.0",
        "@aws-sdk/middleware-host-header": "3.254.0",
        "@aws-sdk/middleware-logger": "3.254.0",
        "@aws-sdk/middleware-recursion-detection": "3.254.0",
        "@aws-sdk/middleware-retry": "3.254.0",
        "@aws-sdk/middleware-serde": "3.254.0",
        "@aws-sdk/middleware-stack": "3.254.0",
        "@aws-sdk/middleware-user-agent": "3.254.0",
        "@aws-sdk/node-config-provider": "3.254.0",
        "@aws-sdk/node-http-handler": "3.254.0",
        "@aws-sdk/protocol-http": "3.254.0",
        "@aws-sdk/smithy-client": "3.254.0",
        "@aws-sdk/types": "3.254.0",
        "@aws-sdk/url-parser": "3.254.0",
        "@aws-sdk/util-base64": "3.208.0",
        "@aws-sdk/util-body-length-browser": "3.188.0",
        "@aws-sdk/util-body-length-node": "3.208.0",
        "@aws-sdk/util-defaults-mode-browser": "3.254.0",
        "@aws-sdk/util-defaults-mode-node": "3.254.0",
        "@aws-sdk/util-endpoints": "3.254.0",
        "@aws-sdk/util-retry": "3.254.0",
        "@aws-sdk/util-user-agent-browser": "3.254.0",
        "@aws-sdk/util-user-agent-node": "3.254.0",
        "@aws-sdk/util-utf8-browser": "3.188.0",
        "@aws-sdk/util-utf8-node": "3.208.0",
        tslib: "^2.3.1"
      },
      devDependencies: {
        "@aws-sdk/service-client-documentation-generator": "3.208.0",
        "@tsconfig/node14": "1.0.3",
        "@types/node": "^14.14.31",
        concurrently: "7.0.0",
        "downlevel-dts": "0.10.1",
        rimraf: "3.0.2",
        typedoc: "0.19.2",
        typescript: "~4.6.2"
      },
      overrides: {
        typedoc: {
          typescript: "~4.6.2"
        }
      },
      engines: {
        node: ">=14.0.0"
      },
      typesVersions: {
        "<4.0": {
          "dist-types/*": [
            "dist-types/ts3.4/*"
          ]
        }
      },
      files: [
        "dist-*"
      ],
      author: {
        name: "AWS SDK for JavaScript Team",
        url: "https://aws.amazon.com/javascript/"
      },
      license: "Apache-2.0",
      browser: {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.browser"
      },
      "react-native": {
        "./dist-es/runtimeConfig": "./dist-es/runtimeConfig.native"
      },
      homepage: "https://github.com/aws/aws-sdk-js-v3/tree/main/clients/client-sso-oidc",
      repository: {
        type: "git",
        url: "https://github.com/aws/aws-sdk-js-v3.git",
        directory: "clients/client-sso-oidc"
      }
    };
  }
});

var require_ruleset2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var p = "required";
    var q = "fn";
    var r = "argv";
    var s = "ref";
    var a = "PartitionResult";
    var b = "tree";
    var c = "error";
    var d = "endpoint";
    var e = { [p]: false, "type": "String" };
    var f = { [p]: true, "default": false, "type": "Boolean" };
    var g = { [s]: "Endpoint" };
    var h = { [q]: "booleanEquals", [r]: [{ [s]: "UseFIPS" }, true] };
    var i = { [q]: "booleanEquals", [r]: [{ [s]: "UseDualStack" }, true] };
    var j = {};
    var k = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsFIPS"] }] };
    var l = { [q]: "booleanEquals", [r]: [true, { [q]: "getAttr", [r]: [{ [s]: a }, "supportsDualStack"] }] };
    var m = [g];
    var n = [h];
    var o = [i];
    var _data = { version: "1.0", parameters: { Region: e, UseDualStack: f, UseFIPS: f, Endpoint: e }, rules: [{ conditions: [{ [q]: "aws.partition", [r]: [{ [s]: "Region" }], assign: a }], type: b, rules: [{ conditions: [{ [q]: "isSet", [r]: m }, { [q]: "parseURL", [r]: m, assign: "url" }], type: b, rules: [{ conditions: n, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: c }, { type: b, rules: [{ conditions: o, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: c }, { endpoint: { url: g, properties: j, headers: j }, type: d }] }] }, { conditions: [h, i], type: b, rules: [{ conditions: [k, l], type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: c }] }, { conditions: n, type: b, rules: [{ conditions: [k], type: b, rules: [{ type: b, rules: [{ endpoint: { url: "https://oidc-fips.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: c }] }, { conditions: o, type: b, rules: [{ conditions: [l], type: b, rules: [{ endpoint: { url: "https://oidc.{Region}.{PartitionResult#dualStackDnsSuffix}", properties: j, headers: j }, type: d }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: c }] }, { endpoint: { url: "https://oidc.{Region}.{PartitionResult#dnsSuffix}", properties: j, headers: j }, type: d }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs50();
    var ruleset_1 = require_ruleset2();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs48();
    var endpointResolver_1 = require_endpointResolver2();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2019-06-10",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "SSO OIDC",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package4());
    var config_resolver_1 = require_dist_cjs20();
    var hash_node_1 = require_dist_cjs42();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs44();
    var util_body_length_node_1 = require_dist_cjs45();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs46();
    var util_utf8_node_1 = require_dist_cjs47();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared2();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs51();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_SSOOIDCClient = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDCClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCClient = void 0;
    var config_resolver_1 = require_dist_cjs20();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs24();
    var middleware_logger_1 = require_dist_cjs25();
    var middleware_recursion_detection_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var middleware_user_agent_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters4();
    var runtimeConfig_1 = require_runtimeConfig2();
    var SSOOIDCClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_5);
        super(_config_6);
        this.config = _config_6;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.SSOOIDCClient = SSOOIDCClient;
  }
});

var require_SSOOIDC = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/SSOOIDC.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDC = void 0;
    var CreateTokenCommand_1 = require_CreateTokenCommand();
    var RegisterClientCommand_1 = require_RegisterClientCommand();
    var StartDeviceAuthorizationCommand_1 = require_StartDeviceAuthorizationCommand();
    var SSOOIDCClient_1 = require_SSOOIDCClient();
    var SSOOIDC = class extends SSOOIDCClient_1.SSOOIDCClient {
      createToken(args, optionsOrCb, cb) {
        const command = new CreateTokenCommand_1.CreateTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      registerClient(args, optionsOrCb, cb) {
        const command = new RegisterClientCommand_1.RegisterClientCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      startDeviceAuthorization(args, optionsOrCb, cb) {
        const command = new StartDeviceAuthorizationCommand_1.StartDeviceAuthorizationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.SSOOIDC = SSOOIDC;
  }
});

var require_commands2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_CreateTokenCommand(), exports2);
    tslib_1.__exportStar(require_RegisterClientCommand(), exports2);
    tslib_1.__exportStar(require_StartDeviceAuthorizationCommand(), exports2);
  }
});

var require_models2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_04(), exports2);
  }
});

var require_dist_cjs53 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sso-oidc/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SSOOIDCServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SSOOIDC(), exports2);
    tslib_1.__exportStar(require_SSOOIDCClient(), exports2);
    tslib_1.__exportStar(require_commands2(), exports2);
    tslib_1.__exportStar(require_models2(), exports2);
    var SSOOIDCServiceException_1 = require_SSOOIDCServiceException();
    Object.defineProperty(exports2, "SSOOIDCServiceException", { enumerable: true, get: function() {
      return SSOOIDCServiceException_1.SSOOIDCServiceException;
    } });
  }
});

var require_getSsoOidcClient = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getSsoOidcClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getSsoOidcClient = void 0;
    var client_sso_oidc_1 = require_dist_cjs53();
    var ssoOidcClientsHash = {};
    var getSsoOidcClient = (ssoRegion) => {
      if (ssoOidcClientsHash[ssoRegion]) {
        return ssoOidcClientsHash[ssoRegion];
      }
      const ssoOidcClient = new client_sso_oidc_1.SSOOIDCClient({ region: ssoRegion });
      ssoOidcClientsHash[ssoRegion] = ssoOidcClient;
      return ssoOidcClient;
    };
    exports2.getSsoOidcClient = getSsoOidcClient;
  }
});

var require_getNewSsoOidcToken = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/getNewSsoOidcToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getNewSsoOidcToken = void 0;
    var client_sso_oidc_1 = require_dist_cjs53();
    var getSsoOidcClient_1 = require_getSsoOidcClient();
    var getNewSsoOidcToken = (ssoToken, ssoRegion) => {
      const ssoOidcClient = (0, getSsoOidcClient_1.getSsoOidcClient)(ssoRegion);
      return ssoOidcClient.send(new client_sso_oidc_1.CreateTokenCommand({
        clientId: ssoToken.clientId,
        clientSecret: ssoToken.clientSecret,
        refreshToken: ssoToken.refreshToken,
        grantType: "refresh_token"
      }));
    };
    exports2.getNewSsoOidcToken = getNewSsoOidcToken;
  }
});

var require_validateTokenExpiry = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenExpiry.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenExpiry = void 0;
    var property_provider_1 = require_dist_cjs30();
    var constants_1 = require_constants9();
    var validateTokenExpiry = (token) => {
      if (token.expiration && token.expiration.getTime() < Date.now()) {
        throw new property_provider_1.TokenProviderError(`Token is expired. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenExpiry = validateTokenExpiry;
  }
});

var require_validateTokenKey = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/validateTokenKey.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateTokenKey = void 0;
    var property_provider_1 = require_dist_cjs30();
    var constants_1 = require_constants9();
    var validateTokenKey = (key, value, forRefresh = false) => {
      if (typeof value === "undefined") {
        throw new property_provider_1.TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? ". Cannot refresh" : ""}. ${constants_1.REFRESH_MESSAGE}`, false);
      }
    };
    exports2.validateTokenKey = validateTokenKey;
  }
});

var require_writeSSOTokenToFile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/writeSSOTokenToFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.writeSSOTokenToFile = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var fs_1 = require("fs");
    var { writeFile } = fs_1.promises;
    var writeSSOTokenToFile = (id, ssoToken) => {
      const tokenFilepath = (0, shared_ini_file_loader_1.getSSOTokenFilepath)(id);
      const tokenString = JSON.stringify(ssoToken, null, 2);
      return writeFile(tokenFilepath, tokenString);
    };
    exports2.writeSSOTokenToFile = writeSSOTokenToFile;
  }
});

var require_fromSso = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromSso.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSso = void 0;
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var constants_1 = require_constants9();
    var getNewSsoOidcToken_1 = require_getNewSsoOidcToken();
    var validateTokenExpiry_1 = require_validateTokenExpiry();
    var validateTokenKey_1 = require_validateTokenKey();
    var writeSSOTokenToFile_1 = require_writeSSOTokenToFile();
    var lastRefreshAttemptTime = /* @__PURE__ */ new Date(0);
    var fromSso = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      const profile = profiles[profileName];
      if (!profile) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);
      } else if (!profile["sso_session"]) {
        throw new property_provider_1.TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);
      }
      const ssoSessionName = profile["sso_session"];
      const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
      const ssoSession = ssoSessions[ssoSessionName];
      if (!ssoSession) {
        throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);
      }
      for (const ssoSessionRequiredKey of ["sso_start_url", "sso_region"]) {
        if (!ssoSession[ssoSessionRequiredKey]) {
          throw new property_provider_1.TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);
        }
      }
      const ssoStartUrl = ssoSession["sso_start_url"];
      const ssoRegion = ssoSession["sso_region"];
      let ssoToken;
      try {
        ssoToken = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoSessionName);
      } catch (e) {
        throw new property_provider_1.TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${constants_1.REFRESH_MESSAGE}`, false);
      }
      (0, validateTokenKey_1.validateTokenKey)("accessToken", ssoToken.accessToken);
      (0, validateTokenKey_1.validateTokenKey)("expiresAt", ssoToken.expiresAt);
      const { accessToken, expiresAt } = ssoToken;
      const existingToken = { token: accessToken, expiration: new Date(expiresAt) };
      if (existingToken.expiration.getTime() - Date.now() > constants_1.EXPIRE_WINDOW_MS) {
        return existingToken;
      }
      if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1e3) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
      (0, validateTokenKey_1.validateTokenKey)("clientId", ssoToken.clientId, true);
      (0, validateTokenKey_1.validateTokenKey)("clientSecret", ssoToken.clientSecret, true);
      (0, validateTokenKey_1.validateTokenKey)("refreshToken", ssoToken.refreshToken, true);
      try {
        lastRefreshAttemptTime.setTime(Date.now());
        const newSsoOidcToken = await (0, getNewSsoOidcToken_1.getNewSsoOidcToken)(ssoToken, ssoRegion);
        (0, validateTokenKey_1.validateTokenKey)("accessToken", newSsoOidcToken.accessToken);
        (0, validateTokenKey_1.validateTokenKey)("expiresIn", newSsoOidcToken.expiresIn);
        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1e3);
        try {
          await (0, writeSSOTokenToFile_1.writeSSOTokenToFile)(ssoSessionName, {
            ...ssoToken,
            accessToken: newSsoOidcToken.accessToken,
            expiresAt: newTokenExpiration.toISOString(),
            refreshToken: newSsoOidcToken.refreshToken
          });
        } catch (error) {
        }
        return {
          token: newSsoOidcToken.accessToken,
          expiration: newTokenExpiration
        };
      } catch (error) {
        (0, validateTokenExpiry_1.validateTokenExpiry)(existingToken);
        return existingToken;
      }
    };
    exports2.fromSso = fromSso;
  }
});

var require_fromStatic3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/fromStatic.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromStatic = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fromStatic = ({ token }) => async () => {
      if (!token || !token.token) {
        throw new property_provider_1.TokenProviderError(`Please pass a valid token to fromStatic`, false);
      }
      return token;
    };
    exports2.fromStatic = fromStatic;
  }
});

var require_nodeProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/nodeProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.nodeProvider = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fromSso_1 = require_fromSso();
    var nodeProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)((0, fromSso_1.fromSso)(init), async () => {
      throw new property_provider_1.TokenProviderError("Could not load token from any providers", false);
    }), (token) => token.expiration !== void 0 && token.expiration.getTime() - Date.now() < 3e5, (token) => token.expiration !== void 0);
    exports2.nodeProvider = nodeProvider;
  }
});

var require_dist_cjs54 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/token-providers/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSso(), exports2);
    tslib_1.__exportStar(require_fromStatic3(), exports2);
    tslib_1.__exportStar(require_nodeProvider(), exports2);
  }
});

var require_resolveSSOCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/resolveSSOCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSSOCredentials = void 0;
    var client_sso_1 = require_dist_cjs52();
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var token_providers_1 = require_dist_cjs54();
    var EXPIRE_WINDOW_MS = 15 * 60 * 1e3;
    var SHOULD_FAIL_CREDENTIAL_CHAIN = false;
    var resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, profile }) => {
      let token;
      const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;
      if (ssoSession) {
        try {
          const _token = await (0, token_providers_1.fromSso)({ profile })();
          token = {
            accessToken: _token.token,
            expiresAt: new Date(_token.expiration).toISOString()
          };
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(e.message, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      } else {
        try {
          token = await (0, shared_ini_file_loader_1.getSSOTokenFromFile)(ssoStartUrl);
        } catch (e) {
          throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
        }
      }
      if (new Date(token.expiresAt).getTime() - Date.now() <= EXPIRE_WINDOW_MS) {
        throw new property_provider_1.CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { accessToken } = token;
      const sso = ssoClient || new client_sso_1.SSOClient({ region: ssoRegion });
      let ssoResp;
      try {
        ssoResp = await sso.send(new client_sso_1.GetRoleCredentialsCommand({
          accountId: ssoAccountId,
          roleName: ssoRoleName,
          accessToken
        }));
      } catch (e) {
        throw property_provider_1.CredentialsProviderError.from(e, SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration } = {} } = ssoResp;
      if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {
        throw new property_provider_1.CredentialsProviderError("SSO returns an invalid temporary credential.", SHOULD_FAIL_CREDENTIAL_CHAIN);
      }
      return { accessKeyId, secretAccessKey, sessionToken, expiration: new Date(expiration) };
    };
    exports2.resolveSSOCredentials = resolveSSOCredentials;
  }
});

var require_validateSsoProfile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/validateSsoProfile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateSsoProfile = void 0;
    var property_provider_1 = require_dist_cjs30();
    var validateSsoProfile = (profile) => {
      const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;
      if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {
        throw new property_provider_1.CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(profile).join(", ")}
Reference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, false);
      }
      return profile;
    };
    exports2.validateSsoProfile = validateSsoProfile;
  }
});

var require_fromSSO = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/fromSSO.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromSSO = void 0;
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var isSsoProfile_1 = require_isSsoProfile();
    var resolveSSOCredentials_1 = require_resolveSSOCredentials();
    var validateSsoProfile_1 = require_validateSsoProfile();
    var fromSSO = (init = {}) => async () => {
      const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, ssoSession } = init;
      const profileName = (0, shared_ini_file_loader_1.getProfileName)(init);
      if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {
        const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
        const profile = profiles[profileName];
        if (!profile) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} was not found.`);
        }
        if (!(0, isSsoProfile_1.isSsoProfile)(profile)) {
          throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`);
        }
        if (profile === null || profile === void 0 ? void 0 : profile.sso_session) {
          const ssoSessions = await (0, shared_ini_file_loader_1.loadSsoSessionData)(init);
          const session = ssoSessions[profile.sso_session];
          const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;
          if (ssoRegion && ssoRegion !== session.sso_region) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO region` + conflictMsg, false);
          }
          if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {
            throw new property_provider_1.CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, false);
          }
          profile.sso_region = session.sso_region;
          profile.sso_start_url = session.sso_start_url;
        }
        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = (0, validateSsoProfile_1.validateSsoProfile)(profile);
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl: sso_start_url,
          ssoSession: sso_session,
          ssoAccountId: sso_account_id,
          ssoRegion: sso_region,
          ssoRoleName: sso_role_name,
          ssoClient,
          profile: profileName
        });
      } else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {
        throw new property_provider_1.CredentialsProviderError('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"');
      } else {
        return (0, resolveSSOCredentials_1.resolveSSOCredentials)({
          ssoStartUrl,
          ssoSession,
          ssoAccountId,
          ssoRegion,
          ssoRoleName,
          ssoClient,
          profile: profileName
        });
      }
    };
    exports2.fromSSO = fromSSO;
  }
});

var require_types7 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/types.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs55 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-sso/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromSSO(), exports2);
    tslib_1.__exportStar(require_isSsoProfile(), exports2);
    tslib_1.__exportStar(require_types7(), exports2);
    tslib_1.__exportStar(require_validateSsoProfile(), exports2);
  }
});

var require_resolveSsoCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveSsoCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveSsoCredentials = exports2.isSsoProfile = void 0;
    var credential_provider_sso_1 = require_dist_cjs55();
    var credential_provider_sso_2 = require_dist_cjs55();
    Object.defineProperty(exports2, "isSsoProfile", { enumerable: true, get: function() {
      return credential_provider_sso_2.isSsoProfile;
    } });
    var resolveSsoCredentials = (data) => {
      const { sso_start_url, sso_account_id, sso_session, sso_region, sso_role_name } = (0, credential_provider_sso_1.validateSsoProfile)(data);
      return (0, credential_provider_sso_1.fromSSO)({
        ssoStartUrl: sso_start_url,
        ssoAccountId: sso_account_id,
        ssoSession: sso_session,
        ssoRegion: sso_region,
        ssoRoleName: sso_role_name
      })();
    };
    exports2.resolveSsoCredentials = resolveSsoCredentials;
  }
});

var require_resolveStaticCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveStaticCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveStaticCredentials = exports2.isStaticCredsProfile = void 0;
    var isStaticCredsProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.aws_access_key_id === "string" && typeof arg.aws_secret_access_key === "string" && ["undefined", "string"].indexOf(typeof arg.aws_session_token) > -1;
    exports2.isStaticCredsProfile = isStaticCredsProfile;
    var resolveStaticCredentials = (profile) => Promise.resolve({
      accessKeyId: profile.aws_access_key_id,
      secretAccessKey: profile.aws_secret_access_key,
      sessionToken: profile.aws_session_token
    });
    exports2.resolveStaticCredentials = resolveStaticCredentials;
  }
});

var require_fromWebToken = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromWebToken.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromWebToken = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fromWebToken = (init) => () => {
      const { roleArn, roleSessionName, webIdentityToken, providerId, policyArns, policy, durationSeconds, roleAssumerWithWebIdentity } = init;
      if (!roleAssumerWithWebIdentity) {
        throw new property_provider_1.CredentialsProviderError(`Role Arn '${roleArn}' needs to be assumed with web identity, but no role assumption callback was provided.`, false);
      }
      return roleAssumerWithWebIdentity({
        RoleArn: roleArn,
        RoleSessionName: roleSessionName !== null && roleSessionName !== void 0 ? roleSessionName : `aws-sdk-js-session-${Date.now()}`,
        WebIdentityToken: webIdentityToken,
        ProviderId: providerId,
        PolicyArns: policyArns,
        Policy: policy,
        DurationSeconds: durationSeconds
      });
    };
    exports2.fromWebToken = fromWebToken;
  }
});

var require_fromTokenFile = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/fromTokenFile.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromTokenFile = void 0;
    var property_provider_1 = require_dist_cjs30();
    var fs_1 = require("fs");
    var fromWebToken_1 = require_fromWebToken();
    var ENV_TOKEN_FILE = "AWS_WEB_IDENTITY_TOKEN_FILE";
    var ENV_ROLE_ARN = "AWS_ROLE_ARN";
    var ENV_ROLE_SESSION_NAME = "AWS_ROLE_SESSION_NAME";
    var fromTokenFile = (init = {}) => async () => {
      return resolveTokenFile(init);
    };
    exports2.fromTokenFile = fromTokenFile;
    var resolveTokenFile = (init) => {
      var _a, _b, _c;
      const webIdentityTokenFile = (_a = init === null || init === void 0 ? void 0 : init.webIdentityTokenFile) !== null && _a !== void 0 ? _a : process.env[ENV_TOKEN_FILE];
      const roleArn = (_b = init === null || init === void 0 ? void 0 : init.roleArn) !== null && _b !== void 0 ? _b : process.env[ENV_ROLE_ARN];
      const roleSessionName = (_c = init === null || init === void 0 ? void 0 : init.roleSessionName) !== null && _c !== void 0 ? _c : process.env[ENV_ROLE_SESSION_NAME];
      if (!webIdentityTokenFile || !roleArn) {
        throw new property_provider_1.CredentialsProviderError("Web identity configuration not specified");
      }
      return (0, fromWebToken_1.fromWebToken)({
        ...init,
        webIdentityToken: (0, fs_1.readFileSync)(webIdentityTokenFile, { encoding: "ascii" }),
        roleArn,
        roleSessionName
      })();
    };
  }
});

var require_dist_cjs56 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-web-identity/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromTokenFile(), exports2);
    tslib_1.__exportStar(require_fromWebToken(), exports2);
  }
});

var require_resolveWebIdentityCredentials = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveWebIdentityCredentials.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveWebIdentityCredentials = exports2.isWebIdentityProfile = void 0;
    var credential_provider_web_identity_1 = require_dist_cjs56();
    var isWebIdentityProfile = (arg) => Boolean(arg) && typeof arg === "object" && typeof arg.web_identity_token_file === "string" && typeof arg.role_arn === "string" && ["undefined", "string"].indexOf(typeof arg.role_session_name) > -1;
    exports2.isWebIdentityProfile = isWebIdentityProfile;
    var resolveWebIdentityCredentials = async (profile, options) => (0, credential_provider_web_identity_1.fromTokenFile)({
      webIdentityTokenFile: profile.web_identity_token_file,
      roleArn: profile.role_arn,
      roleSessionName: profile.role_session_name,
      roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity
    })();
    exports2.resolveWebIdentityCredentials = resolveWebIdentityCredentials;
  }
});

var require_resolveProfileData = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/resolveProfileData.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveProfileData = void 0;
    var property_provider_1 = require_dist_cjs30();
    var resolveAssumeRoleCredentials_1 = require_resolveAssumeRoleCredentials();
    var resolveProcessCredentials_1 = require_resolveProcessCredentials2();
    var resolveSsoCredentials_1 = require_resolveSsoCredentials();
    var resolveStaticCredentials_1 = require_resolveStaticCredentials();
    var resolveWebIdentityCredentials_1 = require_resolveWebIdentityCredentials();
    var resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}) => {
      const data = profiles[profileName];
      if (Object.keys(visitedProfiles).length > 0 && (0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveAssumeRoleCredentials_1.isAssumeRoleProfile)(data)) {
        return (0, resolveAssumeRoleCredentials_1.resolveAssumeRoleCredentials)(profileName, profiles, options, visitedProfiles);
      }
      if ((0, resolveStaticCredentials_1.isStaticCredsProfile)(data)) {
        return (0, resolveStaticCredentials_1.resolveStaticCredentials)(data);
      }
      if ((0, resolveWebIdentityCredentials_1.isWebIdentityProfile)(data)) {
        return (0, resolveWebIdentityCredentials_1.resolveWebIdentityCredentials)(data, options);
      }
      if ((0, resolveProcessCredentials_1.isProcessProfile)(data)) {
        return (0, resolveProcessCredentials_1.resolveProcessCredentials)(options, profileName);
      }
      if ((0, resolveSsoCredentials_1.isSsoProfile)(data)) {
        return (0, resolveSsoCredentials_1.resolveSsoCredentials)(data);
      }
      throw new property_provider_1.CredentialsProviderError(`Profile ${profileName} could not be found or parsed in shared credentials file.`);
    };
    exports2.resolveProfileData = resolveProfileData;
  }
});

var require_fromIni = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/fromIni.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fromIni = void 0;
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var resolveProfileData_1 = require_resolveProfileData();
    var fromIni = (init = {}) => async () => {
      const profiles = await (0, shared_ini_file_loader_1.parseKnownFiles)(init);
      return (0, resolveProfileData_1.resolveProfileData)((0, shared_ini_file_loader_1.getProfileName)(init), profiles, init);
    };
    exports2.fromIni = fromIni;
  }
});

var require_dist_cjs57 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-ini/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fromIni(), exports2);
  }
});

var require_remoteProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/remoteProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.remoteProvider = exports2.ENV_IMDS_DISABLED = void 0;
    var credential_provider_imds_1 = require_dist_cjs40();
    var property_provider_1 = require_dist_cjs30();
    exports2.ENV_IMDS_DISABLED = "AWS_EC2_METADATA_DISABLED";
    var remoteProvider = (init) => {
      if (process.env[credential_provider_imds_1.ENV_CMDS_RELATIVE_URI] || process.env[credential_provider_imds_1.ENV_CMDS_FULL_URI]) {
        return (0, credential_provider_imds_1.fromContainerMetadata)(init);
      }
      if (process.env[exports2.ENV_IMDS_DISABLED]) {
        return async () => {
          throw new property_provider_1.CredentialsProviderError("EC2 Instance Metadata Service access disabled");
        };
      }
      return (0, credential_provider_imds_1.fromInstanceMetadata)(init);
    };
    exports2.remoteProvider = remoteProvider;
  }
});

var require_defaultProvider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/defaultProvider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultProvider = void 0;
    var credential_provider_env_1 = require_dist_cjs37();
    var credential_provider_ini_1 = require_dist_cjs57();
    var credential_provider_process_1 = require_dist_cjs41();
    var credential_provider_sso_1 = require_dist_cjs55();
    var credential_provider_web_identity_1 = require_dist_cjs56();
    var property_provider_1 = require_dist_cjs30();
    var shared_ini_file_loader_1 = require_dist_cjs38();
    var remoteProvider_1 = require_remoteProvider();
    var defaultProvider = (init = {}) => (0, property_provider_1.memoize)((0, property_provider_1.chain)(...init.profile || process.env[shared_ini_file_loader_1.ENV_PROFILE] ? [] : [(0, credential_provider_env_1.fromEnv)()], (0, credential_provider_sso_1.fromSSO)(init), (0, credential_provider_ini_1.fromIni)(init), (0, credential_provider_process_1.fromProcess)(init), (0, credential_provider_web_identity_1.fromTokenFile)(init), (0, remoteProvider_1.remoteProvider)(init), async () => {
      throw new property_provider_1.CredentialsProviderError("Could not load credentials from any providers", false);
    }), (credentials) => credentials.expiration !== void 0 && credentials.expiration.getTime() - Date.now() < 3e5, (credentials) => credentials.expiration !== void 0);
    exports2.defaultProvider = defaultProvider;
  }
});

var require_dist_cjs58 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/credential-provider-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_defaultProvider(), exports2);
  }
});

var require_ruleset3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var H = "required";
    var I = "fn";
    var J = "argv";
    var K = "ref";
    var L = "properties";
    var M = "headers";
    var a = false;
    var b = true;
    var c = "PartitionResult";
    var d = "tree";
    var e = "booleanEquals";
    var f = "stringEquals";
    var g = "https://sts.amazonaws.com";
    var h = "sigv4";
    var i = "sts";
    var j = "us-east-1";
    var k = "endpoint";
    var l = "https://sts.{Region}.{PartitionResult#dnsSuffix}";
    var m = "error";
    var n = "getAttr";
    var o = { [H]: false, "type": "String" };
    var p = { [H]: true, "default": false, "type": "Boolean" };
    var q = { [K]: "Region" };
    var r = { [K]: "UseFIPS" };
    var s = { [K]: "UseDualStack" };
    var t = { [I]: "isSet", [J]: [{ [K]: "Endpoint" }] };
    var u = { [K]: "Endpoint" };
    var v = { "url": g, [L]: { "authSchemes": [{ "name": h, "signingName": i, "signingRegion": j }] }, [M]: {} };
    var w = {};
    var x = { [I]: e, [J]: [r, true] };
    var y = { [I]: e, [J]: [s, true] };
    var z = { [I]: e, [J]: [true, { [I]: n, [J]: [{ [K]: c }, "supportsFIPS"] }] };
    var A = { [K]: c };
    var B = { [I]: e, [J]: [true, { [I]: n, [J]: [A, "supportsDualStack"] }] };
    var C = { "url": l, [L]: {}, [M]: {} };
    var D = [u];
    var E = [{ [I]: f, [J]: [q, "aws-global"] }];
    var F = [x];
    var G = [y];
    var _data = { version: "1.0", parameters: { Region: o, UseDualStack: p, UseFIPS: p, Endpoint: o, UseGlobalEndpoint: p }, rules: [{ conditions: [{ [I]: "aws.partition", [J]: [q], assign: c }], type: d, rules: [{ conditions: [{ [I]: e, [J]: [{ [K]: "UseGlobalEndpoint" }, b] }, { [I]: e, [J]: [r, a] }, { [I]: e, [J]: [s, a] }, { [I]: "not", [J]: [t] }], type: d, rules: [{ conditions: [{ [I]: f, [J]: [q, "ap-northeast-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "ap-south-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "ap-southeast-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "ap-southeast-2"] }], endpoint: v, type: k }, { conditions: E, endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "ca-central-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "eu-central-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "eu-north-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "eu-west-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "eu-west-2"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "eu-west-3"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "sa-east-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, j] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "us-east-2"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "us-west-1"] }], endpoint: v, type: k }, { conditions: [{ [I]: f, [J]: [q, "us-west-2"] }], endpoint: v, type: k }, { endpoint: { url: l, [L]: { authSchemes: [{ name: h, signingName: i, signingRegion: "{Region}" }] }, [M]: w }, type: k }] }, { conditions: [t, { [I]: "parseURL", [J]: D, assign: "url" }], type: d, rules: [{ conditions: F, error: "Invalid Configuration: FIPS and custom endpoint are not supported", type: m }, { type: d, rules: [{ conditions: G, error: "Invalid Configuration: Dualstack and custom endpoint are not supported", type: m }, { endpoint: { url: u, [L]: w, [M]: w }, type: k }] }] }, { conditions: [x, y], type: d, rules: [{ conditions: [z, B], type: d, rules: [{ endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: w, [M]: w }, type: k }] }, { error: "FIPS and DualStack are enabled, but this partition does not support one or both", type: m }] }, { conditions: F, type: d, rules: [{ conditions: [z], type: d, rules: [{ type: d, rules: [{ conditions: [{ [I]: f, [J]: ["aws-us-gov", { [I]: n, [J]: [A, "name"] }] }], endpoint: C, type: k }, { endpoint: { url: "https://sts-fips.{Region}.{PartitionResult#dnsSuffix}", [L]: w, [M]: w }, type: k }] }] }, { error: "FIPS is enabled but this partition does not support FIPS", type: m }] }, { conditions: G, type: d, rules: [{ conditions: [B], type: d, rules: [{ endpoint: { url: "https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}", [L]: w, [M]: w }, type: k }] }, { error: "DualStack is enabled but this partition does not support DualStack", type: m }] }, { type: d, rules: [{ conditions: E, endpoint: { url: g, [L]: { authSchemes: [{ name: h, signingRegion: j, signingName: i }] }, [M]: w }, type: k }, { endpoint: C, type: k }] }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs50();
    var ruleset_1 = require_ruleset3();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs48();
    var endpointResolver_1 = require_endpointResolver3();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2011-06-15",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "STS",
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package2());
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var config_resolver_1 = require_dist_cjs20();
    var credential_provider_node_1 = require_dist_cjs58();
    var hash_node_1 = require_dist_cjs42();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs44();
    var util_body_length_node_1 = require_dist_cjs45();
    var util_retry_1 = require_dist_cjs28();
    var util_user_agent_node_1 = require_dist_cjs46();
    var util_utf8_node_1 = require_dist_cjs47();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared3();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs51();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? (0, defaultStsRoleAssumers_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_STSClient = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STSClient.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSClient = void 0;
    var config_resolver_1 = require_dist_cjs20();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_host_header_1 = require_dist_cjs24();
    var middleware_logger_1 = require_dist_cjs25();
    var middleware_recursion_detection_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var middleware_sdk_sts_1 = require_dist_cjs36();
    var middleware_user_agent_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters2();
    var runtimeConfig_1 = require_runtimeConfig3();
    var STSClient = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_sdk_sts_1.resolveStsAuthConfig)(_config_5, { stsClientCtor: STSClient });
        const _config_7 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_6);
        super(_config_7);
        this.config = _config_7;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.STSClient = STSClient;
  }
});

var require_STS = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/STS.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STS = void 0;
    var AssumeRoleCommand_1 = require_AssumeRoleCommand();
    var AssumeRoleWithSAMLCommand_1 = require_AssumeRoleWithSAMLCommand();
    var AssumeRoleWithWebIdentityCommand_1 = require_AssumeRoleWithWebIdentityCommand();
    var DecodeAuthorizationMessageCommand_1 = require_DecodeAuthorizationMessageCommand();
    var GetAccessKeyInfoCommand_1 = require_GetAccessKeyInfoCommand();
    var GetCallerIdentityCommand_1 = require_GetCallerIdentityCommand();
    var GetFederationTokenCommand_1 = require_GetFederationTokenCommand();
    var GetSessionTokenCommand_1 = require_GetSessionTokenCommand();
    var STSClient_1 = require_STSClient();
    var STS = class extends STSClient_1.STSClient {
      assumeRole(args, optionsOrCb, cb) {
        const command = new AssumeRoleCommand_1.AssumeRoleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithSAML(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithSAMLCommand_1.AssumeRoleWithSAMLCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      assumeRoleWithWebIdentity(args, optionsOrCb, cb) {
        const command = new AssumeRoleWithWebIdentityCommand_1.AssumeRoleWithWebIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      decodeAuthorizationMessage(args, optionsOrCb, cb) {
        const command = new DecodeAuthorizationMessageCommand_1.DecodeAuthorizationMessageCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getAccessKeyInfo(args, optionsOrCb, cb) {
        const command = new GetAccessKeyInfoCommand_1.GetAccessKeyInfoCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getCallerIdentity(args, optionsOrCb, cb) {
        const command = new GetCallerIdentityCommand_1.GetCallerIdentityCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getFederationToken(args, optionsOrCb, cb) {
        const command = new GetFederationTokenCommand_1.GetFederationTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getSessionToken(args, optionsOrCb, cb) {
        const command = new GetSessionTokenCommand_1.GetSessionTokenCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.STS = STS;
  }
});

var require_commands3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AssumeRoleCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithSAMLCommand(), exports2);
    tslib_1.__exportStar(require_AssumeRoleWithWebIdentityCommand(), exports2);
    tslib_1.__exportStar(require_DecodeAuthorizationMessageCommand(), exports2);
    tslib_1.__exportStar(require_GetAccessKeyInfoCommand(), exports2);
    tslib_1.__exportStar(require_GetCallerIdentityCommand(), exports2);
    tslib_1.__exportStar(require_GetFederationTokenCommand(), exports2);
    tslib_1.__exportStar(require_GetSessionTokenCommand(), exports2);
  }
});

var require_defaultRoleAssumers = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/defaultRoleAssumers.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.decorateDefaultCredentialProvider = exports2.getDefaultRoleAssumerWithWebIdentity = exports2.getDefaultRoleAssumer = void 0;
    var defaultStsRoleAssumers_1 = require_defaultStsRoleAssumers();
    var STSClient_1 = require_STSClient();
    var getCustomizableStsClientCtor = (baseCtor, customizations) => {
      if (!customizations)
        return baseCtor;
      else
        return class CustomizableSTSClient extends baseCtor {
          constructor(config) {
            super(config);
            for (const customization of customizations) {
              this.middlewareStack.use(customization);
            }
          }
        };
    };
    var getDefaultRoleAssumer = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumer)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumer = getDefaultRoleAssumer;
    var getDefaultRoleAssumerWithWebIdentity = (stsOptions = {}, stsPlugins) => (0, defaultStsRoleAssumers_1.getDefaultRoleAssumerWithWebIdentity)(stsOptions, getCustomizableStsClientCtor(STSClient_1.STSClient, stsPlugins));
    exports2.getDefaultRoleAssumerWithWebIdentity = getDefaultRoleAssumerWithWebIdentity;
    var decorateDefaultCredentialProvider = (provider) => (input) => provider({
      roleAssumer: (0, exports2.getDefaultRoleAssumer)(input),
      roleAssumerWithWebIdentity: (0, exports2.getDefaultRoleAssumerWithWebIdentity)(input),
      ...input
    });
    exports2.decorateDefaultCredentialProvider = decorateDefaultCredentialProvider;
  }
});

var require_models3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_02(), exports2);
  }
});

var require_dist_cjs59 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-sts/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.STSServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_STS(), exports2);
    tslib_1.__exportStar(require_STSClient(), exports2);
    tslib_1.__exportStar(require_commands3(), exports2);
    tslib_1.__exportStar(require_defaultRoleAssumers(), exports2);
    tslib_1.__exportStar(require_models3(), exports2);
    var STSServiceException_1 = require_STSServiceException();
    Object.defineProperty(exports2, "STSServiceException", { enumerable: true, get: function() {
      return STSServiceException_1.STSServiceException;
    } });
  }
});

var require_Int64 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/Int64.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.Int64 = void 0;
    var util_hex_encoding_1 = require_dist_cjs31();
    var Int64 = class {
      constructor(bytes) {
        this.bytes = bytes;
        if (bytes.byteLength !== 8) {
          throw new Error("Int64 buffers must be exactly 8 bytes");
        }
      }
      static fromNumber(number) {
        if (number > 9223372036854776e3 || number < -9223372036854776e3) {
          throw new Error(`${number} is too large (or, if negative, too small) to represent as an Int64`);
        }
        const bytes = new Uint8Array(8);
        for (let i = 7, remaining = Math.abs(Math.round(number)); i > -1 && remaining > 0; i--, remaining /= 256) {
          bytes[i] = remaining;
        }
        if (number < 0) {
          negate(bytes);
        }
        return new Int64(bytes);
      }
      valueOf() {
        const bytes = this.bytes.slice(0);
        const negative = bytes[0] & 128;
        if (negative) {
          negate(bytes);
        }
        return parseInt((0, util_hex_encoding_1.toHex)(bytes), 16) * (negative ? -1 : 1);
      }
      toString() {
        return String(this.valueOf());
      }
    };
    exports2.Int64 = Int64;
    function negate(bytes) {
      for (let i = 0; i < 8; i++) {
        bytes[i] ^= 255;
      }
      for (let i = 7; i > -1; i--) {
        bytes[i]++;
        if (bytes[i] !== 0)
          break;
      }
    }
  }
});

var require_HeaderMarshaller = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/HeaderMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HeaderMarshaller = void 0;
    var util_hex_encoding_1 = require_dist_cjs31();
    var Int64_1 = require_Int64();
    var HeaderMarshaller = class {
      constructor(toUtf8, fromUtf8) {
        this.toUtf8 = toUtf8;
        this.fromUtf8 = fromUtf8;
      }
      format(headers) {
        const chunks = [];
        for (const headerName of Object.keys(headers)) {
          const bytes = this.fromUtf8(headerName);
          chunks.push(Uint8Array.from([bytes.byteLength]), bytes, this.formatHeaderValue(headers[headerName]));
        }
        const out = new Uint8Array(chunks.reduce((carry, bytes) => carry + bytes.byteLength, 0));
        let position = 0;
        for (const chunk of chunks) {
          out.set(chunk, position);
          position += chunk.byteLength;
        }
        return out;
      }
      formatHeaderValue(header) {
        switch (header.type) {
          case "boolean":
            return Uint8Array.from([header.value ? 0 : 1]);
          case "byte":
            return Uint8Array.from([2, header.value]);
          case "short":
            const shortView = new DataView(new ArrayBuffer(3));
            shortView.setUint8(0, 3);
            shortView.setInt16(1, header.value, false);
            return new Uint8Array(shortView.buffer);
          case "integer":
            const intView = new DataView(new ArrayBuffer(5));
            intView.setUint8(0, 4);
            intView.setInt32(1, header.value, false);
            return new Uint8Array(intView.buffer);
          case "long":
            const longBytes = new Uint8Array(9);
            longBytes[0] = 5;
            longBytes.set(header.value.bytes, 1);
            return longBytes;
          case "binary":
            const binView = new DataView(new ArrayBuffer(3 + header.value.byteLength));
            binView.setUint8(0, 6);
            binView.setUint16(1, header.value.byteLength, false);
            const binBytes = new Uint8Array(binView.buffer);
            binBytes.set(header.value, 3);
            return binBytes;
          case "string":
            const utf8Bytes = this.fromUtf8(header.value);
            const strView = new DataView(new ArrayBuffer(3 + utf8Bytes.byteLength));
            strView.setUint8(0, 7);
            strView.setUint16(1, utf8Bytes.byteLength, false);
            const strBytes = new Uint8Array(strView.buffer);
            strBytes.set(utf8Bytes, 3);
            return strBytes;
          case "timestamp":
            const tsBytes = new Uint8Array(9);
            tsBytes[0] = 8;
            tsBytes.set(Int64_1.Int64.fromNumber(header.value.valueOf()).bytes, 1);
            return tsBytes;
          case "uuid":
            if (!UUID_PATTERN.test(header.value)) {
              throw new Error(`Invalid UUID received: ${header.value}`);
            }
            const uuidBytes = new Uint8Array(17);
            uuidBytes[0] = 9;
            uuidBytes.set((0, util_hex_encoding_1.fromHex)(header.value.replace(/\-/g, "")), 1);
            return uuidBytes;
        }
      }
      parse(headers) {
        const out = {};
        let position = 0;
        while (position < headers.byteLength) {
          const nameLength = headers.getUint8(position++);
          const name = this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, nameLength));
          position += nameLength;
          switch (headers.getUint8(position++)) {
            case 0:
              out[name] = {
                type: BOOLEAN_TAG,
                value: true
              };
              break;
            case 1:
              out[name] = {
                type: BOOLEAN_TAG,
                value: false
              };
              break;
            case 2:
              out[name] = {
                type: BYTE_TAG,
                value: headers.getInt8(position++)
              };
              break;
            case 3:
              out[name] = {
                type: SHORT_TAG,
                value: headers.getInt16(position, false)
              };
              position += 2;
              break;
            case 4:
              out[name] = {
                type: INT_TAG,
                value: headers.getInt32(position, false)
              };
              position += 4;
              break;
            case 5:
              out[name] = {
                type: LONG_TAG,
                value: new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8))
              };
              position += 8;
              break;
            case 6:
              const binaryLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: BINARY_TAG,
                value: new Uint8Array(headers.buffer, headers.byteOffset + position, binaryLength)
              };
              position += binaryLength;
              break;
            case 7:
              const stringLength = headers.getUint16(position, false);
              position += 2;
              out[name] = {
                type: STRING_TAG,
                value: this.toUtf8(new Uint8Array(headers.buffer, headers.byteOffset + position, stringLength))
              };
              position += stringLength;
              break;
            case 8:
              out[name] = {
                type: TIMESTAMP_TAG,
                value: new Date(new Int64_1.Int64(new Uint8Array(headers.buffer, headers.byteOffset + position, 8)).valueOf())
              };
              position += 8;
              break;
            case 9:
              const uuidBytes = new Uint8Array(headers.buffer, headers.byteOffset + position, 16);
              position += 16;
              out[name] = {
                type: UUID_TAG,
                value: `${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(0, 4))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(4, 6))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(6, 8))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(8, 10))}-${(0, util_hex_encoding_1.toHex)(uuidBytes.subarray(10))}`
              };
              break;
            default:
              throw new Error(`Unrecognized header type tag`);
          }
        }
        return out;
      }
    };
    exports2.HeaderMarshaller = HeaderMarshaller;
    var HEADER_VALUE_TYPE;
    (function(HEADER_VALUE_TYPE2) {
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolTrue"] = 0] = "boolTrue";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["boolFalse"] = 1] = "boolFalse";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byte"] = 2] = "byte";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["short"] = 3] = "short";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["integer"] = 4] = "integer";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["long"] = 5] = "long";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["byteArray"] = 6] = "byteArray";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["string"] = 7] = "string";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["timestamp"] = 8] = "timestamp";
      HEADER_VALUE_TYPE2[HEADER_VALUE_TYPE2["uuid"] = 9] = "uuid";
    })(HEADER_VALUE_TYPE || (HEADER_VALUE_TYPE = {}));
    var BOOLEAN_TAG = "boolean";
    var BYTE_TAG = "byte";
    var SHORT_TAG = "short";
    var INT_TAG = "integer";
    var LONG_TAG = "long";
    var BINARY_TAG = "binary";
    var STRING_TAG = "string";
    var TIMESTAMP_TAG = "timestamp";
    var UUID_TAG = "uuid";
    var UUID_PATTERN = /^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$/;
  }
});

var require_splitMessage = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/splitMessage.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.splitMessage = void 0;
    var crc32_1 = require_build2();
    var PRELUDE_MEMBER_LENGTH = 4;
    var PRELUDE_LENGTH = PRELUDE_MEMBER_LENGTH * 2;
    var CHECKSUM_LENGTH = 4;
    var MINIMUM_MESSAGE_LENGTH = PRELUDE_LENGTH + CHECKSUM_LENGTH * 2;
    function splitMessage({ byteLength, byteOffset, buffer }) {
      if (byteLength < MINIMUM_MESSAGE_LENGTH) {
        throw new Error("Provided message too short to accommodate event stream message overhead");
      }
      const view = new DataView(buffer, byteOffset, byteLength);
      const messageLength = view.getUint32(0, false);
      if (byteLength !== messageLength) {
        throw new Error("Reported message length does not match received message length");
      }
      const headerLength = view.getUint32(PRELUDE_MEMBER_LENGTH, false);
      const expectedPreludeChecksum = view.getUint32(PRELUDE_LENGTH, false);
      const expectedMessageChecksum = view.getUint32(byteLength - CHECKSUM_LENGTH, false);
      const checksummer = new crc32_1.Crc32().update(new Uint8Array(buffer, byteOffset, PRELUDE_LENGTH));
      if (expectedPreludeChecksum !== checksummer.digest()) {
        throw new Error(`The prelude checksum specified in the message (${expectedPreludeChecksum}) does not match the calculated CRC32 checksum (${checksummer.digest()})`);
      }
      checksummer.update(new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH, byteLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH)));
      if (expectedMessageChecksum !== checksummer.digest()) {
        throw new Error(`The message checksum (${checksummer.digest()}) did not match the expected value of ${expectedMessageChecksum}`);
      }
      return {
        headers: new DataView(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH, headerLength),
        body: new Uint8Array(buffer, byteOffset + PRELUDE_LENGTH + CHECKSUM_LENGTH + headerLength, messageLength - headerLength - (PRELUDE_LENGTH + CHECKSUM_LENGTH + CHECKSUM_LENGTH))
      };
    }
    exports2.splitMessage = splitMessage;
  }
});

var require_EventStreamCodec = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/EventStreamCodec.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamCodec = void 0;
    var crc32_1 = require_build2();
    var HeaderMarshaller_1 = require_HeaderMarshaller();
    var splitMessage_1 = require_splitMessage();
    var EventStreamCodec = class {
      constructor(toUtf8, fromUtf8) {
        this.headerMarshaller = new HeaderMarshaller_1.HeaderMarshaller(toUtf8, fromUtf8);
      }
      encode({ headers: rawHeaders, body }) {
        const headers = this.headerMarshaller.format(rawHeaders);
        const length = headers.byteLength + body.byteLength + 16;
        const out = new Uint8Array(length);
        const view = new DataView(out.buffer, out.byteOffset, out.byteLength);
        const checksum = new crc32_1.Crc32();
        view.setUint32(0, length, false);
        view.setUint32(4, headers.byteLength, false);
        view.setUint32(8, checksum.update(out.subarray(0, 8)).digest(), false);
        out.set(headers, 12);
        out.set(body, headers.byteLength + 12);
        view.setUint32(length - 4, checksum.update(out.subarray(8, length - 4)).digest(), false);
        return out;
      }
      decode(message) {
        const { headers, body } = (0, splitMessage_1.splitMessage)(message);
        return { headers: this.headerMarshaller.parse(headers), body };
      }
      formatHeaders(rawHeaders) {
        return this.headerMarshaller.format(rawHeaders);
      }
    };
    exports2.EventStreamCodec = EventStreamCodec;
  }
});

var require_Message = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/Message.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_dist_cjs60 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-codec/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamCodec(), exports2);
    tslib_1.__exportStar(require_Int64(), exports2);
    tslib_1.__exportStar(require_Message(), exports2);
  }
});

var require_getChunkedStream = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/getChunkedStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getChunkedStream = void 0;
    function getChunkedStream(source) {
      let currentMessageTotalLength = 0;
      let currentMessagePendingLength = 0;
      let currentMessage = null;
      let messageLengthBuffer = null;
      const allocateMessage = (size) => {
        if (typeof size !== "number") {
          throw new Error("Attempted to allocate an event message where size was not a number: " + size);
        }
        currentMessageTotalLength = size;
        currentMessagePendingLength = 4;
        currentMessage = new Uint8Array(size);
        const currentMessageView = new DataView(currentMessage.buffer);
        currentMessageView.setUint32(0, size, false);
      };
      const iterator = async function* () {
        const sourceIterator = source[Symbol.asyncIterator]();
        while (true) {
          const { value, done } = await sourceIterator.next();
          if (done) {
            if (!currentMessageTotalLength) {
              return;
            } else if (currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
            } else {
              throw new Error("Truncated event message received.");
            }
            return;
          }
          const chunkLength = value.length;
          let currentOffset = 0;
          while (currentOffset < chunkLength) {
            if (!currentMessage) {
              const bytesRemaining = chunkLength - currentOffset;
              if (!messageLengthBuffer) {
                messageLengthBuffer = new Uint8Array(4);
              }
              const numBytesForTotal = Math.min(4 - currentMessagePendingLength, bytesRemaining);
              messageLengthBuffer.set(value.slice(currentOffset, currentOffset + numBytesForTotal), currentMessagePendingLength);
              currentMessagePendingLength += numBytesForTotal;
              currentOffset += numBytesForTotal;
              if (currentMessagePendingLength < 4) {
                break;
              }
              allocateMessage(new DataView(messageLengthBuffer.buffer).getUint32(0, false));
              messageLengthBuffer = null;
            }
            const numBytesToWrite = Math.min(currentMessageTotalLength - currentMessagePendingLength, chunkLength - currentOffset);
            currentMessage.set(value.slice(currentOffset, currentOffset + numBytesToWrite), currentMessagePendingLength);
            currentMessagePendingLength += numBytesToWrite;
            currentOffset += numBytesToWrite;
            if (currentMessageTotalLength && currentMessageTotalLength === currentMessagePendingLength) {
              yield currentMessage;
              currentMessage = null;
              currentMessageTotalLength = 0;
              currentMessagePendingLength = 0;
            }
          }
        }
      };
      return {
        [Symbol.asyncIterator]: iterator
      };
    }
    exports2.getChunkedStream = getChunkedStream;
  }
});

var require_getUnmarshalledStream = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/getUnmarshalledStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getUnmarshalledStream = void 0;
    function getUnmarshalledStream(source, options) {
      return {
        [Symbol.asyncIterator]: async function* () {
          for await (const chunk of source) {
            const message = options.eventStreamCodec.decode(chunk);
            const { value: messageType } = message.headers[":message-type"];
            if (messageType === "error") {
              const unmodeledError = new Error(message.headers[":error-message"].value || "UnknownError");
              unmodeledError.name = message.headers[":error-code"].value;
              throw unmodeledError;
            } else if (messageType === "exception") {
              const code = message.headers[":exception-type"].value;
              const exception = { [code]: message };
              const deserializedException = await options.deserializer(exception);
              if (deserializedException.$unknown) {
                const error = new Error(options.toUtf8(message.body));
                error.name = code;
                throw error;
              }
              throw deserializedException[code];
            } else if (messageType === "event") {
              const event = {
                [message.headers[":event-type"].value]: message
              };
              const deserialized = await options.deserializer(event);
              if (deserialized.$unknown)
                continue;
              yield deserialized;
            } else {
              throw Error(`Unrecognizable event type: ${message.headers[":event-type"].value}`);
            }
          }
        }
      };
    }
    exports2.getUnmarshalledStream = getUnmarshalledStream;
  }
});

var require_EventStreamMarshaller = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/EventStreamMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamMarshaller = void 0;
    var eventstream_codec_1 = require_dist_cjs60();
    var getChunkedStream_1 = require_getChunkedStream();
    var getUnmarshalledStream_1 = require_getUnmarshalledStream();
    var EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.eventStreamCodec = new eventstream_codec_1.EventStreamCodec(utf8Encoder, utf8Decoder);
        this.utfEncoder = utf8Encoder;
      }
      deserialize(body, deserializer) {
        const chunkedStream = (0, getChunkedStream_1.getChunkedStream)(body);
        const unmarshalledStream = (0, getUnmarshalledStream_1.getUnmarshalledStream)(chunkedStream, {
          eventStreamCodec: this.eventStreamCodec,
          deserializer,
          toUtf8: this.utfEncoder
        });
        return unmarshalledStream;
      }
      serialize(input, serializer) {
        const self = this;
        const serializedIterator = async function* () {
          for await (const chunk of input) {
            const payloadBuf = self.eventStreamCodec.encode(serializer(chunk));
            yield payloadBuf;
          }
          yield new Uint8Array(0);
        };
        return {
          [Symbol.asyncIterator]: serializedIterator
        };
      }
    };
    exports2.EventStreamMarshaller = EventStreamMarshaller;
  }
});

var require_provider = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eventStreamSerdeProvider = void 0;
    var EventStreamMarshaller_1 = require_EventStreamMarshaller();
    var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
    exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
  }
});

var require_dist_cjs61 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-universal/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamMarshaller(), exports2);
    tslib_1.__exportStar(require_provider(), exports2);
  }
});

var require_utils2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/utils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readabletoIterable = void 0;
    async function* readabletoIterable(readStream) {
      let streamEnded = false;
      let generationEnded = false;
      const records = new Array();
      readStream.on("error", (err) => {
        if (!streamEnded) {
          streamEnded = true;
        }
        if (err) {
          throw err;
        }
      });
      readStream.on("data", (data) => {
        records.push(data);
      });
      readStream.on("end", () => {
        streamEnded = true;
      });
      while (!generationEnded) {
        const value = await new Promise((resolve) => setTimeout(() => resolve(records.shift()), 0));
        if (value) {
          yield value;
        }
        generationEnded = streamEnded && records.length === 0;
      }
    }
    exports2.readabletoIterable = readabletoIterable;
  }
});

var require_EventStreamMarshaller2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/EventStreamMarshaller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.EventStreamMarshaller = void 0;
    var eventstream_serde_universal_1 = require_dist_cjs61();
    var stream_1 = require("stream");
    var utils_1 = require_utils2();
    var EventStreamMarshaller = class {
      constructor({ utf8Encoder, utf8Decoder }) {
        this.universalMarshaller = new eventstream_serde_universal_1.EventStreamMarshaller({
          utf8Decoder,
          utf8Encoder
        });
      }
      deserialize(body, deserializer) {
        const bodyIterable = typeof body[Symbol.asyncIterator] === "function" ? body : (0, utils_1.readabletoIterable)(body);
        return this.universalMarshaller.deserialize(bodyIterable, deserializer);
      }
      serialize(input, serializer) {
        const serializedIterable = this.universalMarshaller.serialize(input, serializer);
        if (typeof stream_1.Readable.from === "function") {
          return stream_1.Readable.from(serializedIterable);
        } else {
          const iterator = serializedIterable[Symbol.asyncIterator]();
          const serializedStream = new stream_1.Readable({
            autoDestroy: true,
            objectMode: true,
            async read() {
              iterator.next().then(({ done, value }) => {
                if (done) {
                  this.push(null);
                } else {
                  this.push(value);
                }
              }).catch((err) => {
                this.destroy(err);
              });
            }
          });
          serializedStream.on("error", () => {
            serializedStream.destroy();
          });
          serializedStream.on("end", () => {
            serializedStream.destroy();
          });
          return serializedStream;
        }
      }
    };
    exports2.EventStreamMarshaller = EventStreamMarshaller;
  }
});

var require_provider2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/provider.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.eventStreamSerdeProvider = void 0;
    var EventStreamMarshaller_1 = require_EventStreamMarshaller2();
    var eventStreamSerdeProvider = (options) => new EventStreamMarshaller_1.EventStreamMarshaller(options);
    exports2.eventStreamSerdeProvider = eventStreamSerdeProvider;
  }
});

var require_dist_cjs62 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/eventstream-serde-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_EventStreamMarshaller2(), exports2);
    tslib_1.__exportStar(require_provider2(), exports2);
  }
});

var require_HashCalculator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/hash-stream-node/dist-cjs/HashCalculator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.HashCalculator = void 0;
    var util_utf8_1 = require_dist_cjs17();
    var stream_1 = require("stream");
    var HashCalculator = class extends stream_1.Writable {
      constructor(hash, options) {
        super(options);
        this.hash = hash;
      }
      _write(chunk, encoding, callback) {
        try {
          this.hash.update((0, util_utf8_1.toUint8Array)(chunk));
        } catch (err) {
          return callback(err);
        }
        callback();
      }
    };
    exports2.HashCalculator = HashCalculator;
  }
});

var require_fileStreamHasher = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/hash-stream-node/dist-cjs/fileStreamHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.fileStreamHasher = void 0;
    var fs_1 = require("fs");
    var HashCalculator_1 = require_HashCalculator();
    var fileStreamHasher = (hashCtor, fileStream) => new Promise((resolve, reject) => {
      if (!isReadStream(fileStream)) {
        reject(new Error("Unable to calculate hash for non-file streams."));
        return;
      }
      const fileStreamTee = (0, fs_1.createReadStream)(fileStream.path, {
        start: fileStream.start,
        end: fileStream.end
      });
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator_1.HashCalculator(hash);
      fileStreamTee.pipe(hashCalculator);
      fileStreamTee.on("error", (err) => {
        hashCalculator.end();
        reject(err);
      });
      hashCalculator.on("error", reject);
      hashCalculator.on("finish", function() {
        hash.digest().then(resolve).catch(reject);
      });
    });
    exports2.fileStreamHasher = fileStreamHasher;
    var isReadStream = (stream) => typeof stream.path === "string";
  }
});

var require_readableStreamHasher = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/hash-stream-node/dist-cjs/readableStreamHasher.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.readableStreamHasher = void 0;
    var HashCalculator_1 = require_HashCalculator();
    var readableStreamHasher = (hashCtor, readableStream) => {
      if (readableStream.readableFlowing !== null) {
        throw new Error("Unable to calculate hash for flowing readable stream");
      }
      const hash = new hashCtor();
      const hashCalculator = new HashCalculator_1.HashCalculator(hash);
      readableStream.pipe(hashCalculator);
      return new Promise((resolve, reject) => {
        readableStream.on("error", (err) => {
          hashCalculator.end();
          reject(err);
        });
        hashCalculator.on("error", reject);
        hashCalculator.on("finish", () => {
          hash.digest().then(resolve).catch(reject);
        });
      });
    };
    exports2.readableStreamHasher = readableStreamHasher;
  }
});

var require_dist_cjs63 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/hash-stream-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_fileStreamHasher(), exports2);
    tslib_1.__exportStar(require_readableStreamHasher(), exports2);
  }
});

var require_NodeDisableMultiregionAccessPointConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeDisableMultiregionAccessPointConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = void 0;
    var util_config_provider_1 = require_dist_cjs19();
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME = "AWS_S3_DISABLE_MULTIREGION_ACCESS_POINTS";
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME = "s3_disable_multiregion_access_points";
    exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_ENV_NAME, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.NODE_DISABLE_MULTIREGION_ACCESS_POINT_INI_NAME, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_NodeUseArnRegionConfigOptions = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/NodeUseArnRegionConfigOptions.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = exports2.NODE_USE_ARN_REGION_INI_NAME = exports2.NODE_USE_ARN_REGION_ENV_NAME = void 0;
    var util_config_provider_1 = require_dist_cjs19();
    exports2.NODE_USE_ARN_REGION_ENV_NAME = "AWS_S3_USE_ARN_REGION";
    exports2.NODE_USE_ARN_REGION_INI_NAME = "s3_use_arn_region";
    exports2.NODE_USE_ARN_REGION_CONFIG_OPTIONS = {
      environmentVariableSelector: (env) => (0, util_config_provider_1.booleanSelector)(env, exports2.NODE_USE_ARN_REGION_ENV_NAME, util_config_provider_1.SelectorType.ENV),
      configFileSelector: (profile) => (0, util_config_provider_1.booleanSelector)(profile, exports2.NODE_USE_ARN_REGION_INI_NAME, util_config_provider_1.SelectorType.CONFIG),
      default: false
    };
  }
});

var require_bucketHostnameUtils = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostnameUtils.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateMrapAlias = exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.getArnResources = exports2.validateCustomEndpoint = exports2.validateDNSHostLabel = exports2.validateAccountId = exports2.validateRegionalClient = exports2.validateRegion = exports2.validatePartition = exports2.validateOutpostService = exports2.validateS3Service = exports2.validateService = exports2.validateArnEndpointOptions = exports2.getSuffixForArnEndpoint = exports2.getSuffix = exports2.isDnsCompatibleBucketName = exports2.isBucketNameOptions = exports2.S3_HOSTNAME_PATTERN = exports2.DOT_PATTERN = void 0;
    var DOMAIN_PATTERN = /^[a-z0-9][a-z0-9\.\-]{1,61}[a-z0-9]$/;
    var IP_ADDRESS_PATTERN = /(\d+\.){3}\d+/;
    var DOTS_PATTERN = /\.\./;
    exports2.DOT_PATTERN = /\./;
    exports2.S3_HOSTNAME_PATTERN = /^(.+\.)?s3(-fips)?(\.dualstack)?[.-]([a-z0-9-]+)\./;
    var S3_US_EAST_1_ALTNAME_PATTERN = /^s3(-external-1)?\.amazonaws\.com$/;
    var AWS_PARTITION_SUFFIX = "amazonaws.com";
    var isBucketNameOptions = (options) => typeof options.bucketName === "string";
    exports2.isBucketNameOptions = isBucketNameOptions;
    var isDnsCompatibleBucketName = (bucketName) => DOMAIN_PATTERN.test(bucketName) && !IP_ADDRESS_PATTERN.test(bucketName) && !DOTS_PATTERN.test(bucketName);
    exports2.isDnsCompatibleBucketName = isDnsCompatibleBucketName;
    var getRegionalSuffix = (hostname) => {
      const parts = hostname.match(exports2.S3_HOSTNAME_PATTERN);
      return [parts[4], hostname.replace(new RegExp(`^${parts[0]}`), "")];
    };
    var getSuffix = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? ["us-east-1", AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
    exports2.getSuffix = getSuffix;
    var getSuffixForArnEndpoint = (hostname) => S3_US_EAST_1_ALTNAME_PATTERN.test(hostname) ? [hostname.replace(`.${AWS_PARTITION_SUFFIX}`, ""), AWS_PARTITION_SUFFIX] : getRegionalSuffix(hostname);
    exports2.getSuffixForArnEndpoint = getSuffixForArnEndpoint;
    var validateArnEndpointOptions = (options) => {
      if (options.pathStyleEndpoint) {
        throw new Error("Path-style S3 endpoint is not supported when bucket is an ARN");
      }
      if (options.accelerateEndpoint) {
        throw new Error("Accelerate endpoint is not supported when bucket is an ARN");
      }
      if (!options.tlsCompatible) {
        throw new Error("HTTPS is required when bucket is an ARN");
      }
    };
    exports2.validateArnEndpointOptions = validateArnEndpointOptions;
    var validateService = (service) => {
      if (service !== "s3" && service !== "s3-outposts" && service !== "s3-object-lambda") {
        throw new Error("Expect 's3' or 's3-outposts' or 's3-object-lambda' in ARN service component");
      }
    };
    exports2.validateService = validateService;
    var validateS3Service = (service) => {
      if (service !== "s3") {
        throw new Error("Expect 's3' in Accesspoint ARN service component");
      }
    };
    exports2.validateS3Service = validateS3Service;
    var validateOutpostService = (service) => {
      if (service !== "s3-outposts") {
        throw new Error("Expect 's3-posts' in Outpost ARN service component");
      }
    };
    exports2.validateOutpostService = validateOutpostService;
    var validatePartition = (partition, options) => {
      if (partition !== options.clientPartition) {
        throw new Error(`Partition in ARN is incompatible, got "${partition}" but expected "${options.clientPartition}"`);
      }
    };
    exports2.validatePartition = validatePartition;
    var validateRegion = (region, options) => {
      if (region === "") {
        throw new Error("ARN region is empty");
      }
      if (options.useFipsEndpoint) {
        if (!options.allowFipsRegion) {
          throw new Error("FIPS region is not supported");
        } else if (!isEqualRegions(region, options.clientRegion)) {
          throw new Error(`Client FIPS region ${options.clientRegion} doesn't match region ${region} in ARN`);
        }
      }
      if (!options.useArnRegion && !isEqualRegions(region, options.clientRegion || "") && !isEqualRegions(region, options.clientSigningRegion || "")) {
        throw new Error(`Region in ARN is incompatible, got ${region} but expected ${options.clientRegion}`);
      }
    };
    exports2.validateRegion = validateRegion;
    var validateRegionalClient = (region) => {
      if (["s3-external-1", "aws-global"].includes(region)) {
        throw new Error(`Client region ${region} is not regional`);
      }
    };
    exports2.validateRegionalClient = validateRegionalClient;
    var isEqualRegions = (regionA, regionB) => regionA === regionB;
    var validateAccountId = (accountId) => {
      if (!/[0-9]{12}/.exec(accountId)) {
        throw new Error("Access point ARN accountID does not match regex '[0-9]{12}'");
      }
    };
    exports2.validateAccountId = validateAccountId;
    var validateDNSHostLabel = (label, options = { tlsCompatible: true }) => {
      if (label.length >= 64 || !/^[a-z0-9][a-z0-9.-]*[a-z0-9]$/.test(label) || /(\d+\.){3}\d+/.test(label) || /[.-]{2}/.test(label) || (options === null || options === void 0 ? void 0 : options.tlsCompatible) && exports2.DOT_PATTERN.test(label)) {
        throw new Error(`Invalid DNS label ${label}`);
      }
    };
    exports2.validateDNSHostLabel = validateDNSHostLabel;
    var validateCustomEndpoint = (options) => {
      if (options.isCustomEndpoint) {
        if (options.dualstackEndpoint)
          throw new Error("Dualstack endpoint is not supported with custom endpoint");
        if (options.accelerateEndpoint)
          throw new Error("Accelerate endpoint is not supported with custom endpoint");
      }
    };
    exports2.validateCustomEndpoint = validateCustomEndpoint;
    var getArnResources = (resource) => {
      const delimiter = resource.includes(":") ? ":" : "/";
      const [resourceType, ...rest] = resource.split(delimiter);
      if (resourceType === "accesspoint") {
        if (rest.length !== 1 || rest[0] === "") {
          throw new Error(`Access Point ARN should have one resource accesspoint${delimiter}{accesspointname}`);
        }
        return { accesspointName: rest[0] };
      } else if (resourceType === "outpost") {
        if (!rest[0] || rest[1] !== "accesspoint" || !rest[2] || rest.length !== 3) {
          throw new Error(`Outpost ARN should have resource outpost${delimiter}{outpostId}${delimiter}accesspoint${delimiter}{accesspointName}`);
        }
        const [outpostId, _, accesspointName] = rest;
        return { outpostId, accesspointName };
      } else {
        throw new Error(`ARN resource should begin with 'accesspoint${delimiter}' or 'outpost${delimiter}'`);
      }
    };
    exports2.getArnResources = getArnResources;
    var validateNoDualstack = (dualstackEndpoint) => {
      if (dualstackEndpoint)
        throw new Error("Dualstack endpoint is not supported with Outpost or Multi-region Access Point ARN.");
    };
    exports2.validateNoDualstack = validateNoDualstack;
    var validateNoFIPS = (useFipsEndpoint) => {
      if (useFipsEndpoint)
        throw new Error(`FIPS region is not supported with Outpost.`);
    };
    exports2.validateNoFIPS = validateNoFIPS;
    var validateMrapAlias = (name) => {
      try {
        name.split(".").forEach((label) => {
          (0, exports2.validateDNSHostLabel)(label);
        });
      } catch (e) {
        throw new Error(`"${name}" is not a DNS compatible name.`);
      }
    };
    exports2.validateMrapAlias = validateMrapAlias;
  }
});

var require_bucketHostname = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketHostname.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.bucketHostname = void 0;
    var bucketHostnameUtils_1 = require_bucketHostnameUtils();
    var bucketHostname = (options) => {
      (0, bucketHostnameUtils_1.validateCustomEndpoint)(options);
      return (0, bucketHostnameUtils_1.isBucketNameOptions)(options) ? getEndpointFromBucketName(options) : getEndpointFromArn(options);
    };
    exports2.bucketHostname = bucketHostname;
    var getEndpointFromBucketName = ({ accelerateEndpoint = false, clientRegion: region, baseHostname, bucketName, dualstackEndpoint = false, fipsEndpoint = false, pathStyleEndpoint = false, tlsCompatible = true, isCustomEndpoint = false }) => {
      const [clientRegion, hostnameSuffix] = isCustomEndpoint ? [region, baseHostname] : (0, bucketHostnameUtils_1.getSuffix)(baseHostname);
      if (pathStyleEndpoint || !(0, bucketHostnameUtils_1.isDnsCompatibleBucketName)(bucketName) || tlsCompatible && bucketHostnameUtils_1.DOT_PATTERN.test(bucketName)) {
        return {
          bucketEndpoint: false,
          hostname: dualstackEndpoint ? `s3.dualstack.${clientRegion}.${hostnameSuffix}` : baseHostname
        };
      }
      if (accelerateEndpoint) {
        baseHostname = `s3-accelerate${dualstackEndpoint ? ".dualstack" : ""}.${hostnameSuffix}`;
      } else if (dualstackEndpoint) {
        baseHostname = `s3.dualstack.${clientRegion}.${hostnameSuffix}`;
      }
      return {
        bucketEndpoint: true,
        hostname: `${bucketName}.${baseHostname}`
      };
    };
    var getEndpointFromArn = (options) => {
      const { isCustomEndpoint, baseHostname, clientRegion } = options;
      const hostnameSuffix = isCustomEndpoint ? baseHostname : (0, bucketHostnameUtils_1.getSuffixForArnEndpoint)(baseHostname)[1];
      const { pathStyleEndpoint, accelerateEndpoint = false, fipsEndpoint = false, tlsCompatible = true, bucketName, clientPartition = "aws" } = options;
      (0, bucketHostnameUtils_1.validateArnEndpointOptions)({ pathStyleEndpoint, accelerateEndpoint, tlsCompatible });
      const { service, partition, accountId, region, resource } = bucketName;
      (0, bucketHostnameUtils_1.validateService)(service);
      (0, bucketHostnameUtils_1.validatePartition)(partition, { clientPartition });
      (0, bucketHostnameUtils_1.validateAccountId)(accountId);
      const { accesspointName, outpostId } = (0, bucketHostnameUtils_1.getArnResources)(resource);
      if (service === "s3-object-lambda") {
        return getEndpointFromObjectLambdaArn({ ...options, tlsCompatible, bucketName, accesspointName, hostnameSuffix });
      }
      if (region === "") {
        return getEndpointFromMRAPArn({ ...options, clientRegion, mrapAlias: accesspointName, hostnameSuffix });
      }
      if (outpostId) {
        return getEndpointFromOutpostArn({ ...options, clientRegion, outpostId, accesspointName, hostnameSuffix });
      }
      return getEndpointFromAccessPointArn({ ...options, clientRegion, accesspointName, hostnameSuffix });
    };
    var getEndpointFromObjectLambdaArn = ({ dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, useArnRegion, clientRegion, clientSigningRegion = clientRegion, accesspointName, bucketName, hostnameSuffix }) => {
      const { accountId, region, service } = bucketName;
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      const DNSHostLabel = `${accesspointName}-${accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? region : clientRegion;
      const signingRegion = useArnRegion ? region : clientSigningRegion;
      return {
        bucketEndpoint: true,
        hostname: `${DNSHostLabel}.${service}${fipsEndpoint ? "-fips" : ""}.${endpointRegion}.${hostnameSuffix}`,
        signingRegion,
        signingService: service
      };
    };
    var getEndpointFromMRAPArn = ({ disableMultiregionAccessPoints, dualstackEndpoint = false, isCustomEndpoint, mrapAlias, hostnameSuffix }) => {
      if (disableMultiregionAccessPoints === true) {
        throw new Error("SDK is attempting to use a MRAP ARN. Please enable to feature.");
      }
      (0, bucketHostnameUtils_1.validateMrapAlias)(mrapAlias);
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      return {
        bucketEndpoint: true,
        hostname: `${mrapAlias}${isCustomEndpoint ? "" : `.accesspoint.s3-global`}.${hostnameSuffix}`,
        signingRegion: "*"
      };
    };
    var getEndpointFromOutpostArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, outpostId, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix }) => {
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(bucketName.region, { useArnRegion, clientRegion, clientSigningRegion, useFipsEndpoint: fipsEndpoint });
      const DNSHostLabel = `${accesspointName}-${bucketName.accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(DNSHostLabel, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      (0, bucketHostnameUtils_1.validateOutpostService)(bucketName.service);
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(outpostId, { tlsCompatible });
      (0, bucketHostnameUtils_1.validateNoDualstack)(dualstackEndpoint);
      (0, bucketHostnameUtils_1.validateNoFIPS)(fipsEndpoint);
      const hostnamePrefix = `${DNSHostLabel}.${outpostId}`;
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-outposts.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion,
        signingService: "s3-outposts"
      };
    };
    var getEndpointFromAccessPointArn = ({ useArnRegion, clientRegion, clientSigningRegion = clientRegion, bucketName, dualstackEndpoint = false, fipsEndpoint = false, tlsCompatible = true, accesspointName, isCustomEndpoint, hostnameSuffix }) => {
      (0, bucketHostnameUtils_1.validateRegionalClient)(clientRegion);
      (0, bucketHostnameUtils_1.validateRegion)(bucketName.region, {
        useArnRegion,
        clientRegion,
        clientSigningRegion,
        allowFipsRegion: true,
        useFipsEndpoint: fipsEndpoint
      });
      const hostnamePrefix = `${accesspointName}-${bucketName.accountId}`;
      (0, bucketHostnameUtils_1.validateDNSHostLabel)(hostnamePrefix, { tlsCompatible });
      const endpointRegion = useArnRegion ? bucketName.region : clientRegion;
      const signingRegion = useArnRegion ? bucketName.region : clientSigningRegion;
      (0, bucketHostnameUtils_1.validateS3Service)(bucketName.service);
      return {
        bucketEndpoint: true,
        hostname: `${hostnamePrefix}${isCustomEndpoint ? "" : `.s3-accesspoint${fipsEndpoint ? "-fips" : ""}${dualstackEndpoint ? ".dualstack" : ""}.${endpointRegion}`}.${hostnameSuffix}`,
        signingRegion
      };
    };
  }
});

var require_bucketEndpointMiddleware = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/bucketEndpointMiddleware.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getBucketEndpointPlugin = exports2.bucketEndpointMiddlewareOptions = exports2.bucketEndpointMiddleware = void 0;
    var protocol_http_1 = require_dist_cjs8();
    var util_arn_parser_1 = require_dist_cjs10();
    var bucketHostname_1 = require_bucketHostname();
    var bucketEndpointMiddleware = (options) => (next, context) => async (args) => {
      const { Bucket: bucketName } = args.input;
      let replaceBucketInPath = options.bucketEndpoint;
      const request = args.request;
      if (protocol_http_1.HttpRequest.isInstance(request)) {
        if (options.bucketEndpoint) {
          request.hostname = bucketName;
        } else if ((0, util_arn_parser_1.validate)(bucketName)) {
          const bucketArn = (0, util_arn_parser_1.parse)(bucketName);
          const clientRegion = await options.region();
          const useDualstackEndpoint = await options.useDualstackEndpoint();
          const useFipsEndpoint = await options.useFipsEndpoint();
          const { partition, signingRegion = clientRegion } = await options.regionInfoProvider(clientRegion, { useDualstackEndpoint, useFipsEndpoint }) || {};
          const useArnRegion = await options.useArnRegion();
          const { hostname, bucketEndpoint, signingRegion: modifiedSigningRegion, signingService } = (0, bucketHostname_1.bucketHostname)({
            bucketName: bucketArn,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint: useDualstackEndpoint,
            fipsEndpoint: useFipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            useArnRegion,
            clientPartition: partition,
            clientSigningRegion: signingRegion,
            clientRegion,
            isCustomEndpoint: options.isCustomEndpoint,
            disableMultiregionAccessPoints: await options.disableMultiregionAccessPoints()
          });
          if (modifiedSigningRegion && modifiedSigningRegion !== signingRegion) {
            context["signing_region"] = modifiedSigningRegion;
          }
          if (signingService && signingService !== "s3") {
            context["signing_service"] = signingService;
          }
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        } else {
          const clientRegion = await options.region();
          const dualstackEndpoint = await options.useDualstackEndpoint();
          const fipsEndpoint = await options.useFipsEndpoint();
          const { hostname, bucketEndpoint } = (0, bucketHostname_1.bucketHostname)({
            bucketName,
            clientRegion,
            baseHostname: request.hostname,
            accelerateEndpoint: options.useAccelerateEndpoint,
            dualstackEndpoint,
            fipsEndpoint,
            pathStyleEndpoint: options.forcePathStyle,
            tlsCompatible: request.protocol === "https:",
            isCustomEndpoint: options.isCustomEndpoint
          });
          request.hostname = hostname;
          replaceBucketInPath = bucketEndpoint;
        }
        if (replaceBucketInPath) {
          request.path = request.path.replace(/^(\/)?[^\/]+/, "");
          if (request.path === "") {
            request.path = "/";
          }
        }
      }
      return next({ ...args, request });
    };
    exports2.bucketEndpointMiddleware = bucketEndpointMiddleware;
    exports2.bucketEndpointMiddlewareOptions = {
      tags: ["BUCKET_ENDPOINT"],
      name: "bucketEndpointMiddleware",
      relation: "before",
      toMiddleware: "hostHeaderMiddleware",
      override: true
    };
    var getBucketEndpointPlugin = (options) => ({
      applyToStack: (clientStack) => {
        clientStack.addRelativeTo((0, exports2.bucketEndpointMiddleware)(options), exports2.bucketEndpointMiddlewareOptions);
      }
    });
    exports2.getBucketEndpointPlugin = getBucketEndpointPlugin;
  }
});

var require_configurations4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/configurations.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.resolveBucketEndpointConfig = void 0;
    function resolveBucketEndpointConfig(input) {
      const { bucketEndpoint = false, forcePathStyle = false, useAccelerateEndpoint = false, useArnRegion = false, disableMultiregionAccessPoints = false } = input;
      return {
        ...input,
        bucketEndpoint,
        forcePathStyle,
        useAccelerateEndpoint,
        useArnRegion: typeof useArnRegion === "function" ? useArnRegion : () => Promise.resolve(useArnRegion),
        disableMultiregionAccessPoints: typeof disableMultiregionAccessPoints === "function" ? disableMultiregionAccessPoints : () => Promise.resolve(disableMultiregionAccessPoints)
      };
    }
    exports2.resolveBucketEndpointConfig = resolveBucketEndpointConfig;
  }
});

var require_dist_cjs64 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/middleware-bucket-endpoint/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateNoFIPS = exports2.validateNoDualstack = exports2.validateDNSHostLabel = exports2.validateRegion = exports2.validateAccountId = exports2.validatePartition = exports2.validateOutpostService = exports2.getSuffixForArnEndpoint = exports2.getArnResources = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_NodeDisableMultiregionAccessPointConfigOptions(), exports2);
    tslib_1.__exportStar(require_NodeUseArnRegionConfigOptions(), exports2);
    tslib_1.__exportStar(require_bucketEndpointMiddleware(), exports2);
    tslib_1.__exportStar(require_bucketHostname(), exports2);
    tslib_1.__exportStar(require_configurations4(), exports2);
    var bucketHostnameUtils_1 = require_bucketHostnameUtils();
    Object.defineProperty(exports2, "getArnResources", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.getArnResources;
    } });
    Object.defineProperty(exports2, "getSuffixForArnEndpoint", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.getSuffixForArnEndpoint;
    } });
    Object.defineProperty(exports2, "validateOutpostService", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateOutpostService;
    } });
    Object.defineProperty(exports2, "validatePartition", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validatePartition;
    } });
    Object.defineProperty(exports2, "validateAccountId", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateAccountId;
    } });
    Object.defineProperty(exports2, "validateRegion", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateRegion;
    } });
    Object.defineProperty(exports2, "validateDNSHostLabel", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateDNSHostLabel;
    } });
    Object.defineProperty(exports2, "validateNoDualstack", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateNoDualstack;
    } });
    Object.defineProperty(exports2, "validateNoFIPS", { enumerable: true, get: function() {
      return bucketHostnameUtils_1.validateNoFIPS;
    } });
  }
});

var require_getAwsChunkedEncodingStream = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-stream-node/dist-cjs/getAwsChunkedEncodingStream.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getAwsChunkedEncodingStream = void 0;
    var stream_1 = require("stream");
    var getAwsChunkedEncodingStream = (readableStream, options) => {
      const { base64Encoder, bodyLengthChecker, checksumAlgorithmFn, checksumLocationName, streamHasher } = options;
      const checksumRequired = base64Encoder !== void 0 && checksumAlgorithmFn !== void 0 && checksumLocationName !== void 0 && streamHasher !== void 0;
      const digest = checksumRequired ? streamHasher(checksumAlgorithmFn, readableStream) : void 0;
      const awsChunkedEncodingStream = new stream_1.Readable({ read: () => {
      } });
      readableStream.on("data", (data) => {
        awsChunkedEncodingStream.push(`${(bodyLengthChecker(data) || 0).toString(16)}\r
${data.toString()}\r
`);
      });
      readableStream.on("end", async () => {
        awsChunkedEncodingStream.push(`0\r
`);
        if (checksumRequired) {
          const checksum = base64Encoder(await digest);
          awsChunkedEncodingStream.push(`${checksumLocationName}:${checksum}\r
`);
          awsChunkedEncodingStream.push(`\r
`);
        }
        awsChunkedEncodingStream.push(null);
      });
      return awsChunkedEncodingStream;
    };
    exports2.getAwsChunkedEncodingStream = getAwsChunkedEncodingStream;
  }
});

var require_sdk_stream_mixin = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-stream-node/dist-cjs/sdk-stream-mixin.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sdkStreamMixin = void 0;
    var node_http_handler_1 = require_dist_cjs44();
    var util_buffer_from_1 = require_dist_cjs16();
    var stream_1 = require("stream");
    var util_1 = require("util");
    var ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED = "The stream has already been transformed.";
    var sdkStreamMixin = (stream) => {
      var _a, _b;
      if (!(stream instanceof stream_1.Readable)) {
        const name = ((_b = (_a = stream === null || stream === void 0 ? void 0 : stream.__proto__) === null || _a === void 0 ? void 0 : _a.constructor) === null || _b === void 0 ? void 0 : _b.name) || stream;
        throw new Error(`Unexpected stream implementation, expect Stream.Readable instance, got ${name}`);
      }
      let transformed = false;
      const transformToByteArray = async () => {
        if (transformed) {
          throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
        }
        transformed = true;
        return await (0, node_http_handler_1.streamCollector)(stream);
      };
      return Object.assign(stream, {
        transformToByteArray,
        transformToString: async (encoding) => {
          const buf = await transformToByteArray();
          if (encoding === void 0 || Buffer.isEncoding(encoding)) {
            return (0, util_buffer_from_1.fromArrayBuffer)(buf.buffer, buf.byteOffset, buf.byteLength).toString(encoding);
          } else {
            const decoder = new util_1.TextDecoder(encoding);
            return decoder.decode(buf);
          }
        },
        transformToWebStream: () => {
          if (transformed) {
            throw new Error(ERR_MSG_STREAM_HAS_BEEN_TRANSFORMED);
          }
          if (stream.readableFlowing !== null) {
            throw new Error("The stream has been consumed by other callbacks.");
          }
          if (typeof stream_1.Readable.toWeb !== "function") {
            throw new Error("Readable.toWeb() is not supported. Please make sure you are using Node.js >= 17.0.0, or polyfill is available.");
          }
          transformed = true;
          return stream_1.Readable.toWeb(stream);
        }
      });
    };
    exports2.sdkStreamMixin = sdkStreamMixin;
  }
});

var require_dist_cjs65 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-stream-node/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_getAwsChunkedEncodingStream(), exports2);
    tslib_1.__exportStar(require_sdk_stream_mixin(), exports2);
  }
});

var require_SignatureV4MultiRegion = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/SignatureV4MultiRegion.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.SignatureV4MultiRegion = void 0;
    var signature_v4_1 = require_dist_cjs33();
    var SignatureV4MultiRegion = class {
      constructor(options) {
        this.sigv4Signer = new signature_v4_1.SignatureV4(options);
        this.signerOptions = options;
      }
      async sign(requestToSign, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().sign(requestToSign, options);
        }
        return this.sigv4Signer.sign(requestToSign, options);
      }
      async presign(originalRequest, options = {}) {
        if (options.signingRegion === "*") {
          if (this.signerOptions.runtime !== "node")
            throw new Error("This request requires signing with SigV4Asymmetric algorithm. It's only available in Node.js");
          return this.getSigv4aSigner().presign(originalRequest, options);
        }
        return this.sigv4Signer.presign(originalRequest, options);
      }
      getSigv4aSigner() {
        if (!this.sigv4aSigner) {
          let CrtSignerV4;
          try {
            CrtSignerV4 = typeof require === "function" && require("@aws-sdk/signature-v4-crt").CrtSignerV4;
            if (typeof CrtSignerV4 !== "function")
              throw new Error();
          } catch (e) {
            e.message = `${e.message}
Please check if you have installed "@aws-sdk/signature-v4-crt" package explicitly. 
For more information please go to https://github.com/aws/aws-sdk-js-v3#functionality-requiring-aws-common-runtime-crt`;
            throw e;
          }
          this.sigv4aSigner = new CrtSignerV4({
            ...this.signerOptions,
            signingAlgorithm: 1
          });
        }
        return this.sigv4aSigner;
      }
    };
    exports2.SignatureV4MultiRegion = SignatureV4MultiRegion;
  }
});

var require_dist_cjs66 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/signature-v4-multi-region/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_SignatureV4MultiRegion(), exports2);
  }
});

var require_ruleset4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/ruleset.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.ruleSet = void 0;
    var bV = "required";
    var bW = "type";
    var bX = "rules";
    var bY = "conditions";
    var bZ = "fn";
    var ca = "argv";
    var cb = "ref";
    var cc = "assign";
    var cd = "url";
    var ce = "properties";
    var cf = "authSchemes";
    var cg = "signingName";
    var ch = "disableDoubleEncoding";
    var ci = "signingRegion";
    var cj = "headers";
    var a = false;
    var b = true;
    var c = "tree";
    var d = "isSet";
    var e = "substring";
    var f = "hardwareType";
    var g = "regionPrefix";
    var h = "abbaSuffix";
    var i = "outpostId";
    var j = "aws.partition";
    var k = "stringEquals";
    var l = "isValidHostLabel";
    var m = "not";
    var n = "error";
    var o = "parseURL";
    var p = "s3-outposts";
    var q = "endpoint";
    var r = "booleanEquals";
    var s = "aws.parseArn";
    var t = "s3";
    var u = "aws.isVirtualHostableS3Bucket";
    var v = "getAttr";
    var w = "name";
    var x = "Host override cannot be combined with Dualstack, FIPS, or S3 Accelerate";
    var y = "https://{Bucket}.s3.{partitionResult#dnsSuffix}";
    var z = "bucketArn";
    var A = "arnType";
    var B = "";
    var C = "s3-object-lambda";
    var D = "accesspoint";
    var E = "accessPointName";
    var F = "{url#scheme}://{accessPointName}-{bucketArn#accountId}.{url#authority}{url#path}";
    var G = "mrapPartition";
    var H = "outpostType";
    var I = "arnPrefix";
    var J = "{url#scheme}://{url#authority}{url#path}";
    var K = "https://s3.{partitionResult#dnsSuffix}";
    var L = { [bV]: false, [bW]: "String" };
    var M = { [bV]: true, "default": false, [bW]: "Boolean" };
    var N = { [bV]: false, [bW]: "Boolean" };
    var O = { [bZ]: d, [ca]: [{ [cb]: "Bucket" }] };
    var P = { [cb]: "Bucket" };
    var Q = { [cb]: f };
    var R = { [bY]: [{ [bZ]: m, [ca]: [{ [bZ]: d, [ca]: [{ [cb]: "Endpoint" }] }] }], [n]: "Expected a endpoint to be specified but no endpoint was found", [bW]: n };
    var S = { [bZ]: m, [ca]: [{ [bZ]: d, [ca]: [{ [cb]: "Endpoint" }] }] };
    var T = { [bZ]: d, [ca]: [{ [cb]: "Endpoint" }] };
    var U = { [bZ]: o, [ca]: [{ [cb]: "Endpoint" }], [cc]: "url" };
    var V = { [cf]: [{ [w]: "sigv4", [cg]: p, [ch]: true, [ci]: "{Region}" }] };
    var W = {};
    var X = { [cb]: "ForcePathStyle" };
    var Y = { [bY]: [{ [bZ]: "uriEncode", [ca]: [P], [cc]: "uri_encoded_bucket" }], [bW]: c, [bX]: [{ [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] }, T], [n]: "Cannot set dual-stack in combination with a custom endpoint.", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: j, [ca]: [{ [cb]: "Region" }], [cc]: "partitionResult" }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "Accelerate" }, false] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseFIPS" }, false] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] }, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] }, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] }, S, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, true] }], [bW]: c, [bX]: [{ [q]: { [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }] }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] }, S, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, false] }], [q]: { [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, T, U, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, true] }], [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "us-east-1"] }], [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }, { [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }] }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, T, U, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, false] }], [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, S, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, true] }], [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "us-east-1"] }], [q]: { [cd]: "https://s3.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }, { [q]: { [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }] }, { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] }, S, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] }, { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, false] }], [q]: { [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}/{uri_encoded_bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] }, [cj]: {} }, [bW]: q }] }] }, { [n]: "Path-style addressing cannot be used with FIPS", [bW]: n }] }] }, { [n]: "Path-style addressing cannot be used with S3 Accelerate", [bW]: n }] }] }, { [n]: "A valid partition could not be determined", [bW]: n }] }] };
    var Z = { [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, true] };
    var aa = { [bZ]: r, [ca]: [{ [cb]: "Accelerate" }, false] };
    var ab = { [bZ]: r, [ca]: [{ [cb]: "UseFIPS" }, false] };
    var ac = { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }] };
    var ad = { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, true] };
    var ae = { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{Region}" }] };
    var af = { [bZ]: r, [ca]: [{ [cb]: "UseGlobalEndpoint" }, false] };
    var ag = { [bZ]: r, [ca]: [{ [cb]: "UseDualStack" }, false] };
    var ah = { [n]: "A valid partition could not be determined", [bW]: n };
    var ai = { [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "UseFIPS" }, true] }, { [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [{ [cb]: "partitionResult" }, w] }, "aws-cn"] }], [n]: "Partition does not support FIPS", [bW]: n };
    var aj = { [bZ]: r, [ca]: [{ [cb]: "UseFIPS" }, true] };
    var ak = { [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [{ [cb]: "partitionResult" }, w] }, "aws-cn"] };
    var al = { [bZ]: r, [ca]: [{ [cb]: "Accelerate" }, true] };
    var am = { [bY]: [Z, aj, aa, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://{Bucket}.s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var an = { [cd]: "https://{Bucket}.s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var ao = { [bY]: [ag, aj, aa, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://{Bucket}.s3-fips.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var ap = { [cd]: "https://{Bucket}.s3-fips.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var aq = { [bY]: [Z, ab, al, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://{Bucket}.s3-accelerate.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var ar = { [cd]: "https://{Bucket}.s3-accelerate.dualstack.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var as = { [bY]: [Z, ab, aa, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://{Bucket}.s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var at = { [cd]: "https://{Bucket}.s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var au = { [bY]: [ag, ab, aa, T, U, { [bZ]: r, [ca]: [{ [bZ]: v, [ca]: [{ [cb]: "url" }, "isIp"] }, true] }, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var av = { [bZ]: r, [ca]: [{ [bZ]: v, [ca]: [{ [cb]: "url" }, "isIp"] }, true] };
    var aw = { [cb]: "url" };
    var ax = { [bY]: [ag, ab, aa, T, U, { [bZ]: r, [ca]: [{ [bZ]: v, [ca]: [aw, "isIp"] }, false] }, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "{url#scheme}://{Bucket}.{url#authority}{url#path}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var ay = { [bZ]: r, [ca]: [{ [bZ]: v, [ca]: [aw, "isIp"] }, false] };
    var az = { [cd]: "{url#scheme}://{url#authority}{url#normalizedPath}{Bucket}", [ce]: ae, [cj]: {} };
    var aA = { [cd]: "{url#scheme}://{Bucket}.{url#authority}{url#path}", [ce]: ae, [cj]: {} };
    var aB = { [q]: aA, [bW]: q };
    var aC = { [bY]: [ag, ab, al, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var aD = { [cd]: "https://{Bucket}.s3-accelerate.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var aE = { [bY]: [ag, ab, aa, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: y, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var aF = { [cd]: "https://{Bucket}.s3.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var aG = { [n]: "Invalid region: region was not a valid DNS name.", [bW]: n };
    var aH = { [cb]: z };
    var aI = { [cb]: A };
    var aJ = { [bZ]: v, [ca]: [aH, "service"] };
    var aK = { [cb]: E };
    var aL = { [bY]: [Z], [n]: "S3 Object Lambda does not support Dual-stack", [bW]: n };
    var aM = { [bY]: [al], [n]: "S3 Object Lambda does not support S3 Accelerate", [bW]: n };
    var aN = { [bY]: [{ [bZ]: d, [ca]: [{ [cb]: "DisableAccessPoints" }] }, { [bZ]: r, [ca]: [{ [cb]: "DisableAccessPoints" }, true] }], [n]: "Access points are not supported for this operation", [bW]: n };
    var aO = { [bY]: [{ [bZ]: d, [ca]: [{ [cb]: "UseArnRegion" }] }, { [bZ]: r, [ca]: [{ [cb]: "UseArnRegion" }, false] }, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [aH, "region"] }, "{Region}"] }] }], [n]: "Invalid configuration: region from ARN `{bucketArn#region}` does not match client region `{Region}` and UseArnRegion is `false`", [bW]: n };
    var aP = { [bZ]: v, [ca]: [{ [cb]: "bucketPartition" }, w] };
    var aQ = { [bZ]: v, [ca]: [aH, "accountId"] };
    var aR = { [bY]: [aj, { [bZ]: k, [ca]: [aP, "aws-cn"] }], [n]: "Partition does not support FIPS", [bW]: n };
    var aS = { [cf]: [{ [w]: "sigv4", [cg]: C, [ch]: true, [ci]: "{bucketArn#region}" }] };
    var aT = { [n]: "Invalid ARN: The access point name may only contain a-z, A-Z, 0-9 and `-`. Found: `{accessPointName}`", [bW]: n };
    var aU = { [n]: "Invalid ARN: The account id may only contain a-z, A-Z, 0-9 and `-`. Found: `{bucketArn#accountId}`", [bW]: n };
    var aV = { [n]: "Invalid region in ARN: `{bucketArn#region}` (invalid DNS name)", [bW]: n };
    var aW = { [n]: "Client was configured for partition `{partitionResult#name}` but ARN (`{Bucket}`) has `{bucketPartition#name}`", [bW]: n };
    var aX = { [n]: "Could not load partition for ARN region `{bucketArn#region}`", [bW]: n };
    var aY = { [n]: "Invalid ARN: The ARN may only contain a single resource component after `accesspoint`.", [bW]: n };
    var aZ = { [n]: "Invalid ARN: bucket ARN is missing a region", [bW]: n };
    var ba = { [n]: "Invalid ARN: Expected a resource of the format `accesspoint:<accesspoint name>` but no name was provided", [bW]: n };
    var bb = { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "{bucketArn#region}" }] };
    var bc = { [cf]: [{ [w]: "sigv4", [cg]: p, [ch]: true, [ci]: "{bucketArn#region}" }] };
    var bd = { [cb]: "UseObjectLambdaEndpoint" };
    var be = { [cf]: [{ [w]: "sigv4", [cg]: C, [ch]: true, [ci]: "{Region}" }] };
    var bf = { [bY]: [aj, Z, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: J, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bg = { [q]: { [cd]: J, [ce]: ae, [cj]: {} }, [bW]: q };
    var bh = { [cd]: J, [ce]: ae, [cj]: {} };
    var bi = { [bY]: [aj, Z, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3-fips.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bj = { [cd]: "https://s3-fips.dualstack.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var bk = { [bY]: [aj, ag, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: J, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bl = { [bY]: [aj, ag, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3-fips.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bm = { [cd]: "https://s3-fips.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var bn = { [bY]: [ab, Z, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: J, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bo = { [bY]: [ab, Z, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: "https://s3.dualstack.us-east-1.{partitionResult#dnsSuffix}", [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bp = { [cd]: "https://s3.dualstack.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var bq = { [bY]: [ab, ag, T, U, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: J, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var br = { [bY]: [ab, ag, S, { [bZ]: k, [ca]: [{ [cb]: "Region" }, "aws-global"] }], [q]: { [cd]: K, [ce]: { [cf]: [{ [w]: "sigv4", [cg]: t, [ch]: true, [ci]: "us-east-1" }] }, [cj]: {} }, [bW]: q };
    var bs = { [cd]: "https://s3.{Region}.{partitionResult#dnsSuffix}", [ce]: ae, [cj]: {} };
    var bt = [{ [cb]: "Region" }];
    var bu = [P];
    var bv = [{ [bZ]: l, [ca]: [{ [cb]: i }, false] }];
    var bw = [{ [bZ]: k, [ca]: [{ [cb]: g }, "beta"] }];
    var bx = [{ [cb]: "Endpoint" }];
    var by = [T, U];
    var bz = [O];
    var bA = [{ [bZ]: s, [ca]: [P] }];
    var bB = [Z, T];
    var bC = [{ [bZ]: j, [ca]: bt, [cc]: "partitionResult" }];
    var bD = [{ [bZ]: k, [ca]: [{ [cb]: "Region" }, "us-east-1"] }];
    var bE = [{ [bZ]: l, [ca]: [{ [cb]: "Region" }, false] }];
    var bF = [{ [bZ]: k, [ca]: [aI, D] }];
    var bG = [{ [bZ]: v, [ca]: [aH, "resourceId[1]"], [cc]: E }, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [aK, B] }] }];
    var bH = [aH, "resourceId[1]"];
    var bI = [Z];
    var bJ = [al];
    var bK = [{ [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [aH, "region"] }, B] }] }];
    var bL = [{ [bZ]: m, [ca]: [{ [bZ]: d, [ca]: [{ [bZ]: v, [ca]: [aH, "resourceId[2]"] }] }] }];
    var bM = [aH, "resourceId[2]"];
    var bN = [{ [bZ]: j, [ca]: [{ [bZ]: v, [ca]: [aH, "region"] }], [cc]: "bucketPartition" }];
    var bO = [{ [bZ]: k, [ca]: [aP, { [bZ]: v, [ca]: [{ [cb]: "partitionResult" }, w] }] }];
    var bP = [{ [bZ]: l, [ca]: [{ [bZ]: v, [ca]: [aH, "region"] }, true] }];
    var bQ = [{ [bZ]: l, [ca]: [aQ, false] }];
    var bR = [{ [bZ]: l, [ca]: [aK, false] }];
    var bS = [aj];
    var bT = [{ [bZ]: l, [ca]: [{ [cb]: "Region" }, true] }];
    var bU = [bg];
    var _data = { version: "1.0", parameters: { Bucket: L, Region: L, UseFIPS: M, UseDualStack: M, Endpoint: L, ForcePathStyle: N, Accelerate: M, UseGlobalEndpoint: M, UseObjectLambdaEndpoint: N, DisableAccessPoints: N, DisableMultiRegionAccessPoints: M, UseArnRegion: N }, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: d, [ca]: bt }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [O, { [bZ]: e, [ca]: [P, 49, 50, b], [cc]: f }, { [bZ]: e, [ca]: [P, 8, 12, b], [cc]: g }, { [bZ]: e, [ca]: [P, 0, 7, b], [cc]: h }, { [bZ]: e, [ca]: [P, 32, 49, b], [cc]: i }, { [bZ]: j, [ca]: bt, [cc]: "regionPartition" }, { [bZ]: k, [ca]: [{ [cb]: h }, "--op-s3"] }], [bW]: c, [bX]: [{ [bY]: bv, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [Q, "e"] }], [bW]: c, [bX]: [{ [bY]: bw, [bW]: c, [bX]: [R, { [bY]: by, endpoint: { [cd]: "https://{Bucket}.ec2.{url#authority}", [ce]: V, [cj]: W }, [bW]: q }] }, { endpoint: { [cd]: "https://{Bucket}.ec2.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [ce]: V, [cj]: W }, [bW]: q }] }, { [bY]: [{ [bZ]: k, [ca]: [Q, "o"] }], [bW]: c, [bX]: [{ [bY]: bw, [bW]: c, [bX]: [R, { [bY]: by, endpoint: { [cd]: "https://{Bucket}.op-{outpostId}.{url#authority}", [ce]: V, [cj]: W }, [bW]: q }] }, { endpoint: { [cd]: "https://{Bucket}.op-{outpostId}.s3-outposts.{Region}.{regionPartition#dnsSuffix}", [ce]: V, [cj]: W }, [bW]: q }] }, { error: 'Unrecognized hardware type: "Expected hardware type o or e but got {hardwareType}"', [bW]: n }] }] }, { error: "Invalid ARN: The outpost Id must only contain a-z, A-Z, 0-9 and `-`.", [bW]: n }] }, { [bY]: bz, [bW]: c, [bX]: [{ [bY]: [T, { [bZ]: m, [ca]: [{ [bZ]: d, [ca]: [{ [bZ]: o, [ca]: bx }] }] }], error: "Custom endpoint `{Endpoint}` was not a valid URI", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: d, [ca]: [X] }, { [bZ]: r, [ca]: [X, b] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bA, error: "Path-style addressing cannot be used with ARN buckets", [bW]: n }, Y] }] }, { [bY]: [{ [bZ]: u, [ca]: [P, a] }], [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bE, [bW]: c, [bX]: [{ [bW]: c, [bX]: [ai, { [bW]: c, [bX]: [{ [bY]: [al, aj], error: "Accelerate cannot be used with FIPS", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [al, ak], error: "S3 Accelerate cannot be used in this region", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [T, Z], error: x, [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [T, aj], error: x, [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [T, al], error: x, [bW]: n }, { [bW]: c, [bX]: [am, am, { [bY]: [Z, aj, aa, S, ac, ad], [bW]: c, [bX]: [{ endpoint: an, [bW]: q }] }, { [bY]: [Z, aj, aa, S, ac, af], endpoint: an, [bW]: q }, ao, ao, { [bY]: [ag, aj, aa, S, ac, ad], [bW]: c, [bX]: [{ endpoint: ap, [bW]: q }] }, { [bY]: [ag, aj, aa, S, ac, af], endpoint: ap, [bW]: q }, aq, aq, { [bY]: [Z, ab, al, S, ac, ad], [bW]: c, [bX]: [{ endpoint: ar, [bW]: q }] }, { [bY]: [Z, ab, al, S, ac, af], endpoint: ar, [bW]: q }, as, as, { [bY]: [Z, ab, aa, S, ac, ad], [bW]: c, [bX]: [{ endpoint: at, [bW]: q }] }, { [bY]: [Z, ab, aa, S, ac, af], endpoint: at, [bW]: q }, au, ax, au, ax, { [bY]: [ag, ab, aa, T, U, av, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: az, [bW]: q }, { endpoint: az, [bW]: q }] }, { [bY]: [ag, ab, aa, T, U, ay, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: aA, [bW]: q }, aB] }, { [bY]: [ag, ab, aa, T, U, av, ac, af], endpoint: az, [bW]: q }, { [bY]: [ag, ab, aa, T, U, ay, ac, af], endpoint: aA, [bW]: q }, aC, aC, { [bY]: [ag, ab, al, S, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: aD, [bW]: q }, { endpoint: aD, [bW]: q }] }, { [bY]: [ag, ab, al, S, ac, af], endpoint: aD, [bW]: q }, aE, aE, { [bY]: [ag, ab, aa, S, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: { [cd]: y, [ce]: ae, [cj]: W }, [bW]: q }, { endpoint: aF, [bW]: q }] }, { [bY]: [ag, ab, aa, S, ac, af], endpoint: aF, [bW]: q }] }] }] }] }] }] }] }] }, aG] }] }, ah] }, { [bY]: [T, U, { [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [aw, "scheme"] }, "http"] }, { [bZ]: u, [ca]: [P, b] }, ab, ag, aa], [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bE, [bW]: c, [bX]: [aB] }, aG] }] }, ah] }, { [bY]: [{ [bZ]: s, [ca]: bu, [cc]: z }], [bW]: c, [bX]: [{ [bY]: [{ [bZ]: v, [ca]: [aH, "resourceId[0]"], [cc]: A }, { [bZ]: m, [ca]: [{ [bZ]: k, [ca]: [aI, B] }] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [aJ, C] }], [bW]: c, [bX]: [{ [bY]: bF, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bG, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aL, { [bW]: c, [bX]: [aM, { [bW]: c, [bX]: [{ [bY]: bK, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aN, { [bW]: c, [bX]: [{ [bY]: bL, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aO, { [bW]: c, [bX]: [{ [bY]: bN, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bO, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bP, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [aQ, B] }], error: "Invalid ARN: Missing account id", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: bQ, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bR, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aR, { [bW]: c, [bX]: [{ [bY]: by, endpoint: { [cd]: F, [ce]: aS, [cj]: W }, [bW]: q }, { [bY]: bS, endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: aS, [cj]: W }, [bW]: q }, { endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-object-lambda.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: aS, [cj]: W }, [bW]: q }] }] }] }, aT] }] }, aU] }] }] }, aV] }] }, aW] }] }, ah] }] }, aX] }] }] }, aY] }] }] }, aZ] }] }] }] }, ba] }] }, { error: "Invalid ARN: Object Lambda ARNs only support `accesspoint` arn types, but found: `{arnType}`", [bW]: n }] }, { [bY]: bF, [bW]: c, [bX]: [{ [bY]: bG, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bK, [bW]: c, [bX]: [{ [bY]: bF, [bW]: c, [bX]: [{ [bY]: bK, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aN, { [bW]: c, [bX]: [{ [bY]: bL, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aO, { [bW]: c, [bX]: [{ [bY]: bN, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [aP, "{partitionResult#name}"] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bP, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [aJ, t] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bQ, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bR, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bJ, error: "Access Points do not support S3 Accelerate", [bW]: n }, { [bW]: c, [bX]: [aR, { [bW]: c, [bX]: [{ [bY]: bB, error: "DualStack cannot be combined with a Host override (PrivateLink)", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [aj, Z], endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: bb, [cj]: W }, [bW]: q }, { [bY]: [aj, ag], endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint-fips.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: bb, [cj]: W }, [bW]: q }, { [bY]: [ab, Z], endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.dualstack.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: bb, [cj]: W }, [bW]: q }, { [bY]: [ab, ag, T, U], endpoint: { [cd]: F, [ce]: bb, [cj]: W }, [bW]: q }, { [bY]: [ab, ag], endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.s3-accesspoint.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: bb, [cj]: W }, [bW]: q }] }] }] }] }] }, aT] }] }, aU] }] }, { error: "Invalid ARN: The ARN was not for the S3 service, found: {bucketArn#service}", [bW]: n }] }] }, aV] }] }, aW] }] }, ah] }] }, aX] }] }] }, aY] }] }] }, aZ] }] }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: l, [ca]: [aK, b] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bI, error: "S3 MRAP does not support dual-stack", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: bS, error: "S3 MRAP does not support FIPS", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: bJ, error: "S3 MRAP does not support S3 Accelerate", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: r, [ca]: [{ [cb]: "DisableMultiRegionAccessPoints" }, b] }], error: "Invalid configuration: Multi-Region Access Point ARNs are disabled.", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: j, [ca]: bt, [cc]: G }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [{ [bZ]: v, [ca]: [{ [cb]: G }, w] }, { [bZ]: v, [ca]: [aH, "partition"] }] }], [bW]: c, [bX]: [{ endpoint: { [cd]: "https://{accessPointName}.accesspoint.s3-global.{mrapPartition#dnsSuffix}", [ce]: { [cf]: [{ name: "sigv4a", [cg]: t, [ch]: b, signingRegionSet: ["*"] }] }, [cj]: W }, [bW]: q }] }, { error: "Client was configured for partition `{mrapPartition#name}` but bucket referred to partition `{bucketArn#partition}`", [bW]: n }] }] }, { error: "{Region} was not a valid region", [bW]: n }] }] }] }] }] }] }, { error: "Invalid Access Point Name", [bW]: n }] }] }] }, ba] }, { [bY]: [{ [bZ]: k, [ca]: [aJ, p] }], [bW]: c, [bX]: [{ [bY]: bI, error: "S3 Outposts does not support Dual-stack", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: bS, error: "S3 Outposts does not support FIPS", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: bJ, error: "S3 Outposts does not support S3 Accelerate", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: d, [ca]: [{ [bZ]: v, [ca]: [aH, "resourceId[4]"] }] }], error: "Invalid Arn: Outpost Access Point ARN contains sub resources", [bW]: n }, { [bW]: c, [bX]: [{ [bY]: [{ [bZ]: v, [ca]: bH, [cc]: i }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bv, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aO, { [bW]: c, [bX]: [{ [bY]: bN, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bO, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bP, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bQ, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: v, [ca]: bM, [cc]: H }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: v, [ca]: [aH, "resourceId[3]"], [cc]: E }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: [{ [bZ]: k, [ca]: [{ [cb]: H }, D] }], [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: by, endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.{url#authority}", [ce]: bc, [cj]: W }, [bW]: q }, { endpoint: { [cd]: "https://{accessPointName}-{bucketArn#accountId}.{outpostId}.s3-outposts.{bucketArn#region}.{bucketPartition#dnsSuffix}", [ce]: bc, [cj]: W }, [bW]: q }] }] }, { error: "Expected an outpost type `accesspoint`, found {outpostType}", [bW]: n }] }] }, { error: "Invalid ARN: expected an access point name", [bW]: n }] }] }, { error: "Invalid ARN: Expected a 4-component resource", [bW]: n }] }] }, aU] }] }, aV] }] }, aW] }] }, ah] }] }, { error: "Could not load partition for ARN region {bucketArn#region}", [bW]: n }] }] }] }, { error: "Invalid ARN: The outpost Id may only contain a-z, A-Z, 0-9 and `-`. Found: `{outpostId}`", [bW]: n }] }] }, { error: "Invalid ARN: The Outpost Id was not set", [bW]: n }] }] }] }] }] }, { error: "Invalid ARN: Unrecognized format: {Bucket} (type: {arnType})", [bW]: n }] }] }, { error: "Invalid ARN: No ARN type specified", [bW]: n }] }, { [bY]: [{ [bZ]: e, [ca]: [P, 0, 4, a], [cc]: I }, { [bZ]: k, [ca]: [{ [cb]: I }, "arn:"] }, { [bZ]: m, [ca]: [{ [bZ]: d, [ca]: bA }] }], error: "Invalid ARN: `{Bucket}` was not a valid ARN", [bW]: n }, Y] }] }, { [bY]: [{ [bZ]: d, [ca]: [bd] }, { [bZ]: r, [ca]: [bd, b] }], [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bT, [bW]: c, [bX]: [{ [bW]: c, [bX]: [aL, { [bW]: c, [bX]: [aM, { [bW]: c, [bX]: [ai, { [bW]: c, [bX]: [{ [bY]: by, endpoint: { [cd]: J, [ce]: be, [cj]: W }, [bW]: q }, { [bY]: bS, endpoint: { [cd]: "https://s3-object-lambda-fips.{Region}.{partitionResult#dnsSuffix}", [ce]: be, [cj]: W }, [bW]: q }, { endpoint: { [cd]: "https://s3-object-lambda.{Region}.{partitionResult#dnsSuffix}", [ce]: be, [cj]: W }, [bW]: q }] }] }] }] }] }, aG] }] }, ah] }, { [bY]: [{ [bZ]: m, [ca]: bz }], [bW]: c, [bX]: [{ [bY]: bC, [bW]: c, [bX]: [{ [bW]: c, [bX]: [{ [bY]: bT, [bW]: c, [bX]: [{ [bW]: c, [bX]: [ai, { [bW]: c, [bX]: [bf, bf, { [bY]: [aj, Z, T, U, ac, ad], [bW]: c, [bX]: bU }, { [bY]: [aj, Z, T, U, ac, af], endpoint: bh, [bW]: q }, bi, bi, { [bY]: [aj, Z, S, ac, ad], [bW]: c, [bX]: [{ endpoint: bj, [bW]: q }] }, { [bY]: [aj, Z, S, ac, af], endpoint: bj, [bW]: q }, bk, bk, { [bY]: [aj, ag, T, U, ac, ad], [bW]: c, [bX]: bU }, { [bY]: [aj, ag, T, U, ac, af], endpoint: bh, [bW]: q }, bl, bl, { [bY]: [aj, ag, S, ac, ad], [bW]: c, [bX]: [{ endpoint: bm, [bW]: q }] }, { [bY]: [aj, ag, S, ac, af], endpoint: bm, [bW]: q }, bn, bn, { [bY]: [ab, Z, T, U, ac, ad], [bW]: c, [bX]: bU }, { [bY]: [ab, Z, T, U, ac, af], endpoint: bh, [bW]: q }, bo, bo, { [bY]: [ab, Z, S, ac, ad], [bW]: c, [bX]: [{ endpoint: bp, [bW]: q }] }, { [bY]: [ab, Z, S, ac, af], endpoint: bp, [bW]: q }, bq, bq, { [bY]: [ab, ag, T, U, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: bh, [bW]: q }, bg] }, { [bY]: [ab, ag, T, U, ac, af], endpoint: bh, [bW]: q }, br, br, { [bY]: [ab, ag, S, ac, ad], [bW]: c, [bX]: [{ [bY]: bD, endpoint: { [cd]: K, [ce]: ae, [cj]: W }, [bW]: q }, { endpoint: bs, [bW]: q }] }, { [bY]: [ab, ag, S, ac, af], endpoint: bs, [bW]: q }] }] }] }, aG] }] }, ah] }] }] }, { error: "A region must be set when sending requests to S3.", [bW]: n }] }] };
    exports2.ruleSet = _data;
  }
});

var require_endpointResolver4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/endpoint/endpointResolver.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.defaultEndpointResolver = void 0;
    var util_endpoints_1 = require_dist_cjs50();
    var ruleset_1 = require_ruleset4();
    var defaultEndpointResolver = (endpointParams, context = {}) => {
      return (0, util_endpoints_1.resolveEndpoint)(ruleset_1.ruleSet, {
        endpointParams,
        logger: context.logger
      });
    };
    exports2.defaultEndpointResolver = defaultEndpointResolver;
  }
});

var require_runtimeConfig_shared4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.shared.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var signature_v4_multi_region_1 = require_dist_cjs66();
    var smithy_client_1 = require_dist_cjs7();
    var url_parser_1 = require_dist_cjs2();
    var util_base64_1 = require_dist_cjs48();
    var endpointResolver_1 = require_endpointResolver4();
    var getRuntimeConfig = (config) => ({
      apiVersion: "2006-03-01",
      base64Decoder: (config == null ? void 0 : config.base64Decoder) ?? util_base64_1.fromBase64,
      base64Encoder: (config == null ? void 0 : config.base64Encoder) ?? util_base64_1.toBase64,
      disableHostPrefix: (config == null ? void 0 : config.disableHostPrefix) ?? false,
      endpointProvider: (config == null ? void 0 : config.endpointProvider) ?? endpointResolver_1.defaultEndpointResolver,
      logger: (config == null ? void 0 : config.logger) ?? new smithy_client_1.NoOpLogger(),
      serviceId: (config == null ? void 0 : config.serviceId) ?? "S3",
      signerConstructor: (config == null ? void 0 : config.signerConstructor) ?? signature_v4_multi_region_1.SignatureV4MultiRegion,
      signingEscapePath: (config == null ? void 0 : config.signingEscapePath) ?? false,
      urlParser: (config == null ? void 0 : config.urlParser) ?? url_parser_1.parseUrl,
      useArnRegion: (config == null ? void 0 : config.useArnRegion) ?? false
    });
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_runtimeConfig4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/runtimeConfig.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.getRuntimeConfig = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var package_json_1 = tslib_1.__importDefault(require_package());
    var client_sts_1 = require_dist_cjs59();
    var config_resolver_1 = require_dist_cjs20();
    var credential_provider_node_1 = require_dist_cjs58();
    var eventstream_serde_node_1 = require_dist_cjs62();
    var hash_node_1 = require_dist_cjs42();
    var hash_stream_node_1 = require_dist_cjs63();
    var middleware_bucket_endpoint_1 = require_dist_cjs64();
    var middleware_retry_1 = require_dist_cjs29();
    var node_config_provider_1 = require_dist_cjs39();
    var node_http_handler_1 = require_dist_cjs44();
    var util_body_length_node_1 = require_dist_cjs45();
    var util_retry_1 = require_dist_cjs28();
    var util_stream_node_1 = require_dist_cjs65();
    var util_user_agent_node_1 = require_dist_cjs46();
    var util_utf8_node_1 = require_dist_cjs47();
    var runtimeConfig_shared_1 = require_runtimeConfig_shared4();
    var smithy_client_1 = require_dist_cjs7();
    var util_defaults_mode_node_1 = require_dist_cjs51();
    var smithy_client_2 = require_dist_cjs7();
    var getRuntimeConfig = (config) => {
      (0, smithy_client_2.emitWarningIfUnsupportedVersion)(process.version);
      const defaultsMode = (0, util_defaults_mode_node_1.resolveDefaultsModeConfig)(config);
      const defaultConfigProvider = () => defaultsMode().then(smithy_client_1.loadConfigsForDefaultMode);
      const clientSharedValues = (0, runtimeConfig_shared_1.getRuntimeConfig)(config);
      return {
        ...clientSharedValues,
        ...config,
        runtime: "node",
        defaultsMode,
        bodyLengthChecker: (config == null ? void 0 : config.bodyLengthChecker) ?? util_body_length_node_1.calculateBodyLength,
        credentialDefaultProvider: (config == null ? void 0 : config.credentialDefaultProvider) ?? (0, client_sts_1.decorateDefaultCredentialProvider)(credential_provider_node_1.defaultProvider),
        defaultUserAgentProvider: (config == null ? void 0 : config.defaultUserAgentProvider) ?? (0, util_user_agent_node_1.defaultUserAgent)({ serviceId: clientSharedValues.serviceId, clientVersion: package_json_1.default.version }),
        eventStreamSerdeProvider: (config == null ? void 0 : config.eventStreamSerdeProvider) ?? eventstream_serde_node_1.eventStreamSerdeProvider,
        getAwsChunkedEncodingStream: (config == null ? void 0 : config.getAwsChunkedEncodingStream) ?? util_stream_node_1.getAwsChunkedEncodingStream,
        maxAttempts: (config == null ? void 0 : config.maxAttempts) ?? (0, node_config_provider_1.loadConfig)(middleware_retry_1.NODE_MAX_ATTEMPT_CONFIG_OPTIONS),
        md5: (config == null ? void 0 : config.md5) ?? hash_node_1.Hash.bind(null, "md5"),
        region: (config == null ? void 0 : config.region) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_REGION_CONFIG_OPTIONS, config_resolver_1.NODE_REGION_CONFIG_FILE_OPTIONS),
        requestHandler: (config == null ? void 0 : config.requestHandler) ?? new node_http_handler_1.NodeHttpHandler(defaultConfigProvider),
        retryMode: (config == null ? void 0 : config.retryMode) ?? (0, node_config_provider_1.loadConfig)({
          ...middleware_retry_1.NODE_RETRY_MODE_CONFIG_OPTIONS,
          default: async () => (await defaultConfigProvider()).retryMode || util_retry_1.DEFAULT_RETRY_MODE
        }),
        sdkStreamMixin: (config == null ? void 0 : config.sdkStreamMixin) ?? util_stream_node_1.sdkStreamMixin,
        sha1: (config == null ? void 0 : config.sha1) ?? hash_node_1.Hash.bind(null, "sha1"),
        sha256: (config == null ? void 0 : config.sha256) ?? hash_node_1.Hash.bind(null, "sha256"),
        streamCollector: (config == null ? void 0 : config.streamCollector) ?? node_http_handler_1.streamCollector,
        streamHasher: (config == null ? void 0 : config.streamHasher) ?? hash_stream_node_1.readableStreamHasher,
        useArnRegion: (config == null ? void 0 : config.useArnRegion) ?? (0, node_config_provider_1.loadConfig)(middleware_bucket_endpoint_1.NODE_USE_ARN_REGION_CONFIG_OPTIONS),
        useDualstackEndpoint: (config == null ? void 0 : config.useDualstackEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS),
        useFipsEndpoint: (config == null ? void 0 : config.useFipsEndpoint) ?? (0, node_config_provider_1.loadConfig)(config_resolver_1.NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS),
        utf8Decoder: (config == null ? void 0 : config.utf8Decoder) ?? util_utf8_node_1.fromUtf8,
        utf8Encoder: (config == null ? void 0 : config.utf8Encoder) ?? util_utf8_node_1.toUtf8
      };
    };
    exports2.getRuntimeConfig = getRuntimeConfig;
  }
});

var require_S3Client = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/S3Client.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3Client = void 0;
    var config_resolver_1 = require_dist_cjs20();
    var eventstream_serde_config_resolver_1 = require_dist_cjs21();
    var middleware_content_length_1 = require_dist_cjs22();
    var middleware_endpoint_1 = require_dist_cjs5();
    var middleware_expect_continue_1 = require_dist_cjs23();
    var middleware_host_header_1 = require_dist_cjs24();
    var middleware_logger_1 = require_dist_cjs25();
    var middleware_recursion_detection_1 = require_dist_cjs26();
    var middleware_retry_1 = require_dist_cjs29();
    var middleware_sdk_s3_1 = require_dist_cjs11();
    var middleware_signing_1 = require_dist_cjs34();
    var middleware_user_agent_1 = require_dist_cjs35();
    var smithy_client_1 = require_dist_cjs7();
    var EndpointParameters_1 = require_EndpointParameters();
    var runtimeConfig_1 = require_runtimeConfig4();
    var S3Client = class extends smithy_client_1.Client {
      constructor(configuration) {
        const _config_0 = (0, runtimeConfig_1.getRuntimeConfig)(configuration);
        const _config_1 = (0, EndpointParameters_1.resolveClientEndpointParameters)(_config_0);
        const _config_2 = (0, config_resolver_1.resolveRegionConfig)(_config_1);
        const _config_3 = (0, middleware_endpoint_1.resolveEndpointConfig)(_config_2);
        const _config_4 = (0, middleware_retry_1.resolveRetryConfig)(_config_3);
        const _config_5 = (0, middleware_host_header_1.resolveHostHeaderConfig)(_config_4);
        const _config_6 = (0, middleware_signing_1.resolveAwsAuthConfig)(_config_5);
        const _config_7 = (0, middleware_sdk_s3_1.resolveS3Config)(_config_6);
        const _config_8 = (0, middleware_user_agent_1.resolveUserAgentConfig)(_config_7);
        const _config_9 = (0, eventstream_serde_config_resolver_1.resolveEventStreamSerdeConfig)(_config_8);
        super(_config_9);
        this.config = _config_9;
        this.middlewareStack.use((0, middleware_retry_1.getRetryPlugin)(this.config));
        this.middlewareStack.use((0, middleware_content_length_1.getContentLengthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_host_header_1.getHostHeaderPlugin)(this.config));
        this.middlewareStack.use((0, middleware_logger_1.getLoggerPlugin)(this.config));
        this.middlewareStack.use((0, middleware_recursion_detection_1.getRecursionDetectionPlugin)(this.config));
        this.middlewareStack.use((0, middleware_signing_1.getAwsAuthPlugin)(this.config));
        this.middlewareStack.use((0, middleware_sdk_s3_1.getValidateBucketNamePlugin)(this.config));
        this.middlewareStack.use((0, middleware_expect_continue_1.getAddExpectContinuePlugin)(this.config));
        this.middlewareStack.use((0, middleware_user_agent_1.getUserAgentPlugin)(this.config));
      }
      destroy() {
        super.destroy();
      }
    };
    exports2.S3Client = S3Client;
  }
});

var require_S3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/S3.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3 = void 0;
    var AbortMultipartUploadCommand_1 = require_AbortMultipartUploadCommand();
    var CompleteMultipartUploadCommand_1 = require_CompleteMultipartUploadCommand();
    var CopyObjectCommand_1 = require_CopyObjectCommand();
    var CreateBucketCommand_1 = require_CreateBucketCommand();
    var CreateMultipartUploadCommand_1 = require_CreateMultipartUploadCommand();
    var DeleteBucketAnalyticsConfigurationCommand_1 = require_DeleteBucketAnalyticsConfigurationCommand();
    var DeleteBucketCommand_1 = require_DeleteBucketCommand();
    var DeleteBucketCorsCommand_1 = require_DeleteBucketCorsCommand();
    var DeleteBucketEncryptionCommand_1 = require_DeleteBucketEncryptionCommand();
    var DeleteBucketIntelligentTieringConfigurationCommand_1 = require_DeleteBucketIntelligentTieringConfigurationCommand();
    var DeleteBucketInventoryConfigurationCommand_1 = require_DeleteBucketInventoryConfigurationCommand();
    var DeleteBucketLifecycleCommand_1 = require_DeleteBucketLifecycleCommand();
    var DeleteBucketMetricsConfigurationCommand_1 = require_DeleteBucketMetricsConfigurationCommand();
    var DeleteBucketOwnershipControlsCommand_1 = require_DeleteBucketOwnershipControlsCommand();
    var DeleteBucketPolicyCommand_1 = require_DeleteBucketPolicyCommand();
    var DeleteBucketReplicationCommand_1 = require_DeleteBucketReplicationCommand();
    var DeleteBucketTaggingCommand_1 = require_DeleteBucketTaggingCommand();
    var DeleteBucketWebsiteCommand_1 = require_DeleteBucketWebsiteCommand();
    var DeleteObjectCommand_1 = require_DeleteObjectCommand();
    var DeleteObjectsCommand_1 = require_DeleteObjectsCommand();
    var DeleteObjectTaggingCommand_1 = require_DeleteObjectTaggingCommand();
    var DeletePublicAccessBlockCommand_1 = require_DeletePublicAccessBlockCommand();
    var GetBucketAccelerateConfigurationCommand_1 = require_GetBucketAccelerateConfigurationCommand();
    var GetBucketAclCommand_1 = require_GetBucketAclCommand();
    var GetBucketAnalyticsConfigurationCommand_1 = require_GetBucketAnalyticsConfigurationCommand();
    var GetBucketCorsCommand_1 = require_GetBucketCorsCommand();
    var GetBucketEncryptionCommand_1 = require_GetBucketEncryptionCommand();
    var GetBucketIntelligentTieringConfigurationCommand_1 = require_GetBucketIntelligentTieringConfigurationCommand();
    var GetBucketInventoryConfigurationCommand_1 = require_GetBucketInventoryConfigurationCommand();
    var GetBucketLifecycleConfigurationCommand_1 = require_GetBucketLifecycleConfigurationCommand();
    var GetBucketLocationCommand_1 = require_GetBucketLocationCommand();
    var GetBucketLoggingCommand_1 = require_GetBucketLoggingCommand();
    var GetBucketMetricsConfigurationCommand_1 = require_GetBucketMetricsConfigurationCommand();
    var GetBucketNotificationConfigurationCommand_1 = require_GetBucketNotificationConfigurationCommand();
    var GetBucketOwnershipControlsCommand_1 = require_GetBucketOwnershipControlsCommand();
    var GetBucketPolicyCommand_1 = require_GetBucketPolicyCommand();
    var GetBucketPolicyStatusCommand_1 = require_GetBucketPolicyStatusCommand();
    var GetBucketReplicationCommand_1 = require_GetBucketReplicationCommand();
    var GetBucketRequestPaymentCommand_1 = require_GetBucketRequestPaymentCommand();
    var GetBucketTaggingCommand_1 = require_GetBucketTaggingCommand();
    var GetBucketVersioningCommand_1 = require_GetBucketVersioningCommand();
    var GetBucketWebsiteCommand_1 = require_GetBucketWebsiteCommand();
    var GetObjectAclCommand_1 = require_GetObjectAclCommand();
    var GetObjectAttributesCommand_1 = require_GetObjectAttributesCommand();
    var GetObjectCommand_1 = require_GetObjectCommand();
    var GetObjectLegalHoldCommand_1 = require_GetObjectLegalHoldCommand();
    var GetObjectLockConfigurationCommand_1 = require_GetObjectLockConfigurationCommand();
    var GetObjectRetentionCommand_1 = require_GetObjectRetentionCommand();
    var GetObjectTaggingCommand_1 = require_GetObjectTaggingCommand();
    var GetObjectTorrentCommand_1 = require_GetObjectTorrentCommand();
    var GetPublicAccessBlockCommand_1 = require_GetPublicAccessBlockCommand();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var ListBucketAnalyticsConfigurationsCommand_1 = require_ListBucketAnalyticsConfigurationsCommand();
    var ListBucketIntelligentTieringConfigurationsCommand_1 = require_ListBucketIntelligentTieringConfigurationsCommand();
    var ListBucketInventoryConfigurationsCommand_1 = require_ListBucketInventoryConfigurationsCommand();
    var ListBucketMetricsConfigurationsCommand_1 = require_ListBucketMetricsConfigurationsCommand();
    var ListBucketsCommand_1 = require_ListBucketsCommand();
    var ListMultipartUploadsCommand_1 = require_ListMultipartUploadsCommand();
    var ListObjectsCommand_1 = require_ListObjectsCommand();
    var ListObjectsV2Command_1 = require_ListObjectsV2Command();
    var ListObjectVersionsCommand_1 = require_ListObjectVersionsCommand();
    var ListPartsCommand_1 = require_ListPartsCommand();
    var PutBucketAccelerateConfigurationCommand_1 = require_PutBucketAccelerateConfigurationCommand();
    var PutBucketAclCommand_1 = require_PutBucketAclCommand();
    var PutBucketAnalyticsConfigurationCommand_1 = require_PutBucketAnalyticsConfigurationCommand();
    var PutBucketCorsCommand_1 = require_PutBucketCorsCommand();
    var PutBucketEncryptionCommand_1 = require_PutBucketEncryptionCommand();
    var PutBucketIntelligentTieringConfigurationCommand_1 = require_PutBucketIntelligentTieringConfigurationCommand();
    var PutBucketInventoryConfigurationCommand_1 = require_PutBucketInventoryConfigurationCommand();
    var PutBucketLifecycleConfigurationCommand_1 = require_PutBucketLifecycleConfigurationCommand();
    var PutBucketLoggingCommand_1 = require_PutBucketLoggingCommand();
    var PutBucketMetricsConfigurationCommand_1 = require_PutBucketMetricsConfigurationCommand();
    var PutBucketNotificationConfigurationCommand_1 = require_PutBucketNotificationConfigurationCommand();
    var PutBucketOwnershipControlsCommand_1 = require_PutBucketOwnershipControlsCommand();
    var PutBucketPolicyCommand_1 = require_PutBucketPolicyCommand();
    var PutBucketReplicationCommand_1 = require_PutBucketReplicationCommand();
    var PutBucketRequestPaymentCommand_1 = require_PutBucketRequestPaymentCommand();
    var PutBucketTaggingCommand_1 = require_PutBucketTaggingCommand();
    var PutBucketVersioningCommand_1 = require_PutBucketVersioningCommand();
    var PutBucketWebsiteCommand_1 = require_PutBucketWebsiteCommand();
    var PutObjectAclCommand_1 = require_PutObjectAclCommand();
    var PutObjectCommand_1 = require_PutObjectCommand();
    var PutObjectLegalHoldCommand_1 = require_PutObjectLegalHoldCommand();
    var PutObjectLockConfigurationCommand_1 = require_PutObjectLockConfigurationCommand();
    var PutObjectRetentionCommand_1 = require_PutObjectRetentionCommand();
    var PutObjectTaggingCommand_1 = require_PutObjectTaggingCommand();
    var PutPublicAccessBlockCommand_1 = require_PutPublicAccessBlockCommand();
    var RestoreObjectCommand_1 = require_RestoreObjectCommand();
    var SelectObjectContentCommand_1 = require_SelectObjectContentCommand();
    var UploadPartCommand_1 = require_UploadPartCommand();
    var UploadPartCopyCommand_1 = require_UploadPartCopyCommand();
    var WriteGetObjectResponseCommand_1 = require_WriteGetObjectResponseCommand();
    var S3Client_1 = require_S3Client();
    var S3 = class extends S3Client_1.S3Client {
      abortMultipartUpload(args, optionsOrCb, cb) {
        const command = new AbortMultipartUploadCommand_1.AbortMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      completeMultipartUpload(args, optionsOrCb, cb) {
        const command = new CompleteMultipartUploadCommand_1.CompleteMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      copyObject(args, optionsOrCb, cb) {
        const command = new CopyObjectCommand_1.CopyObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createBucket(args, optionsOrCb, cb) {
        const command = new CreateBucketCommand_1.CreateBucketCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      createMultipartUpload(args, optionsOrCb, cb) {
        const command = new CreateMultipartUploadCommand_1.CreateMultipartUploadCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucket(args, optionsOrCb, cb) {
        const command = new DeleteBucketCommand_1.DeleteBucketCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteBucketAnalyticsConfigurationCommand_1.DeleteBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketCors(args, optionsOrCb, cb) {
        const command = new DeleteBucketCorsCommand_1.DeleteBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketEncryption(args, optionsOrCb, cb) {
        const command = new DeleteBucketEncryptionCommand_1.DeleteBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteBucketIntelligentTieringConfigurationCommand_1.DeleteBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteBucketInventoryConfigurationCommand_1.DeleteBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketLifecycle(args, optionsOrCb, cb) {
        const command = new DeleteBucketLifecycleCommand_1.DeleteBucketLifecycleCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new DeleteBucketMetricsConfigurationCommand_1.DeleteBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new DeleteBucketOwnershipControlsCommand_1.DeleteBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketPolicy(args, optionsOrCb, cb) {
        const command = new DeleteBucketPolicyCommand_1.DeleteBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketReplication(args, optionsOrCb, cb) {
        const command = new DeleteBucketReplicationCommand_1.DeleteBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketTagging(args, optionsOrCb, cb) {
        const command = new DeleteBucketTaggingCommand_1.DeleteBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteBucketWebsite(args, optionsOrCb, cb) {
        const command = new DeleteBucketWebsiteCommand_1.DeleteBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteObject(args, optionsOrCb, cb) {
        const command = new DeleteObjectCommand_1.DeleteObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteObjects(args, optionsOrCb, cb) {
        const command = new DeleteObjectsCommand_1.DeleteObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deleteObjectTagging(args, optionsOrCb, cb) {
        const command = new DeleteObjectTaggingCommand_1.DeleteObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      deletePublicAccessBlock(args, optionsOrCb, cb) {
        const command = new DeletePublicAccessBlockCommand_1.DeletePublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketAccelerateConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketAccelerateConfigurationCommand_1.GetBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketAcl(args, optionsOrCb, cb) {
        const command = new GetBucketAclCommand_1.GetBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketAnalyticsConfigurationCommand_1.GetBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketCors(args, optionsOrCb, cb) {
        const command = new GetBucketCorsCommand_1.GetBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketEncryption(args, optionsOrCb, cb) {
        const command = new GetBucketEncryptionCommand_1.GetBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketIntelligentTieringConfigurationCommand_1.GetBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketInventoryConfigurationCommand_1.GetBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketLifecycleConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketLifecycleConfigurationCommand_1.GetBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketLocation(args, optionsOrCb, cb) {
        const command = new GetBucketLocationCommand_1.GetBucketLocationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketLogging(args, optionsOrCb, cb) {
        const command = new GetBucketLoggingCommand_1.GetBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketMetricsConfigurationCommand_1.GetBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketNotificationConfiguration(args, optionsOrCb, cb) {
        const command = new GetBucketNotificationConfigurationCommand_1.GetBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new GetBucketOwnershipControlsCommand_1.GetBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketPolicy(args, optionsOrCb, cb) {
        const command = new GetBucketPolicyCommand_1.GetBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketPolicyStatus(args, optionsOrCb, cb) {
        const command = new GetBucketPolicyStatusCommand_1.GetBucketPolicyStatusCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketReplication(args, optionsOrCb, cb) {
        const command = new GetBucketReplicationCommand_1.GetBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketRequestPayment(args, optionsOrCb, cb) {
        const command = new GetBucketRequestPaymentCommand_1.GetBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketTagging(args, optionsOrCb, cb) {
        const command = new GetBucketTaggingCommand_1.GetBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketVersioning(args, optionsOrCb, cb) {
        const command = new GetBucketVersioningCommand_1.GetBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getBucketWebsite(args, optionsOrCb, cb) {
        const command = new GetBucketWebsiteCommand_1.GetBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObject(args, optionsOrCb, cb) {
        const command = new GetObjectCommand_1.GetObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectAcl(args, optionsOrCb, cb) {
        const command = new GetObjectAclCommand_1.GetObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectAttributes(args, optionsOrCb, cb) {
        const command = new GetObjectAttributesCommand_1.GetObjectAttributesCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectLegalHold(args, optionsOrCb, cb) {
        const command = new GetObjectLegalHoldCommand_1.GetObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectLockConfiguration(args, optionsOrCb, cb) {
        const command = new GetObjectLockConfigurationCommand_1.GetObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectRetention(args, optionsOrCb, cb) {
        const command = new GetObjectRetentionCommand_1.GetObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectTagging(args, optionsOrCb, cb) {
        const command = new GetObjectTaggingCommand_1.GetObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getObjectTorrent(args, optionsOrCb, cb) {
        const command = new GetObjectTorrentCommand_1.GetObjectTorrentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      getPublicAccessBlock(args, optionsOrCb, cb) {
        const command = new GetPublicAccessBlockCommand_1.GetPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      headBucket(args, optionsOrCb, cb) {
        const command = new HeadBucketCommand_1.HeadBucketCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      headObject(args, optionsOrCb, cb) {
        const command = new HeadObjectCommand_1.HeadObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBucketAnalyticsConfigurations(args, optionsOrCb, cb) {
        const command = new ListBucketAnalyticsConfigurationsCommand_1.ListBucketAnalyticsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBucketIntelligentTieringConfigurations(args, optionsOrCb, cb) {
        const command = new ListBucketIntelligentTieringConfigurationsCommand_1.ListBucketIntelligentTieringConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBucketInventoryConfigurations(args, optionsOrCb, cb) {
        const command = new ListBucketInventoryConfigurationsCommand_1.ListBucketInventoryConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBucketMetricsConfigurations(args, optionsOrCb, cb) {
        const command = new ListBucketMetricsConfigurationsCommand_1.ListBucketMetricsConfigurationsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listBuckets(args, optionsOrCb, cb) {
        const command = new ListBucketsCommand_1.ListBucketsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listMultipartUploads(args, optionsOrCb, cb) {
        const command = new ListMultipartUploadsCommand_1.ListMultipartUploadsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listObjects(args, optionsOrCb, cb) {
        const command = new ListObjectsCommand_1.ListObjectsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listObjectsV2(args, optionsOrCb, cb) {
        const command = new ListObjectsV2Command_1.ListObjectsV2Command(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listObjectVersions(args, optionsOrCb, cb) {
        const command = new ListObjectVersionsCommand_1.ListObjectVersionsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      listParts(args, optionsOrCb, cb) {
        const command = new ListPartsCommand_1.ListPartsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketAccelerateConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketAccelerateConfigurationCommand_1.PutBucketAccelerateConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketAcl(args, optionsOrCb, cb) {
        const command = new PutBucketAclCommand_1.PutBucketAclCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketAnalyticsConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketAnalyticsConfigurationCommand_1.PutBucketAnalyticsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketCors(args, optionsOrCb, cb) {
        const command = new PutBucketCorsCommand_1.PutBucketCorsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketEncryption(args, optionsOrCb, cb) {
        const command = new PutBucketEncryptionCommand_1.PutBucketEncryptionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketIntelligentTieringConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketIntelligentTieringConfigurationCommand_1.PutBucketIntelligentTieringConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketInventoryConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketInventoryConfigurationCommand_1.PutBucketInventoryConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketLifecycleConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketLifecycleConfigurationCommand_1.PutBucketLifecycleConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketLogging(args, optionsOrCb, cb) {
        const command = new PutBucketLoggingCommand_1.PutBucketLoggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketMetricsConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketMetricsConfigurationCommand_1.PutBucketMetricsConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketNotificationConfiguration(args, optionsOrCb, cb) {
        const command = new PutBucketNotificationConfigurationCommand_1.PutBucketNotificationConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketOwnershipControls(args, optionsOrCb, cb) {
        const command = new PutBucketOwnershipControlsCommand_1.PutBucketOwnershipControlsCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketPolicy(args, optionsOrCb, cb) {
        const command = new PutBucketPolicyCommand_1.PutBucketPolicyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketReplication(args, optionsOrCb, cb) {
        const command = new PutBucketReplicationCommand_1.PutBucketReplicationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketRequestPayment(args, optionsOrCb, cb) {
        const command = new PutBucketRequestPaymentCommand_1.PutBucketRequestPaymentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketTagging(args, optionsOrCb, cb) {
        const command = new PutBucketTaggingCommand_1.PutBucketTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketVersioning(args, optionsOrCb, cb) {
        const command = new PutBucketVersioningCommand_1.PutBucketVersioningCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putBucketWebsite(args, optionsOrCb, cb) {
        const command = new PutBucketWebsiteCommand_1.PutBucketWebsiteCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObject(args, optionsOrCb, cb) {
        const command = new PutObjectCommand_1.PutObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObjectAcl(args, optionsOrCb, cb) {
        const command = new PutObjectAclCommand_1.PutObjectAclCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObjectLegalHold(args, optionsOrCb, cb) {
        const command = new PutObjectLegalHoldCommand_1.PutObjectLegalHoldCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObjectLockConfiguration(args, optionsOrCb, cb) {
        const command = new PutObjectLockConfigurationCommand_1.PutObjectLockConfigurationCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObjectRetention(args, optionsOrCb, cb) {
        const command = new PutObjectRetentionCommand_1.PutObjectRetentionCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putObjectTagging(args, optionsOrCb, cb) {
        const command = new PutObjectTaggingCommand_1.PutObjectTaggingCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      putPublicAccessBlock(args, optionsOrCb, cb) {
        const command = new PutPublicAccessBlockCommand_1.PutPublicAccessBlockCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      restoreObject(args, optionsOrCb, cb) {
        const command = new RestoreObjectCommand_1.RestoreObjectCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      selectObjectContent(args, optionsOrCb, cb) {
        const command = new SelectObjectContentCommand_1.SelectObjectContentCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      uploadPart(args, optionsOrCb, cb) {
        const command = new UploadPartCommand_1.UploadPartCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      uploadPartCopy(args, optionsOrCb, cb) {
        const command = new UploadPartCopyCommand_1.UploadPartCopyCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
      writeGetObjectResponse(args, optionsOrCb, cb) {
        const command = new WriteGetObjectResponseCommand_1.WriteGetObjectResponseCommand(args);
        if (typeof optionsOrCb === "function") {
          this.send(command, optionsOrCb);
        } else if (typeof cb === "function") {
          if (typeof optionsOrCb !== "object")
            throw new Error(`Expect http options but get ${typeof optionsOrCb}`);
          this.send(command, optionsOrCb || {}, cb);
        } else {
          return this.send(command, optionsOrCb);
        }
      }
    };
    exports2.S3 = S3;
  }
});

var require_commands4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/commands/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_AbortMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_CompleteMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_CopyObjectCommand(), exports2);
    tslib_1.__exportStar(require_CreateBucketCommand(), exports2);
    tslib_1.__exportStar(require_CreateMultipartUploadCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketLifecycleCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_DeleteBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_DeleteObjectsCommand(), exports2);
    tslib_1.__exportStar(require_DeletePublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAccelerateConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAclCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLifecycleConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLocationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketLoggingCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketNotificationConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketPolicyStatusCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketRequestPaymentCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketVersioningCommand(), exports2);
    tslib_1.__exportStar(require_GetBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectAclCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectAttributesCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectLegalHoldCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectLockConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectRetentionCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_GetObjectTorrentCommand(), exports2);
    tslib_1.__exportStar(require_GetPublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_HeadBucketCommand(), exports2);
    tslib_1.__exportStar(require_HeadObjectCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketAnalyticsConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketIntelligentTieringConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketInventoryConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketMetricsConfigurationsCommand(), exports2);
    tslib_1.__exportStar(require_ListBucketsCommand(), exports2);
    tslib_1.__exportStar(require_ListMultipartUploadsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectVersionsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectsCommand(), exports2);
    tslib_1.__exportStar(require_ListObjectsV2Command(), exports2);
    tslib_1.__exportStar(require_ListPartsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAccelerateConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAclCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketAnalyticsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketCorsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketEncryptionCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketIntelligentTieringConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketInventoryConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketLifecycleConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketLoggingCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketMetricsConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketNotificationConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketOwnershipControlsCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketPolicyCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketReplicationCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketRequestPaymentCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketTaggingCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketVersioningCommand(), exports2);
    tslib_1.__exportStar(require_PutBucketWebsiteCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectAclCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectLegalHoldCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectLockConfigurationCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectRetentionCommand(), exports2);
    tslib_1.__exportStar(require_PutObjectTaggingCommand(), exports2);
    tslib_1.__exportStar(require_PutPublicAccessBlockCommand(), exports2);
    tslib_1.__exportStar(require_RestoreObjectCommand(), exports2);
    tslib_1.__exportStar(require_SelectObjectContentCommand(), exports2);
    tslib_1.__exportStar(require_UploadPartCommand(), exports2);
    tslib_1.__exportStar(require_UploadPartCopyCommand(), exports2);
    tslib_1.__exportStar(require_WriteGetObjectResponseCommand(), exports2);
  }
});

var require_models4 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/models/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_models_0(), exports2);
    tslib_1.__exportStar(require_models_1(), exports2);
  }
});

var require_Interfaces2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/Interfaces.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
  }
});

var require_ListObjectsV2Paginator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListObjectsV2Paginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListObjectsV2 = void 0;
    var ListObjectsV2Command_1 = require_ListObjectsV2Command();
    var S3_1 = require_S3();
    var S3Client_1 = require_S3Client();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListObjectsV2Command_1.ListObjectsV2Command(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listObjectsV2(input, ...args);
    };
    async function* paginateListObjectsV2(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.ContinuationToken = token;
        input["MaxKeys"] = config.pageSize;
        if (config.client instanceof S3_1.S3) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof S3Client_1.S3Client) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextContinuationToken;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListObjectsV2 = paginateListObjectsV2;
  }
});

var require_ListPartsPaginator = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/ListPartsPaginator.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.paginateListParts = void 0;
    var ListPartsCommand_1 = require_ListPartsCommand();
    var S3_1 = require_S3();
    var S3Client_1 = require_S3Client();
    var makePagedClientRequest = async (client, input, ...args) => {
      return await client.send(new ListPartsCommand_1.ListPartsCommand(input), ...args);
    };
    var makePagedRequest = async (client, input, ...args) => {
      return await client.listParts(input, ...args);
    };
    async function* paginateListParts(config, input, ...additionalArguments) {
      let token = config.startingToken || void 0;
      let hasNext = true;
      let page;
      while (hasNext) {
        input.PartNumberMarker = token;
        input["MaxParts"] = config.pageSize;
        if (config.client instanceof S3_1.S3) {
          page = await makePagedRequest(config.client, input, ...additionalArguments);
        } else if (config.client instanceof S3Client_1.S3Client) {
          page = await makePagedClientRequest(config.client, input, ...additionalArguments);
        } else {
          throw new Error("Invalid client, expected S3 | S3Client");
        }
        yield page;
        const prevToken = token;
        token = page.NextPartNumberMarker;
        hasNext = !!(token && (!config.stopOnSameToken || token !== prevToken));
      }
      return void 0;
    }
    exports2.paginateListParts = paginateListParts;
  }
});

var require_pagination3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/pagination/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_Interfaces2(), exports2);
    tslib_1.__exportStar(require_ListObjectsV2Paginator(), exports2);
    tslib_1.__exportStar(require_ListPartsPaginator(), exports2);
  }
});

var require_sleep = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/sleep.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.sleep = void 0;
    var sleep = (seconds) => {
      return new Promise((resolve) => setTimeout(resolve, seconds * 1e3));
    };
    exports2.sleep = sleep;
  }
});

var require_waiter2 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/waiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.checkExceptions = exports2.WaiterState = exports2.waiterServiceDefaults = void 0;
    exports2.waiterServiceDefaults = {
      minDelay: 2,
      maxDelay: 120
    };
    var WaiterState;
    (function(WaiterState2) {
      WaiterState2["ABORTED"] = "ABORTED";
      WaiterState2["FAILURE"] = "FAILURE";
      WaiterState2["SUCCESS"] = "SUCCESS";
      WaiterState2["RETRY"] = "RETRY";
      WaiterState2["TIMEOUT"] = "TIMEOUT";
    })(WaiterState = exports2.WaiterState || (exports2.WaiterState = {}));
    var checkExceptions = (result) => {
      if (result.state === WaiterState.ABORTED) {
        const abortError = new Error(`${JSON.stringify({
          ...result,
          reason: "Request was aborted"
        })}`);
        abortError.name = "AbortError";
        throw abortError;
      } else if (result.state === WaiterState.TIMEOUT) {
        const timeoutError = new Error(`${JSON.stringify({
          ...result,
          reason: "Waiter has timed out"
        })}`);
        timeoutError.name = "TimeoutError";
        throw timeoutError;
      } else if (result.state !== WaiterState.SUCCESS) {
        throw new Error(`${JSON.stringify({ result })}`);
      }
      return result;
    };
    exports2.checkExceptions = checkExceptions;
  }
});

var require_poller = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/poller.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.runPolling = void 0;
    var sleep_1 = require_sleep();
    var waiter_1 = require_waiter2();
    var exponentialBackoffWithJitter = (minDelay, maxDelay, attemptCeiling, attempt) => {
      if (attempt > attemptCeiling)
        return maxDelay;
      const delay = minDelay * 2 ** (attempt - 1);
      return randomInRange(minDelay, delay);
    };
    var randomInRange = (min, max) => min + Math.random() * (max - min);
    var runPolling = async ({ minDelay, maxDelay, maxWaitTime, abortController, client, abortSignal }, input, acceptorChecks) => {
      var _a;
      const { state, reason } = await acceptorChecks(client, input);
      if (state !== waiter_1.WaiterState.RETRY) {
        return { state, reason };
      }
      let currentAttempt = 1;
      const waitUntil = Date.now() + maxWaitTime * 1e3;
      const attemptCeiling = Math.log(maxDelay / minDelay) / Math.log(2) + 1;
      while (true) {
        if (((_a = abortController === null || abortController === void 0 ? void 0 : abortController.signal) === null || _a === void 0 ? void 0 : _a.aborted) || (abortSignal === null || abortSignal === void 0 ? void 0 : abortSignal.aborted)) {
          return { state: waiter_1.WaiterState.ABORTED };
        }
        const delay = exponentialBackoffWithJitter(minDelay, maxDelay, attemptCeiling, currentAttempt);
        if (Date.now() + delay * 1e3 > waitUntil) {
          return { state: waiter_1.WaiterState.TIMEOUT };
        }
        await (0, sleep_1.sleep)(delay);
        const { state: state2, reason: reason2 } = await acceptorChecks(client, input);
        if (state2 !== waiter_1.WaiterState.RETRY) {
          return { state: state2, reason: reason2 };
        }
        currentAttempt += 1;
      }
    };
    exports2.runPolling = runPolling;
  }
});

var require_validate = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/validate.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.validateWaiterOptions = void 0;
    var validateWaiterOptions = (options) => {
      if (options.maxWaitTime < 1) {
        throw new Error(`WaiterConfiguration.maxWaitTime must be greater than 0`);
      } else if (options.minDelay < 1) {
        throw new Error(`WaiterConfiguration.minDelay must be greater than 0`);
      } else if (options.maxDelay < 1) {
        throw new Error(`WaiterConfiguration.maxDelay must be greater than 0`);
      } else if (options.maxWaitTime <= options.minDelay) {
        throw new Error(`WaiterConfiguration.maxWaitTime [${options.maxWaitTime}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      } else if (options.maxDelay < options.minDelay) {
        throw new Error(`WaiterConfiguration.maxDelay [${options.maxDelay}] must be greater than WaiterConfiguration.minDelay [${options.minDelay}] for this waiter`);
      }
    };
    exports2.validateWaiterOptions = validateWaiterOptions;
  }
});

var require_utils3 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/utils/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_sleep(), exports2);
    tslib_1.__exportStar(require_validate(), exports2);
  }
});

var require_createWaiter = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/createWaiter.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.createWaiter = void 0;
    var poller_1 = require_poller();
    var utils_1 = require_utils3();
    var waiter_1 = require_waiter2();
    var abortTimeout = async (abortSignal) => {
      return new Promise((resolve) => {
        abortSignal.onabort = () => resolve({ state: waiter_1.WaiterState.ABORTED });
      });
    };
    var createWaiter = async (options, input, acceptorChecks) => {
      const params = {
        ...waiter_1.waiterServiceDefaults,
        ...options
      };
      (0, utils_1.validateWaiterOptions)(params);
      const exitConditions = [(0, poller_1.runPolling)(params, input, acceptorChecks)];
      if (options.abortController) {
        exitConditions.push(abortTimeout(options.abortController.signal));
      }
      if (options.abortSignal) {
        exitConditions.push(abortTimeout(options.abortSignal));
      }
      return Promise.race(exitConditions);
    };
    exports2.createWaiter = createWaiter;
  }
});

var require_dist_cjs67 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/util-waiter/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_createWaiter(), exports2);
    tslib_1.__exportStar(require_waiter2(), exports2);
  }
});

var require_waitForBucketExists = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilBucketExists = exports2.waitForBucketExists = void 0;
    var util_waiter_1 = require_dist_cjs67();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForBucketExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForBucketExists = waitForBucketExists;
    var waitUntilBucketExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilBucketExists = waitUntilBucketExists;
  }
});

var require_waitForBucketNotExists = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForBucketNotExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilBucketNotExists = exports2.waitForBucketNotExists = void 0;
    var util_waiter_1 = require_dist_cjs67();
    var HeadBucketCommand_1 = require_HeadBucketCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadBucketCommand_1.HeadBucketCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForBucketNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForBucketNotExists = waitForBucketNotExists;
    var waitUntilBucketNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilBucketNotExists = waitUntilBucketNotExists;
  }
});

var require_waitForObjectExists = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilObjectExists = exports2.waitForObjectExists = void 0;
    var util_waiter_1 = require_dist_cjs67();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));
        reason = result;
        return { state: util_waiter_1.WaiterState.SUCCESS, reason };
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.RETRY, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForObjectExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForObjectExists = waitForObjectExists;
    var waitUntilObjectExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilObjectExists = waitUntilObjectExists;
  }
});

var require_waitForObjectNotExists = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/waitForObjectNotExists.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.waitUntilObjectNotExists = exports2.waitForObjectNotExists = void 0;
    var util_waiter_1 = require_dist_cjs67();
    var HeadObjectCommand_1 = require_HeadObjectCommand();
    var checkState = async (client, input) => {
      let reason;
      try {
        const result = await client.send(new HeadObjectCommand_1.HeadObjectCommand(input));
        reason = result;
      } catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "NotFound") {
          return { state: util_waiter_1.WaiterState.SUCCESS, reason };
        }
      }
      return { state: util_waiter_1.WaiterState.RETRY, reason };
    };
    var waitForObjectNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      return (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
    };
    exports2.waitForObjectNotExists = waitForObjectNotExists;
    var waitUntilObjectNotExists = async (params, input) => {
      const serviceDefaults = { minDelay: 5, maxDelay: 120 };
      const result = await (0, util_waiter_1.createWaiter)({ ...serviceDefaults, ...params }, input, checkState);
      return (0, util_waiter_1.checkExceptions)(result);
    };
    exports2.waitUntilObjectNotExists = waitUntilObjectNotExists;
  }
});

var require_waiters = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/waiters/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_waitForBucketExists(), exports2);
    tslib_1.__exportStar(require_waitForBucketNotExists(), exports2);
    tslib_1.__exportStar(require_waitForObjectExists(), exports2);
    tslib_1.__exportStar(require_waitForObjectNotExists(), exports2);
  }
});

var require_dist_cjs68 = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/node_modules/@aws-sdk/client-s3/dist-cjs/index.js"(exports2) {
    "use strict";
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.S3ServiceException = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    tslib_1.__exportStar(require_S3(), exports2);
    tslib_1.__exportStar(require_S3Client(), exports2);
    tslib_1.__exportStar(require_commands4(), exports2);
    tslib_1.__exportStar(require_models4(), exports2);
    tslib_1.__exportStar(require_pagination3(), exports2);
    tslib_1.__exportStar(require_waiters(), exports2);
    var S3ServiceException_1 = require_S3ServiceException();
    Object.defineProperty(exports2, "S3ServiceException", { enumerable: true, get: function() {
      return S3ServiceException_1.S3ServiceException;
    } });
  }
});

var require_bucket_inflight = __commonJS({
  "../.nvm/versions/node/v18.11.0/lib/node_modules/winglang/node_modules/@winglang/sdk/lib/shared-aws/bucket.inflight.js"(exports2) {
    "use strict";
    var __createBinding4 = exports2 && exports2.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault2 = exports2 && exports2.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar4 = exports2 && exports2.__importStar || function(mod) {
      if (mod && mod.__esModule)
        return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod)
          if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
            __createBinding4(result, mod, k);
      }
      __setModuleDefault2(result, mod);
      return result;
    };
    Object.defineProperty(exports2, "__esModule", { value: true });
    exports2.BucketClient = void 0;
    var consumers = __importStar4(require("stream/consumers"));
    var client_s3_1 = require_dist_cjs68();
    var BucketClient = class {
      constructor(bucketName, _public = false, s3Client = new client_s3_1.S3Client({})) {
        this.bucketName = bucketName;
        this._public = _public;
        this.s3Client = s3Client;
      }
      async put(key, body) {
        const command = new client_s3_1.PutObjectCommand({
          Bucket: this.bucketName,
          Key: key,
          Body: body
        });
        await this.s3Client.send(command);
      }
      async putJson(key, body) {
        await this.put(key, JSON.stringify(body, null, 2));
      }
      async get(key) {
        const command = new client_s3_1.GetObjectCommand({
          Bucket: this.bucketName,
          Key: key
        });
        const resp = await this.s3Client.send(command);
        return consumers.text(resp.Body);
      }
      async getJson(key) {
        return JSON.parse(await this.get(key));
      }
      async exists(key) {
        const command = new client_s3_1.ListObjectsV2Command({
          Bucket: this.bucketName,
          Prefix: key,
          MaxKeys: 1
        });
        const resp = await this.s3Client.send(command);
        return !!resp.Contents && resp.Contents.length > 0;
      }
      async getLocation() {
        const command = new client_s3_1.GetBucketLocationCommand({
          Bucket: this.bucketName
        });
        const { LocationConstraint: region = "us-east-1" } = await this.s3Client.send(command);
        return region;
      }
      /**
       * Returns a url to the given file.
       * @Throws if the file is not public or if object does not exist.
       */
      async publicUrl(key) {
        if (!this._public) {
          throw new Error("Cannot provide public url for a non-public bucket");
        }
        if (!await this.exists(key)) {
          throw new Error(`Cannot provide public url for an non-existent key (key=${key})`);
        }
        const region = await this.getLocation();
        return encodeURI(`https://${this.bucketName}.s3.${region}.amazonaws.com/${key}`);
      }
      /**
       * Returns a signed url to the given file. This URL can be used by anyone to
       * access the file until the link expires (defaults to 24 hours).
       * @param key The key to reach
       * @param duration Time until expires
       */
      async signed_url(key, duration) {
        throw new Error(`signed_url is not implemented yet (key=${key}, duration=${duration})`);
      }
      /**
       * List all keys in the bucket.
       * @param prefix Limits the response to keys that begin with the specified prefix
       * TODO - add pagination support, currently returns all existing keys in the bucket
       */
      async list(prefix) {
        const list = [];
        let fetchMore = true;
        let marker = void 0;
        while (fetchMore) {
          const command = new client_s3_1.ListObjectsV2Command({
            Bucket: this.bucketName,
            Prefix: prefix,
            StartAfter: marker
          });
          const resp = await this.s3Client.send(command);
          for (const content of resp.Contents ?? []) {
            if (content.Key === void 0) {
              continue;
            }
            list.push(content.Key);
          }
          fetchMore = (resp == null ? void 0 : resp.IsTruncated) ?? false;
          marker = list.length > 0 ? list.at(-1) : void 0;
        }
        return list;
      }
      /**
       * Delete an existing object using a key from the bucket
       * @param key Key of the object.
       * @param opts Option object supporting additional strategies to delete an item from a bucket
       */
      async delete(key, opts) {
        const mustExist = (opts == null ? void 0 : opts.mustExist) ?? false;
        const command = new client_s3_1.DeleteObjectCommand({
          Key: key,
          Bucket: this.bucketName
        });
        try {
          await this.s3Client.send(command);
        } catch (er) {
          const error = er;
          if (!mustExist && error.name === "NoSuchKey") {
            return;
          }
          throw Error(`unable to delete "${key}": ${error.message}`);
        }
      }
    };
    exports2.BucketClient = BucketClient;
  }
});

exports.handler = async function(event) {
  return await new (require_queue_addconsumer_inflight()).QueueAddConsumerHandlerClient({ handler: new (function() {
    return class Handler {
      constructor(clients) {
        for (const [name, client] of Object.entries(clients)) {
          this[name] = client;
        }
      }
      async handle(message) {
        const { bucket } = this;
        await bucket.put("wing.txt", `Hello, ${message}`);
      }
    };
  }())({
    bucket: new (require_bucket_inflight()).BucketClient(process.env["BUCKET_NAME_d755b447"], process.env["BUCKET_NAME_d755b447_IS_PUBLIC"])
  }) }).handle(event);
};
/*! Bundled license information:

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)

tslib/tslib.es6.js:
  (*! *****************************************************************************
  Copyright (c) Microsoft Corporation.
  
  Permission to use, copy, modify, and/or distribute this software for any
  purpose with or without fee is hereby granted.
  
  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
  REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
  AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
  INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
  LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
  OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
  PERFORMANCE OF THIS SOFTWARE.
  ***************************************************************************** *)
*/
